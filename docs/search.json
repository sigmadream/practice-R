[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Preface",
    "section": "",
    "text": "꽤 오랫동안 R을 사용했습니다. 정확히는 협업에서 R을 사용했습니다. 데이터 분석이나 추천시스템을 전문적으로 배우지 못하고, 현장에서 추천시스템을 개발/개선하는 업무를 진행했기 때문에 다양한 도구를 많이 사용했습니다. 그 중에서 데이터를 다루는 분들과 의사소통을 위해서 가장 많이 활용했던 도구가 R과 Excel 입니다. 기존에 관련 연구자 및 분석가분들과 함께 공부를 하면서 알게된 내용을 간단하게 정리해둔 문서입니다. 이 문서는 R을 사용하는 분들이나 데이터 분석을 하시는 분들에게 도움이 되었으면 좋겠습니다.\nP.S : 해당 저장소는 R언어를 사용하는 분들의 관례에 따라 renv를 사용하고 있습니다. 해당 프로젝트를 renv를 사용하세요.",
    "crumbs": [
      "Home",
      "Preface"
    ]
  },
  {
    "objectID": "index.html#소개",
    "href": "index.html#소개",
    "title": "Preface",
    "section": "",
    "text": "꽤 오랫동안 R을 사용했습니다. 정확히는 협업에서 R을 사용했습니다. 데이터 분석이나 추천시스템을 전문적으로 배우지 못하고, 현장에서 추천시스템을 개발/개선하는 업무를 진행했기 때문에 다양한 도구를 많이 사용했습니다. 그 중에서 데이터를 다루는 분들과 의사소통을 위해서 가장 많이 활용했던 도구가 R과 Excel 입니다. 기존에 관련 연구자 및 분석가분들과 함께 공부를 하면서 알게된 내용을 간단하게 정리해둔 문서입니다. 이 문서는 R을 사용하는 분들이나 데이터 분석을 하시는 분들에게 도움이 되었으면 좋겠습니다.\nP.S : 해당 저장소는 R언어를 사용하는 분들의 관례에 따라 renv를 사용하고 있습니다. 해당 프로젝트를 renv를 사용하세요.",
    "crumbs": [
      "Home",
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "R의 자료구조, 제어문 그리고 함수",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (나성호, 2021)의 경우 3장, 4장을 참고하세요. (오세종, 2023)의 경우 2장, 3장을 참고하세요.\n\n\n\n\n\n\n\n실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "intro.html#벡터",
    "href": "intro.html#벡터",
    "title": "주요 자료 구조",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n\n\n\nR에서 하나의 값은 자료가 지닌 형태에 따라 실수, 정수, 문자, 논리, 범주(요인) 자료형(data type)으로 표현\n\n실수형(numeric), 소수점을 포함하고 있는 숫자\n정수형(integer), 소수점이 없는 숫자, 마지막에 L을 붙이면 정수형으로 표현\n문자형(character), 숫자가 아니라 일반적인 문자로 구성된 자료형\n논리형(logical) : TRUE(또는 T) 및 FALSE(또는 F)로 구성된 자료형\n범주형(factor), 명목형인 범주(요인)로 구성된 자료형\n\n벡터는 동일한 자료형을 갖는 원소들의 집합\n\n자료형이 다른 스칼라 또는 벡터를 추가하면 자동으로 자료형이 변환되는 강제변환(coercion) 됨\n논리, 범주 -&gt; 정수 -&gt; 실수 -&gt; 문자 순으로 변환됨\n\n\n\n\n\n\na &lt;- c(1,2,3)\nclass(a)\n\n[1] \"numeric\"\n\nb &lt;- c(1L, 2L, 3L)\nclass(b)\n\n[1] \"integer\"\n\nc &lt;- c('hello', 'world')\nclass(c)\n\n[1] \"character\"\n\nd &lt;- c(FALSE, TRUE)\nclass(d)\n\n[1] \"logical\"\n\ne &lt;- as.factor(x = c('한국', '일본', '중국', '미국', '중국', '한국', '미국', '일본'))\nclass(e)\n\n[1] \"factor\"\n\nas.integer(x = e)\n\n[1] 4 2 3 1 3 4 1 2",
    "crumbs": [
      "Home",
      "R 기초",
      "주요 자료 구조"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References\n\n(나성호, 2021) (오세종, 2023)\n\n나성호. (2021). Must have 나성호의 r 데이터 분석 입문. 골든래빗.\n\n\n오세종. (2023). 모두를 위한 r 데이터 분석 입문 (2판). 한빛미디어.",
    "crumbs": [
      "Home",
      "References"
    ]
  },
  {
    "objectID": "ds-vector.html",
    "href": "ds-vector.html",
    "title": "R 기초에 관한 자료",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (나성호, 2021)의 경우 3장, 4장을 참고하세요. (오세종, 2023)의 경우 2장, 3장을 참고하세요.\n\n\n\n\n\n\n\n실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "ds-vector.html#벡터",
    "href": "ds-vector.html#벡터",
    "title": "주요 자료 구조",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R` 기초에 관한 자료"
    ]
  },
  {
    "objectID": "ds-vector.html#리스트",
    "href": "ds-vector.html#리스트",
    "title": "주요 자료 구조",
    "section": "",
    "text": "리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R` 기초에 관한 자료"
    ]
  },
  {
    "objectID": "ds-vector.html#데이터프레임",
    "href": "ds-vector.html#데이터프레임",
    "title": "주요 자료 구조",
    "section": "",
    "text": "R을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R` 기초에 관한 자료"
    ]
  },
  {
    "objectID": "ds-vector.html#자료구조",
    "href": "ds-vector.html#자료구조",
    "title": "R 기초에 관한 자료",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (나성호, 2021)의 경우 3장, 4장을 참고하세요. (오세종, 2023)의 경우 2장, 3장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "ds-vector.html#제어와-함수",
    "href": "ds-vector.html#제어와-함수",
    "title": "R 기초에 관한 자료",
    "section": "",
    "text": "실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "intro.html#자료구조",
    "href": "intro.html#자료구조",
    "title": "R의 자료구조, 제어문 그리고 함수",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (나성호, 2021)의 경우 3장, 4장을 참고하세요. (오세종, 2023)의 경우 2장, 3장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "intro.html#제어와-함수",
    "href": "intro.html#제어와-함수",
    "title": "R의 자료구조, 제어문 그리고 함수",
    "section": "",
    "text": "실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "ggplot2.html",
    "href": "ggplot2.html",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "R 패키지를 활용하여 다양한 작업을 할 수 있지만, 저는 그 중에서 데이터 분석과 통계 분석 및 모델을 기반으로 많은 업무를 진행하였습니다. 따라서 제가 생각하기 R 패키지 중에서 가장 활용 용도가 높다고 생각하는 ggplot2을 사용해서 간단한 R 코드를 연습하고, 데이터 시각화를 진행해보겠습니다.\n\n제가 지금까지 사용했던 모든 그래프 도구 중에서 가장 멋진 라이브러리 입니다. 모든 그래프 도구가 나름의 멋짐을 가지고 있지만, ggplot2가 가져다 주는 조합의 묘미가 굉장히 흥미롭게 재미있습니다. 그리고 R을 사용함에 있어서 ggplot2를 잘 활용하면 좋은 데이터를 기반으로 더 나은 의사소통을 할 수 있습니다.\n\n\nggplot2 패키지를 사용하기 위해서는 아래와 같은 패키지를 설치하고 불러와야 합니다. 패키지 설치는 install.packages()를 사용하시면 됩니다. ggplot2, dplyr, readr은 tidyverse 패키지에 포함되어 있기 때문에, 일반적으로 tidyverse를 설치하실 때 대부분 설치되었있습니다. 만약 설치되어 있지 않다면 install.packages(\"tidyverse\")로 설치를 진행하시면 됩니다. ggthemes는 ggplot2의 테마를 추가 할 수 있는 패키지입니다.\n\nlibrary(ggplot2)\nlibrary(ggthemes) \nlibrary(dplyr) \nlibrary(readr)\nlibrary(forcats)\nlibrary(scales)\nlibrary(RColorBrewer)\n\n\n\n\n간단한 데이터를 생성하고, 이를 시각화하는 방법을 알아보겠습니다. 이 데이터는 (Mauricio Vargas Sepúlveda, 2023)에서 가져왔습니다.\n\nchilean_exports &lt;- \"year,product,export,percentage\n2006,copper,4335009500,81\n2006,others,1016726518,19\n2007,copper,9005361914,86\n2007,others,1523085299,14\n2008,copper,6907056354,80\n2008,others,1762684216,20\n2009,copper,10529811075,81\n2009,others,2464094241,19\n2010,copper,14828284450,85\n2010,others,2543015596,15\n2011,copper,15291679086,82\n2011,others,3447972354,18\n2012,copper,14630686732,80\n2012,others,3583968218,20\n2013,copper,15244038840,79\n2013,others,4051281128,21\n2014,copper,14703374241,78\n2014,others,4251484600,22\n2015,copper,13155922363,78\n2015,others,3667286912,22\n\"\nexports_data &lt;- read_csv(chilean_exports)\n\nRows: 20 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): product\ndbl (3): year, export, percentage\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\ncolour &lt;- c(\"#40b8d0\", \"#b2d183\")\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product), data = exports_data) +\n  geom_line(linewidth = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_colour_manual(values = colour) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\"),\n        legend.key.size = unit(2, \"lines\")) +\n  geom_point(size = 3)\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\np1\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np2 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) + \n  geom_area() +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10), \n        axis.text.y = element_text(colour = \"black\", size = 10), \n        legend.key = element_rect(fill = \"white\", colour = \"white\"), \n        legend.position = \"bottom\", \n        legend.direction = \"horizontal\", \n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"), \n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T)) \np2\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nexports_data &lt;- exports_data %&gt;%\n  mutate(export_label = paste(round(export/1000000000,2), \"B\"))\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np3 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = export_label), position = position_stack(vjust = 0.5), colour = \"black\", family = \"Tahoma\", size = 3, show.legend = F) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\n\np3\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np4 &lt;- ggplot(aes(y = percentage, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = paste0(percentage,\"%\")), position = position_stack(vjust = 0.5), colour = \"black\", family = \"MaruBuri Regular\", size = 4) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  scale_y_continuous(labels = dollar_format(suffix = \"%\", prefix = \"\")) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"Percentage\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\np4\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\n\naq_trim &lt;- airquality %&gt;%\n  filter(Month %in% c(7,8,9)) %&gt;%\n  mutate(Month = factor(Month, labels = c(\"July\", \"August\", \"September\")))\n\nfill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np5 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\", legend.direction = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np5\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nfill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np6 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, size = Wind, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", size = \"Wind Speed (mph) \", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"vertical\",\n    legend.key.size = unit(0.5, \"cm\"),\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np6\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\nbarfill &lt;- \"#4271AE\"; barlines &lt;- \"#1F3552\"\n\np7 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 5, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  geom_vline(xintercept = 75, size = 1, colour = \"#FF3721\", linetype = \"dashed\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, linewidth = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np7\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"July\")))\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  facet_grid(. ~ Month.f, scales = \"free\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np7  \n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, fill = Month.f)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, position = \"identity\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_fill_brewer(palette = \"Accent\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\")) +\n  labs(fill = \"Month \")\np7\n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\n\np8 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_density(fill = \"#4271AE\", colour = \"#1F3552\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Density plot of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,6,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"June\", \"July\")))\n\np8 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, colour = Month.f)) +\n  geom_density(position = \"identity\", size = 1) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 200, 25), limits = c(0, 200)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_colour_brewer(palette = \"Accent\") +\n  labs(colour = \"Month \") +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 31 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\nfuncShaded &lt;- function(x) {\n  y &lt;- dnorm(x, mean = 0.2, sd = 0.1)\n  y[x &lt; 0.2 | x &gt; (0.2 + 4 * 0.1)] &lt;- NA\n  return(y)\n}\n\np9 &lt;- ggplot(tibble(x = c(0, 1)), aes(x = x)) +\n  stat_function(fun = dnorm, args = list(0.2, 0.1),\n                aes(colour = \"Group 1 \"), size = 1.5) +\n  stat_function(fun = dnorm, args = list(0.7, 0.05),\n                aes(colour = \"Group 2 \"), size = 1.5) +\n  stat_function(fun = funcShaded, geom = \"area\", fill = \"#84CA72\", alpha = 0.2) +\n  scale_x_continuous(name = \"Probability\", breaks = seq(0, 1, 0.2), limits = c(0, 1)) +\n  scale_y_continuous(name = \"Frequency\") +\n  labs(title = \"Normal function curves of probabilities\") +\n  labs(colour = \"Groups \") +\n  scale_colour_brewer(palette = \"Accent\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np9\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\nfill &lt;- \"#4271AE\"; lines &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\np10 &lt;- ggplot(airquality, aes(x = Month, y = Ozone)) +\n  geom_boxplot(colour = lines, fill = fill, size = 1, notch = TRUE) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", size = .5),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"),\n    axis.title = element_text(face = \"bold\"),\n    axis.text.x = element_text(colour = \"black\", size = 11),\n    axis.text.y = element_text(colour = \"black\", size = 9))\np10\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nNotch went outside hinges\nℹ Do you want `notch = FALSE`?\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\nfill &lt;- \"#4271AE\"; line &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(\"Jul\", \"Aug\", \"Sep\")) %&gt;%\n  mutate(Temp.f = factor(ifelse(Temp &gt; mean(Temp), 1, 0),\n                         labels = c(\"Low temp \", \"High temp \")))\n\np10 &lt;- ggplot(airquality_trimmed, aes(x = Month, y = Ozone)) +\n  geom_boxplot(fill = fill, colour = line, alpha = 0.7) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 50), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"),\n        axis.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(size = 11)) +\n  facet_grid(. ~ Temp.f)\np10  \n\nWarning: Removed 11 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#준비",
    "href": "ggplot2.html#준비",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "ggplot2 패키지를 사용하기 위해서는 아래와 같은 패키지를 설치하고 불러와야 합니다. 패키지 설치는 install.packages()를 사용하시면 됩니다. ggplot2, dplyr, readr은 tidyverse 패키지에 포함되어 있기 때문에, 일반적으로 tidyverse를 설치하실 때 대부분 설치되었있습니다. 만약 설치되어 있지 않다면 install.packages(\"tidyverse\")로 설치를 진행하시면 됩니다. ggthemes는 ggplot2의 테마를 추가 할 수 있는 패키지입니다.\n\nlibrary(ggplot2)\nlibrary(ggthemes) \nlibrary(dplyr) \nlibrary(readr)\nlibrary(forcats)\nlibrary(scales)\nlibrary(RColorBrewer)",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#line",
    "href": "ggplot2.html#line",
    "title": "ggplot2",
    "section": "",
    "text": "간단한 데이터를 생성하고, 이를 시각화하는 방법을 알아보겠습니다. 이 데이터는 (Mauricio Vargas Sepúlveda, 2023)에서 가져왔습니다.\n\nchilean_exports &lt;- \"year,product,export,percentage\n2006,copper,4335009500,81\n2006,others,1016726518,19\n2007,copper,9005361914,86\n2007,others,1523085299,14\n2008,copper,6907056354,80\n2008,others,1762684216,20\n2009,copper,10529811075,81\n2009,others,2464094241,19\n2010,copper,14828284450,85\n2010,others,2543015596,15\n2011,copper,15291679086,82\n2011,others,3447972354,18\n2012,copper,14630686732,80\n2012,others,3583968218,20\n2013,copper,15244038840,79\n2013,others,4051281128,21\n2014,copper,14703374241,78\n2014,others,4251484600,22\n2015,copper,13155922363,78\n2015,others,3667286912,22\n\"\nexports_data &lt;- read_csv(chilean_exports)\n\nRows: 20 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): product\ndbl (3): year, export, percentage\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n먼저 간단한 선(line) 그래프를 그려보겠습니다. 그래프를 초기화하기 위해 ggplot에 exports_data를 데이터로 지정하고 각 축에 변수(x, y)를 지정합니다. 그런 다음 geom_line 명령을 추가하여 선 그래프 화면에 출력하도록 합니다. 선 그래프의 두께를 조절하기 위해서 linewidth를 1.5로 설정합니다. 산점도(geom_point), 박스(geom_boxplot), 히스토그램(geom_histogram), 막대(geom_bar) 등과 같은 그래프 등을 많이 활용합니다.\n\np1 &lt;- ggplot(data = exports_data, mapping = aes(x = year, y = export, colour = product)) +\n  geom_line(linewidth = 1.5)\np1\n\n\n\n\n\n\n\n\n그래프에 몇가지 정보를 추가해보도록 하겠습니다. 특히 범례를 중점적으로 수정하도록 하겠습니다.\n\nexports_data &lt;- exports_data %&gt;%\n  mutate(product = factor(product, levels = c(\"copper\",\"others\"),\n                          labels = c(\"Copper \",\"Pulp wood, Fruit, Salmon & Others\")))\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product), data = exports_data) +\n  geom_line(linewidth = 1.5) +\n  theme(text=element_text(family=\"MaruBuri Regular\"),\n        legend.position = \"bottom\", \n        legend.direction = \"horizontal\",\n        legend.title = element_blank())\np1\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n축(x,y)의 데이터와 제목을 추가하도록 하겠습니다.\n\np1 &lt;- p1 + scale_x_continuous(breaks = seq(2006,2015,1)) + \n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\")\np1\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n약간의 색을 변경할 수도 있습니다.\n\ncolour &lt;- c(\"#5F9EA0\", \"#E1B378\")\np1 &lt;- p1 + scale_colour_manual(values = colour)\np1\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n해당 그래프에 테마(theme_bw)를 적용해보도록 하겠습니다.\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product), data = exports_data) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_colour_manual(values = colour) +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_blank())\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np1\n\n\n\n\n\n\n\n\n테마를 조금 수정해보도록 하겠습니다. 세부적인 사항들은 ggplot2 theme에서 확인하실 수 있습니다.\n\nfill &lt;- c(\"#40b8d0\",\"#b2d183\")\n\np1 &lt;- ggplot(data = exports_data, mapping = aes(y = export, x = year, colour = product)) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(axis.line.x = element_line(size = .5, colour = \"black\"),\n      axis.line.y = element_line(size = .5, colour = \"black\"),\n      axis.text.x = element_text(colour = \"black\", size = 10),\n      axis.text.y = element_text(colour = \"black\", size = 10),\n      legend.key = element_rect(fill = \"white\", colour = \"white\"),\n      legend.position = \"bottom\", legend.direction = \"horizontal\",\n      legend.title = element_blank(),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(), panel.border = element_blank(),\n      panel.background = element_blank())\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\np1\n\n\n\n\n\n\n\n\n테마(theme_economist)를 적용하고, 필요한 부분만 수정해보도록 하겠습니다.\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product),\n  data = exports_data) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  theme_economist() + scale_colour_economist() +\n  theme(axis.line.x = element_line(size = .5, colour = \"black\"),\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        plot.title = element_text(family = \"MaruBuri Regular\"),\n        text = element_text(family = \"MaruBuri Regular\"))\np1\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n선 그래프의 가독성을 고려해서 아래와 같이 자신만의 테마로 구성하는 방법도 존재합니다.\n\ncolour &lt;- c(\"#40b8d0\", \"#b2d183\")\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product), data = exports_data) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_colour_manual(values = colour) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\"),\n        legend.key.size = unit(2, \"lines\")) +\n  geom_point(size = 3)\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\np1\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R 기초",
      "ggplot2"
    ]
  },
  {
    "objectID": "ggplot2.html#데이터",
    "href": "ggplot2.html#데이터",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "간단한 데이터를 생성하고, 이를 시각화하는 방법을 알아보겠습니다. 이 데이터는 (Mauricio Vargas Sepúlveda, 2023)에서 가져왔습니다.\n\nchilean_exports &lt;- \"year,product,export,percentage\n2006,copper,4335009500,81\n2006,others,1016726518,19\n2007,copper,9005361914,86\n2007,others,1523085299,14\n2008,copper,6907056354,80\n2008,others,1762684216,20\n2009,copper,10529811075,81\n2009,others,2464094241,19\n2010,copper,14828284450,85\n2010,others,2543015596,15\n2011,copper,15291679086,82\n2011,others,3447972354,18\n2012,copper,14630686732,80\n2012,others,3583968218,20\n2013,copper,15244038840,79\n2013,others,4051281128,21\n2014,copper,14703374241,78\n2014,others,4251484600,22\n2015,copper,13155922363,78\n2015,others,3667286912,22\n\"\nexports_data &lt;- read_csv(chilean_exports)\n\nRows: 20 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): product\ndbl (3): year, export, percentage\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#선-그래프",
    "href": "ggplot2.html#선-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "colour &lt;- c(\"#40b8d0\", \"#b2d183\")\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product), data = exports_data) +\n  geom_line(linewidth = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_colour_manual(values = colour) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\"),\n        legend.key.size = unit(2, \"lines\")) +\n  geom_point(size = 3)\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\np1\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#영역-차트area-chart",
    "href": "ggplot2.html#영역-차트area-chart",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "fill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np2 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) + \n  geom_area() +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10), \n        axis.text.y = element_text(colour = \"black\", size = 10), \n        legend.key = element_rect(fill = \"white\", colour = \"white\"), \n        legend.position = \"bottom\", \n        legend.direction = \"horizontal\", \n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"), \n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T)) \np2\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#bar-and-stacked-bar",
    "href": "ggplot2.html#bar-and-stacked-bar",
    "title": "ggplot2",
    "section": "",
    "text": "기본 막대형 차트를 간단하게 만들어보도록 하겠습니다. 앞선 예제에서 봤던 것과 같은 예제로 진행됩니다. 강의에서 자세히 설명했기 때문에 가능하면 코드를 중심으로 간략하게 설명하도록 하겠습니다.\ngeom_col은 막대형 막대그래프를 표시합니다.\n\np3 &lt;- ggplot(aes(y = export, x = year, fill = product), data = exports_data) +\n  geom_col()\np3\n\n\n\n\n\n\n\n\n막대의 순서를 역순으로 표시하기 위해선 아래와 같이 fct_rev를 사용하세요.\n\np3 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col()\np3\n\n\n\n\n\n\n\n\n레이블을 추가하는 방법은 아래와 같습니다.\n\nexports_data &lt;- exports_data %&gt;%\n  mutate(export_label = paste(round(export/1000000000,2), \"B\"))\n\np3 = p3 + geom_text(data = exports_data, aes(x = year, y = export,\n                                             label = export_label), size = 3)\np3",
    "crumbs": [
      "Home",
      "R 기초",
      "ggplot2"
    ]
  },
  {
    "objectID": "ggplot2.html#bar",
    "href": "ggplot2.html#bar",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "exports_data &lt;- exports_data %&gt;%\n  mutate(export_label = paste(round(export/1000000000,2), \"B\"))\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np3 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = export_label), position = position_stack(vjust = 0.5), colour = \"black\", family = \"Tahoma\", size = 3, show.legend = F) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\n\np3",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#stacked-bar",
    "href": "ggplot2.html#stacked-bar",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "fill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np4 &lt;- ggplot(aes(y = percentage, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = paste0(percentage,\"%\")), position = position_stack(vjust = 0.5), colour = \"black\", family = \"MaruBuri Regular\", size = 4) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  scale_y_continuous(labels = dollar_format(suffix = \"%\", prefix = \"\")) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"Percentage\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\np4",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#weighted-scatter",
    "href": "ggplot2.html#weighted-scatter",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "fill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np6 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, size = Wind, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", size = \"Wind Speed (mph) \", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"vertical\",\n    legend.key.size = unit(0.5, \"cm\"),\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np6\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#scatter",
    "href": "ggplot2.html#scatter",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\n\naq_trim &lt;- airquality %&gt;%\n  filter(Month %in% c(7,8,9)) %&gt;%\n  mutate(Month = factor(Month, labels = c(\"July\", \"August\", \"September\")))\n\nfill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np5 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\", legend.direction = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np5\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#histograms",
    "href": "ggplot2.html#histograms",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\nbarfill &lt;- \"#4271AE\"; barlines &lt;- \"#1F3552\"\n\np7 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 5, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  geom_vline(xintercept = 75, size = 1, colour = \"#FF3721\", linetype = \"dashed\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, linewidth = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np7\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"July\")))\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  facet_grid(. ~ Month.f, scales = \"free\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np7  \n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, fill = Month.f)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, position = \"identity\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_fill_brewer(palette = \"Accent\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\")) +\n  labs(fill = \"Month \")\np7\n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#denstiy",
    "href": "ggplot2.html#denstiy",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\n\np8 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_density(fill = \"#4271AE\", colour = \"#1F3552\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Density plot of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,6,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"June\", \"July\")))\n\np8 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, colour = Month.f)) +\n  geom_density(position = \"identity\", size = 1) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 200, 25), limits = c(0, 200)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_colour_brewer(palette = \"Accent\") +\n  labs(colour = \"Month \") +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 31 rows containing non-finite outside the scale range\n(`stat_density()`).",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#function",
    "href": "ggplot2.html#function",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "funcShaded &lt;- function(x) {\n  y &lt;- dnorm(x, mean = 0.2, sd = 0.1)\n  y[x &lt; 0.2 | x &gt; (0.2 + 4 * 0.1)] &lt;- NA\n  return(y)\n}\n\np9 &lt;- ggplot(tibble(x = c(0, 1)), aes(x = x)) +\n  stat_function(fun = dnorm, args = list(0.2, 0.1),\n                aes(colour = \"Group 1 \"), size = 1.5) +\n  stat_function(fun = dnorm, args = list(0.7, 0.05),\n                aes(colour = \"Group 2 \"), size = 1.5) +\n  stat_function(fun = funcShaded, geom = \"area\", fill = \"#84CA72\", alpha = 0.2) +\n  scale_x_continuous(name = \"Probability\", breaks = seq(0, 1, 0.2), limits = c(0, 1)) +\n  scale_y_continuous(name = \"Frequency\") +\n  labs(title = \"Normal function curves of probabilities\") +\n  labs(colour = \"Groups \") +\n  scale_colour_brewer(palette = \"Accent\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np9",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#boxplot",
    "href": "ggplot2.html#boxplot",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\nfill &lt;- \"#4271AE\"; lines &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\np10 &lt;- ggplot(airquality, aes(x = Month, y = Ozone)) +\n  geom_boxplot(colour = lines, fill = fill, size = 1, notch = TRUE) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", size = .5),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"),\n    axis.title = element_text(face = \"bold\"),\n    axis.text.x = element_text(colour = \"black\", size = 11),\n    axis.text.y = element_text(colour = \"black\", size = 9))\np10\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nNotch went outside hinges\nℹ Do you want `notch = FALSE`?\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\nfill &lt;- \"#4271AE\"; line &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(\"Jul\", \"Aug\", \"Sep\")) %&gt;%\n  mutate(Temp.f = factor(ifelse(Temp &gt; mean(Temp), 1, 0),\n                         labels = c(\"Low temp \", \"High temp \")))\n\np10 &lt;- ggplot(airquality_trimmed, aes(x = Month, y = Ozone)) +\n  geom_boxplot(fill = fill, colour = line, alpha = 0.7) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 50), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"),\n        axis.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(size = 11)) +\n  facet_grid(. ~ Temp.f)\np10  \n\nWarning: Removed 11 rows containing non-finite outside the scale range\n(`stat_boxplot()`).",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#막대-그래프",
    "href": "ggplot2.html#막대-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "exports_data &lt;- exports_data %&gt;%\n  mutate(export_label = paste(round(export/1000000000,2), \"B\"))\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np3 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = export_label), position = position_stack(vjust = 0.5), colour = \"black\", family = \"Tahoma\", size = 3, show.legend = F) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\n\np3\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#누적-막대stacked-bar-그래프",
    "href": "ggplot2.html#누적-막대stacked-bar-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "fill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np4 &lt;- ggplot(aes(y = percentage, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = paste0(percentage,\"%\")), position = position_stack(vjust = 0.5), colour = \"black\", family = \"MaruBuri Regular\", size = 4) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  scale_y_continuous(labels = dollar_format(suffix = \"%\", prefix = \"\")) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"Percentage\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\np4\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#산점도scatter",
    "href": "ggplot2.html#산점도scatter",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\n\naq_trim &lt;- airquality %&gt;%\n  filter(Month %in% c(7,8,9)) %&gt;%\n  mutate(Month = factor(Month, labels = c(\"July\", \"August\", \"September\")))\n\nfill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np5 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\", legend.direction = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np5\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#가중-산점도weighted-scatter",
    "href": "ggplot2.html#가중-산점도weighted-scatter",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "fill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np6 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, size = Wind, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", size = \"Wind Speed (mph) \", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"vertical\",\n    legend.key.size = unit(0.5, \"cm\"),\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np6\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#히스토그램histograms",
    "href": "ggplot2.html#히스토그램histograms",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\nbarfill &lt;- \"#4271AE\"; barlines &lt;- \"#1F3552\"\n\np7 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 5, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  geom_vline(xintercept = 75, size = 1, colour = \"#FF3721\", linetype = \"dashed\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, linewidth = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np7\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"July\")))\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  facet_grid(. ~ Month.f, scales = \"free\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np7  \n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, fill = Month.f)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, position = \"identity\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_fill_brewer(palette = \"Accent\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\")) +\n  labs(fill = \"Month \")\np7\n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#밀집denstiy-그래프",
    "href": "ggplot2.html#밀집denstiy-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\n\np8 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_density(fill = \"#4271AE\", colour = \"#1F3552\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Density plot of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,6,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"June\", \"July\")))\n\np8 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, colour = Month.f)) +\n  geom_density(position = \"identity\", size = 1) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 200, 25), limits = c(0, 200)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_colour_brewer(palette = \"Accent\") +\n  labs(colour = \"Month \") +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 31 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#function-그래프",
    "href": "ggplot2.html#function-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "funcShaded &lt;- function(x) {\n  y &lt;- dnorm(x, mean = 0.2, sd = 0.1)\n  y[x &lt; 0.2 | x &gt; (0.2 + 4 * 0.1)] &lt;- NA\n  return(y)\n}\n\np9 &lt;- ggplot(tibble(x = c(0, 1)), aes(x = x)) +\n  stat_function(fun = dnorm, args = list(0.2, 0.1),\n                aes(colour = \"Group 1 \"), size = 1.5) +\n  stat_function(fun = dnorm, args = list(0.7, 0.05),\n                aes(colour = \"Group 2 \"), size = 1.5) +\n  stat_function(fun = funcShaded, geom = \"area\", fill = \"#84CA72\", alpha = 0.2) +\n  scale_x_continuous(name = \"Probability\", breaks = seq(0, 1, 0.2), limits = c(0, 1)) +\n  scale_y_continuous(name = \"Frequency\") +\n  labs(title = \"Normal function curves of probabilities\") +\n  labs(colour = \"Groups \") +\n  scale_colour_brewer(palette = \"Accent\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np9\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#박스-플롯boxplot",
    "href": "ggplot2.html#박스-플롯boxplot",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\nfill &lt;- \"#4271AE\"; lines &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\np10 &lt;- ggplot(airquality, aes(x = Month, y = Ozone)) +\n  geom_boxplot(colour = lines, fill = fill, size = 1, notch = TRUE) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", size = .5),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"),\n    axis.title = element_text(face = \"bold\"),\n    axis.text.x = element_text(colour = \"black\", size = 11),\n    axis.text.y = element_text(colour = \"black\", size = 9))\np10\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nNotch went outside hinges\nℹ Do you want `notch = FALSE`?\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\nfill &lt;- \"#4271AE\"; line &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(\"Jul\", \"Aug\", \"Sep\")) %&gt;%\n  mutate(Temp.f = factor(ifelse(Temp &gt; mean(Temp), 1, 0),\n                         labels = c(\"Low temp \", \"High temp \")))\n\np10 &lt;- ggplot(airquality_trimmed, aes(x = Month, y = Ozone)) +\n  geom_boxplot(fill = fill, colour = line, alpha = 0.7) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 50), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"),\n        axis.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(size = 11)) +\n  facet_grid(. ~ Temp.f)\np10  \n\nWarning: Removed 11 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "tidyverse.html",
    "href": "tidyverse.html",
    "title": "tidyverse",
    "section": "",
    "text": "R에서 데이터 분석에 유용한 패키지들을 모아놓은 라이브러리입니다. tidyverse 내부에 포함된 패키지들은 데이터를 다루는데 있어서 편리한 기능을 제공합니다.\n\nggplot2는 데이터 시각화에 사용\ndplyr는 데이터 전처리에 사용\nreadr는 데이터를 가져오는데 사용\ntibble: modern data frames\nstringr는 문자열 처리에 사용\nforcats는 factor 데이터를 처리하는데 사용\ntidyr는 데이터를 다루기 위해서 사용\npurrr는 데이터를 다루는 함수를 제공\n\n\n\n\ncsv는 read_csv를 사용\n::은 패키지 내 함수를 사용할 때 사용\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nmoving_data &lt;- read_csv(\"./data/seoul_moving_202107_09_hr.csv\")\n\nRows: 1263554 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): 요일, 도착시간, 성별, 나이, 이동유형, 이동인구(합)\ndbl (4): 대상연월, 출발 시군구 코드, 도착 시군구 코드, 평균 이동 시간(분)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nreference_data &lt;- readxl::read_excel(\"./data/reference.xlsx\")\n\nmoving_data %&gt;% dim()\n\n[1] 1263554      10\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nmoving_data %&gt;% head()\n\n# A tibble: 6 × 10\n  대상연월 요일  도착시간 `출발 시군구 코드` `도착 시군구 코드` 성별  나이 \n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1   202107 일    09                    11010              11010 F     00   \n2   202107 일    09                    11010              11010 F     10   \n3   202107 일    09                    11010              11010 F     10   \n4   202107 일    09                    11010              11010 F     10   \n5   202107 일    09                    11010              11010 F     10   \n6   202107 일    09                    11010              11010 F     15   \n# ℹ 3 more variables: 이동유형 &lt;chr&gt;, `평균 이동 시간(분)` &lt;dbl&gt;,\n#   `이동인구(합)` &lt;chr&gt;\n\nmoving_data %&gt;% names() \n\n [1] \"대상연월\"           \"요일\"               \"도착시간\"          \n [4] \"출발 시군구 코드\"   \"도착 시군구 코드\"   \"성별\"              \n [7] \"나이\"               \"이동유형\"           \"평균 이동 시간(분)\"\n[10] \"이동인구(합)\"      \n\nmoving_data %&gt;% glimpse()\n\nRows: 1,263,554\nColumns: 10\n$ 대상연월             &lt;dbl&gt; 202107, 202107, 202107, 202107, 202107, 202107, 2…\n$ 요일                 &lt;chr&gt; \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"…\n$ 도착시간             &lt;chr&gt; \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"…\n$ `출발 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ `도착 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ 성별                 &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\",…\n$ 나이                 &lt;chr&gt; \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"…\n$ 이동유형             &lt;chr&gt; \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", \"EE\", \"…\n$ `평균 이동 시간(분)` &lt;dbl&gt; 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30, 60, 1…\n$ `이동인구(합)`       &lt;chr&gt; \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"6.05\", …\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% glimpse()\n\nRows: 91\nColumns: 4\n$ 시도        &lt;dbl&gt; 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11…\n$ 시군구      &lt;dbl&gt; 11010, 11020, 11030, 11040, 11050, 11060, 11070, 11080, 11…\n$ name        &lt;chr&gt; \"종로구\", \"중구\", \"용산구\", \"성동구\", \"광진구\", \"동대문구\"…\n$ `full name` &lt;chr&gt; \"서울특별시 종로구\", \"서울특별시 중구\", \"서울특별시 용산구…\n\nreference_data &lt;- janitor::clean_names(reference_data)\nreference_data %&gt;% names()\n\n[1] \"sido\"      \"sigungu\"   \"name\"      \"full_name\"\n\nmoving_data &lt;- janitor::clean_names(moving_data)\nmoving_data %&gt;% names()\n\n [1] \"daesang_yeon_wol\"            \"yoil\"                       \n [3] \"dochagsigan\"                 \"chulbal_sigungu_kodeu\"      \n [5] \"dochag_sigungu_kodeu\"        \"seongbyeol\"                 \n [7] \"nai\"                         \"idong_yuhyeong\"             \n [9] \"pyeong_gyun_idong_sigan_bun\" \"idong_ingu_hab\""
  },
  {
    "objectID": "tidyverse.html#데이터-불러오기",
    "href": "tidyverse.html#데이터-불러오기",
    "title": "tidyverse",
    "section": "",
    "text": "csv는 read_csv를 사용\n::은 패키지 내 함수를 사용할 때 사용\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nmoving_data &lt;- read_csv(\"./data/seoul_moving_202107_09_hr.csv\")\n\nRows: 1263554 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): 요일, 도착시간, 성별, 나이, 이동유형, 이동인구(합)\ndbl (4): 대상연월, 출발 시군구 코드, 도착 시군구 코드, 평균 이동 시간(분)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nreference_data &lt;- readxl::read_excel(\"./data/reference.xlsx\")\n\nmoving_data %&gt;% dim()\n\n[1] 1263554      10\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nmoving_data %&gt;% head()\n\n# A tibble: 6 × 10\n  대상연월 요일  도착시간 `출발 시군구 코드` `도착 시군구 코드` 성별  나이 \n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1   202107 일    09                    11010              11010 F     00   \n2   202107 일    09                    11010              11010 F     10   \n3   202107 일    09                    11010              11010 F     10   \n4   202107 일    09                    11010              11010 F     10   \n5   202107 일    09                    11010              11010 F     10   \n6   202107 일    09                    11010              11010 F     15   \n# ℹ 3 more variables: 이동유형 &lt;chr&gt;, `평균 이동 시간(분)` &lt;dbl&gt;,\n#   `이동인구(합)` &lt;chr&gt;\n\nmoving_data %&gt;% names() \n\n [1] \"대상연월\"           \"요일\"               \"도착시간\"          \n [4] \"출발 시군구 코드\"   \"도착 시군구 코드\"   \"성별\"              \n [7] \"나이\"               \"이동유형\"           \"평균 이동 시간(분)\"\n[10] \"이동인구(합)\"      \n\nmoving_data %&gt;% glimpse()\n\nRows: 1,263,554\nColumns: 10\n$ 대상연월             &lt;dbl&gt; 202107, 202107, 202107, 202107, 202107, 202107, 2…\n$ 요일                 &lt;chr&gt; \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"…\n$ 도착시간             &lt;chr&gt; \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"…\n$ `출발 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ `도착 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ 성별                 &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\",…\n$ 나이                 &lt;chr&gt; \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"…\n$ 이동유형             &lt;chr&gt; \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", \"EE\", \"…\n$ `평균 이동 시간(분)` &lt;dbl&gt; 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30, 60, 1…\n$ `이동인구(합)`       &lt;chr&gt; \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"6.05\", …\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% glimpse()\n\nRows: 91\nColumns: 4\n$ 시도        &lt;dbl&gt; 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11…\n$ 시군구      &lt;dbl&gt; 11010, 11020, 11030, 11040, 11050, 11060, 11070, 11080, 11…\n$ name        &lt;chr&gt; \"종로구\", \"중구\", \"용산구\", \"성동구\", \"광진구\", \"동대문구\"…\n$ `full name` &lt;chr&gt; \"서울특별시 종로구\", \"서울특별시 중구\", \"서울특별시 용산구…\n\nreference_data &lt;- janitor::clean_names(reference_data)\nreference_data %&gt;% names()\n\n[1] \"sido\"      \"sigungu\"   \"name\"      \"full_name\"\n\nmoving_data &lt;- janitor::clean_names(moving_data)\nmoving_data %&gt;% names()\n\n [1] \"daesang_yeon_wol\"            \"yoil\"                       \n [3] \"dochagsigan\"                 \"chulbal_sigungu_kodeu\"      \n [5] \"dochag_sigungu_kodeu\"        \"seongbyeol\"                 \n [7] \"nai\"                         \"idong_yuhyeong\"             \n [9] \"pyeong_gyun_idong_sigan_bun\" \"idong_ingu_hab\""
  },
  {
    "objectID": "tidyr.html",
    "href": "tidyr.html",
    "title": "Tidyverse",
    "section": "",
    "text": "R에서 데이터 분석에 유용한 패키지들을 모아놓은 라이브러리입니다. tidyverse 내부에 포함된 패키지들은 데이터를 다루는데 있어서 편리한 기능을 제공합니다.\n\nggplot2는 데이터 시각화에 사용\ndplyr는 데이터 전처리에 사용\nreadr는 데이터를 가져오는데 사용\ntibble: modern data frames\nstringr는 문자열 처리에 사용\nforcats는 factor 데이터를 처리하는데 사용\ntidyr는 데이터를 다루기 위해서 사용\npurrr는 데이터를 다루는 함수를 제공\n\n\n\n\ncsv는 read_csv를 사용\n::은 패키지 내 함수를 사용할 때 사용\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nmoving_data &lt;- read_csv(\"./data/seoul_moving_202107_09_hr.csv\")\n\nRows: 1263554 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): 요일, 도착시간, 성별, 나이, 이동유형, 이동인구(합)\ndbl (4): 대상연월, 출발 시군구 코드, 도착 시군구 코드, 평균 이동 시간(분)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nreference_data &lt;- readxl::read_excel(\"./data/reference.xlsx\")\n\nmoving_data %&gt;% dim()\n\n[1] 1263554      10\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nmoving_data %&gt;% head()\n\n# A tibble: 6 × 10\n  대상연월 요일  도착시간 `출발 시군구 코드` `도착 시군구 코드` 성별  나이 \n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1   202107 일    09                    11010              11010 F     00   \n2   202107 일    09                    11010              11010 F     10   \n3   202107 일    09                    11010              11010 F     10   \n4   202107 일    09                    11010              11010 F     10   \n5   202107 일    09                    11010              11010 F     10   \n6   202107 일    09                    11010              11010 F     15   \n# ℹ 3 more variables: 이동유형 &lt;chr&gt;, `평균 이동 시간(분)` &lt;dbl&gt;,\n#   `이동인구(합)` &lt;chr&gt;\n\nmoving_data %&gt;% names() \n\n [1] \"대상연월\"           \"요일\"               \"도착시간\"          \n [4] \"출발 시군구 코드\"   \"도착 시군구 코드\"   \"성별\"              \n [7] \"나이\"               \"이동유형\"           \"평균 이동 시간(분)\"\n[10] \"이동인구(합)\"      \n\nmoving_data %&gt;% glimpse()\n\nRows: 1,263,554\nColumns: 10\n$ 대상연월             &lt;dbl&gt; 202107, 202107, 202107, 202107, 202107, 202107, 2…\n$ 요일                 &lt;chr&gt; \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"…\n$ 도착시간             &lt;chr&gt; \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"…\n$ `출발 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ `도착 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ 성별                 &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\",…\n$ 나이                 &lt;chr&gt; \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"…\n$ 이동유형             &lt;chr&gt; \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", \"EE\", \"…\n$ `평균 이동 시간(분)` &lt;dbl&gt; 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30, 60, 1…\n$ `이동인구(합)`       &lt;chr&gt; \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"6.05\", …\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% glimpse()\n\nRows: 91\nColumns: 4\n$ 시도        &lt;dbl&gt; 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11…\n$ 시군구      &lt;dbl&gt; 11010, 11020, 11030, 11040, 11050, 11060, 11070, 11080, 11…\n$ name        &lt;chr&gt; \"종로구\", \"중구\", \"용산구\", \"성동구\", \"광진구\", \"동대문구\"…\n$ `full name` &lt;chr&gt; \"서울특별시 종로구\", \"서울특별시 중구\", \"서울특별시 용산구…\n\nreference_data &lt;- janitor::clean_names(reference_data)\nreference_data %&gt;% names()\n\n[1] \"sido\"      \"sigungu\"   \"name\"      \"full_name\"\n\nmoving_data &lt;- janitor::clean_names(moving_data)\nmoving_data %&gt;% names()\n\n [1] \"daesang_yeon_wol\"            \"yoil\"                       \n [3] \"dochagsigan\"                 \"chulbal_sigungu_kodeu\"      \n [5] \"dochag_sigungu_kodeu\"        \"seongbyeol\"                 \n [7] \"nai\"                         \"idong_yuhyeong\"             \n [9] \"pyeong_gyun_idong_sigan_bun\" \"idong_ingu_hab\"",
    "crumbs": [
      "Home",
      "R 분석 기초",
      "Tidyverse"
    ]
  },
  {
    "objectID": "tidyr.html#데이터-불러오기",
    "href": "tidyr.html#데이터-불러오기",
    "title": "Tidyverse",
    "section": "",
    "text": "csv는 read_csv를 사용\n::은 패키지 내 함수를 사용할 때 사용\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nmoving_data &lt;- read_csv(\"./data/seoul_moving_202107_09_hr.csv\")\n\nRows: 1263554 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): 요일, 도착시간, 성별, 나이, 이동유형, 이동인구(합)\ndbl (4): 대상연월, 출발 시군구 코드, 도착 시군구 코드, 평균 이동 시간(분)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nreference_data &lt;- readxl::read_excel(\"./data/reference.xlsx\")\n\nmoving_data %&gt;% dim()\n\n[1] 1263554      10\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nmoving_data %&gt;% head()\n\n# A tibble: 6 × 10\n  대상연월 요일  도착시간 `출발 시군구 코드` `도착 시군구 코드` 성별  나이 \n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1   202107 일    09                    11010              11010 F     00   \n2   202107 일    09                    11010              11010 F     10   \n3   202107 일    09                    11010              11010 F     10   \n4   202107 일    09                    11010              11010 F     10   \n5   202107 일    09                    11010              11010 F     10   \n6   202107 일    09                    11010              11010 F     15   \n# ℹ 3 more variables: 이동유형 &lt;chr&gt;, `평균 이동 시간(분)` &lt;dbl&gt;,\n#   `이동인구(합)` &lt;chr&gt;\n\nmoving_data %&gt;% names() \n\n [1] \"대상연월\"           \"요일\"               \"도착시간\"          \n [4] \"출발 시군구 코드\"   \"도착 시군구 코드\"   \"성별\"              \n [7] \"나이\"               \"이동유형\"           \"평균 이동 시간(분)\"\n[10] \"이동인구(합)\"      \n\nmoving_data %&gt;% glimpse()\n\nRows: 1,263,554\nColumns: 10\n$ 대상연월             &lt;dbl&gt; 202107, 202107, 202107, 202107, 202107, 202107, 2…\n$ 요일                 &lt;chr&gt; \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"…\n$ 도착시간             &lt;chr&gt; \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"…\n$ `출발 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ `도착 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ 성별                 &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\",…\n$ 나이                 &lt;chr&gt; \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"…\n$ 이동유형             &lt;chr&gt; \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", \"EE\", \"…\n$ `평균 이동 시간(분)` &lt;dbl&gt; 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30, 60, 1…\n$ `이동인구(합)`       &lt;chr&gt; \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"6.05\", …\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% glimpse()\n\nRows: 91\nColumns: 4\n$ 시도        &lt;dbl&gt; 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11…\n$ 시군구      &lt;dbl&gt; 11010, 11020, 11030, 11040, 11050, 11060, 11070, 11080, 11…\n$ name        &lt;chr&gt; \"종로구\", \"중구\", \"용산구\", \"성동구\", \"광진구\", \"동대문구\"…\n$ `full name` &lt;chr&gt; \"서울특별시 종로구\", \"서울특별시 중구\", \"서울특별시 용산구…\n\nreference_data &lt;- janitor::clean_names(reference_data)\nreference_data %&gt;% names()\n\n[1] \"sido\"      \"sigungu\"   \"name\"      \"full_name\"\n\nmoving_data &lt;- janitor::clean_names(moving_data)\nmoving_data %&gt;% names()\n\n [1] \"daesang_yeon_wol\"            \"yoil\"                       \n [3] \"dochagsigan\"                 \"chulbal_sigungu_kodeu\"      \n [5] \"dochag_sigungu_kodeu\"        \"seongbyeol\"                 \n [7] \"nai\"                         \"idong_yuhyeong\"             \n [9] \"pyeong_gyun_idong_sigan_bun\" \"idong_ingu_hab\"",
    "crumbs": [
      "Home",
      "R 분석 기초",
      "Tidyverse"
    ]
  },
  {
    "objectID": "dplyr.html",
    "href": "dplyr.html",
    "title": "dplyr",
    "section": "",
    "text": "library(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.0\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nmoving_data &lt;- read_csv(\"./data/seoul_moving_202107_09_hr.csv\")\n\nRows: 1263554 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): 요일, 도착시간, 성별, 나이, 이동유형, 이동인구(합)\ndbl (4): 대상연월, 출발 시군구 코드, 도착 시군구 코드, 평균 이동 시간(분)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmoving_data &lt;- janitor::clean_names(moving_data)\nmoving_data %&gt;% names()\n\n [1] \"daesang_yeon_wol\"            \"yoil\"                       \n [3] \"dochagsigan\"                 \"chulbal_sigungu_kodeu\"      \n [5] \"dochag_sigungu_kodeu\"        \"seongbyeol\"                 \n [7] \"nai\"                         \"idong_yuhyeong\"             \n [9] \"pyeong_gyun_idong_sigan_bun\" \"idong_ingu_hab\"             \n\nmoving_data %&gt;% glimpse()\n\nRows: 1,263,554\nColumns: 10\n$ daesang_yeon_wol            &lt;dbl&gt; 202107, 202107, 202107, 202107, 202107, 20…\n$ yoil                        &lt;chr&gt; \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", …\n$ dochagsigan                 &lt;chr&gt; \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", …\n$ chulbal_sigungu_kodeu       &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, …\n$ dochag_sigungu_kodeu        &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, …\n$ seongbyeol                  &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F…\n$ nai                         &lt;chr&gt; \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", …\n$ idong_yuhyeong              &lt;chr&gt; \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", …\n$ pyeong_gyun_idong_sigan_bun &lt;dbl&gt; 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30…\n$ idong_ingu_hab              &lt;chr&gt; \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"…\n\nreference_data &lt;- readxl::read_excel(\"./data/reference.xlsx\")\nreference_data &lt;- janitor::clean_names(reference_data)\nreference_data %&gt;% names()\n\n[1] \"sido\"      \"sigungu\"   \"name\"      \"full_name\"\n\nreference_data %&gt;% glimpse()\n\nRows: 91\nColumns: 4\n$ sido      &lt;dbl&gt; 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 1100…\n$ sigungu   &lt;dbl&gt; 11010, 11020, 11030, 11040, 11050, 11060, 11070, 11080, 1109…\n$ name      &lt;chr&gt; \"종로구\", \"중구\", \"용산구\", \"성동구\", \"광진구\", \"동대문구\", …\n$ full_name &lt;chr&gt; \"서울특별시 종로구\", \"서울특별시 중구\", \"서울특별시 용산구\",…\n\n\n\n\n\n\n\ndistinct()\n\n\nreference_data %&gt;% distinct(sido) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    17\n\nreference_data %&gt;% distinct(sido, .keep_all = TRUE) %&gt;% dim()\n\n[1] 17  4\n\n# Q. moving_data에서 nai를 중복없이 추출하고, 그 개수를 구하세요.\nmoving_data %&gt;% distinct(nai) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    16\n\n\n\nfilter()\n\n\n# Q. 화요일에 30분 이상 이동한 데이터만 추출\nmoving_data %&gt;% filter(yoil == \"화\" & pyeong_gyun_idong_sigan_bun &gt;= 30) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1 91207\n\n# Q. 이동시간이 30분 이상인 데이터 중, 중랑구와 성북구에서 출발할 데이터\nmoving_data %&gt;% filter(pyeong_gyun_idong_sigan_bun &gt;= 30 & (chulbal_sigungu_kodeu  == 11070 | chulbal_sigungu_kodeu == 11080)) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1 26620\n\n# Q. 이동시간이 30분 이상인 데이터 중, 중랑구와 성북구에서 출발하고, 강남구로 도착한 데이터\n\n# Q. 이동시간이 30분 ~ 45분인 데이터만 추출분\nmoving_data %&gt;% filter(between(pyeong_gyun_idong_sigan_bun, 30, 45))\n\n# A tibble: 446,970 × 10\n   daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu dochag_sigungu_kodeu\n              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;                &lt;dbl&gt;\n 1           202107 일    09                          11010                11010\n 2           202107 일    09                          11010                11010\n 3           202107 일    09                          11010                11010\n 4           202107 일    09                          11010                11010\n 5           202107 일    09                          11010                11020\n 6           202107 일    09                          11010                11020\n 7           202107 일    09                          11010                11020\n 8           202107 일    09                          11010                11020\n 9           202107 일    09                          11010                11020\n10           202107 일    09                          11010                11030\n# ℹ 446,960 more rows\n# ℹ 5 more variables: seongbyeol &lt;chr&gt;, nai &lt;chr&gt;, idong_yuhyeong &lt;chr&gt;,\n#   pyeong_gyun_idong_sigan_bun &lt;dbl&gt;, idong_ingu_hab &lt;chr&gt;\n\n\n\nslice()\n\n\nreference_data %&gt;% slice(1:5)\n\n# A tibble: 5 × 4\n   sido sigungu name   full_name        \n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;            \n1 11000   11010 종로구 서울특별시 종로구\n2 11000   11020 중구   서울특별시 중구  \n3 11000   11030 용산구 서울특별시 용산구\n4 11000   11040 성동구 서울특별시 성동구\n5 11000   11050 광진구 서울특별시 광진구\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nreference_data %&gt;% slice(10:n())\n\n# A tibble: 82 × 4\n    sido sigungu name     full_name          \n   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n 1 11000   11100 도봉구   서울특별시 도봉구  \n 2 11000   11110 노원구   서울특별시 노원구  \n 3 11000   11120 은평구   서울특별시 은평구  \n 4 11000   11130 서대문구 서울특별시 서대문구\n 5 11000   11140 마포구   서울특별시 마포구  \n 6 11000   11150 양천구   서울특별시 양천구  \n 7 11000   11160 강서구   서울특별시 강서구  \n 8 11000   11170 구로구   서울특별시 구로구  \n 9 11000   11180 금천구   서울특별시 금천구  \n10 11000   11190 영등포구 서울특별시 영등포구\n# ℹ 72 more rows\n\nreference_data %&gt;% slice_max(sigungu, n = 4)\n\n# A tibble: 4 × 4\n   sido sigungu name           full_name     \n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;         \n1 39000   39000 제주특별자치도 제주특별자치도\n2 38000   38000 경상남도       경상남도      \n3 37000   37000 경상북도       경상북도      \n4 36000   36000 전라남도       전라남도      \n\nmoving_data %&gt;% mutate(nai = as.numeric(nai)) %&gt;% distinct(nai) %&gt;% slice_max(nai, n=5)\n\n# A tibble: 5 × 1\n    nai\n  &lt;dbl&gt;\n1    80\n2    75\n3    70\n4    65\n5    60\n\n\n\n\n\n\narrange()\n\n\nmoving_data %&gt;%\n  select(dochagsigan, pyeong_gyun_idong_sigan_bun) %&gt;%\n  arrange(dochagsigan, desc(pyeong_gyun_idong_sigan_bun ))\n\n# A tibble: 1,263,554 × 2\n   dochagsigan pyeong_gyun_idong_sigan_bun\n   &lt;chr&gt;                             &lt;dbl&gt;\n 1 09                                  670\n 2 09                                  650\n 3 09                                  650\n 4 09                                  640\n 5 09                                  640\n 6 09                                  630\n 7 09                                  630\n 8 09                                  620\n 9 09                                  620\n10 09                                  620\n# ℹ 1,263,544 more rows\n\n\n\nselect()\n\n\nreference_data %&gt;% \n  select(sido, full_name) %&gt;% \n  head()\n\n# A tibble: 6 × 2\n   sido full_name          \n  &lt;dbl&gt; &lt;chr&gt;              \n1 11000 서울특별시 종로구  \n2 11000 서울특별시 중구    \n3 11000 서울특별시 용산구  \n4 11000 서울특별시 성동구  \n5 11000 서울특별시 광진구  \n6 11000 서울특별시 동대문구\n\n\n\nmutate()\n\n\nmoving_data %&gt;% \n  mutate(year = substr(daesang_yeon_wol, 1, 4) %&gt;% as.integer()) %&gt;%\n  select(year, everything())\n\n# A tibble: 1,263,554 × 11\n    year daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu\n   &lt;int&gt;            &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;\n 1  2021           202107 일    09                          11010\n 2  2021           202107 일    09                          11010\n 3  2021           202107 일    09                          11010\n 4  2021           202107 일    09                          11010\n 5  2021           202107 일    09                          11010\n 6  2021           202107 일    09                          11010\n 7  2021           202107 일    09                          11010\n 8  2021           202107 일    09                          11010\n 9  2021           202107 일    09                          11010\n10  2021           202107 일    09                          11010\n# ℹ 1,263,544 more rows\n# ℹ 6 more variables: dochag_sigungu_kodeu &lt;dbl&gt;, seongbyeol &lt;chr&gt;, nai &lt;chr&gt;,\n#   idong_yuhyeong &lt;chr&gt;, pyeong_gyun_idong_sigan_bun &lt;dbl&gt;,\n#   idong_ingu_hab &lt;chr&gt;\n\nreference_data %&gt;% \n  mutate(sido_name = str_split_fixed(full_name, pattern = \" \", 2)[ ,1]) %&gt;% \n  select(sido_name) %&gt;% \n  distinct()\n\n# A tibble: 17 × 1\n   sido_name     \n   &lt;chr&gt;         \n 1 서울특별시    \n 2 부산광역시    \n 3 대구광역시    \n 4 인천광역시    \n 5 광주광역시    \n 6 대전광역시    \n 7 울산광역시    \n 8 세종특별자치시\n 9 경기도        \n10 강원도        \n11 충청북도      \n12 충청남도      \n13 전라북도      \n14 전라남도      \n15 경상북도      \n16 경상남도      \n17 제주특별자치도\n\n\n\nrename()\n\n\nmoving_data %&gt;% \n  rename(year = daesang_yeon_wol) %&gt;% \n  select(year, everything())\n\n# A tibble: 1,263,554 × 10\n     year yoil  dochagsigan chulbal_sigungu_kodeu dochag_sigungu_kodeu\n    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;                &lt;dbl&gt;\n 1 202107 일    09                          11010                11010\n 2 202107 일    09                          11010                11010\n 3 202107 일    09                          11010                11010\n 4 202107 일    09                          11010                11010\n 5 202107 일    09                          11010                11010\n 6 202107 일    09                          11010                11010\n 7 202107 일    09                          11010                11010\n 8 202107 일    09                          11010                11010\n 9 202107 일    09                          11010                11010\n10 202107 일    09                          11010                11010\n# ℹ 1,263,544 more rows\n# ℹ 5 more variables: seongbyeol &lt;chr&gt;, nai &lt;chr&gt;, idong_yuhyeong &lt;chr&gt;,\n#   pyeong_gyun_idong_sigan_bun &lt;dbl&gt;, idong_ingu_hab &lt;chr&gt;\n\n\n\nrelocate()\n\n\nmoving_data %&gt;% \n  relocate(idong_ingu_hab)\n\n# A tibble: 1,263,554 × 10\n   idong_ingu_hab daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu\n   &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;\n 1 55.41                    202107 일    09                          11010\n 2 5.9                      202107 일    09                          11010\n 3 41.5                     202107 일    09                          11010\n 4 11.98                    202107 일    09                          11010\n 5 5.93                     202107 일    09                          11010\n 6 6.05                     202107 일    09                          11010\n 7 4.04                     202107 일    09                          11010\n 8 20.39                    202107 일    09                          11010\n 9 76.78                    202107 일    09                          11010\n10 48.43                    202107 일    09                          11010\n# ℹ 1,263,544 more rows\n# ℹ 5 more variables: dochag_sigungu_kodeu &lt;dbl&gt;, seongbyeol &lt;chr&gt;, nai &lt;chr&gt;,\n#   idong_yuhyeong &lt;chr&gt;, pyeong_gyun_idong_sigan_bun &lt;dbl&gt;"
  },
  {
    "objectID": "dplyr.html#single-table-동사",
    "href": "dplyr.html#single-table-동사",
    "title": "dplyr",
    "section": "",
    "text": "distinct()\n\n\nreference_data %&gt;% distinct(sido) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    17\n\nreference_data %&gt;% distinct(sido, .keep_all = TRUE) %&gt;% dim()\n\n[1] 17  4\n\n# Q. moving_data에서 nai를 중복없이 추출하고, 그 개수를 구하세요.\nmoving_data %&gt;% distinct(nai) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    16\n\n\n\nfilter()\n\n\n# Q. 화요일에 30분 이상 이동한 데이터만 추출\nmoving_data %&gt;% filter(yoil == \"화\" & pyeong_gyun_idong_sigan_bun &gt;= 30) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1 91207\n\n# Q. 이동시간이 30분 이상인 데이터 중, 중랑구와 성북구에서 출발할 데이터\nmoving_data %&gt;% filter(pyeong_gyun_idong_sigan_bun &gt;= 30 & (chulbal_sigungu_kodeu  == 11070 | chulbal_sigungu_kodeu == 11080)) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1 26620\n\n# Q. 이동시간이 30분 이상인 데이터 중, 중랑구와 성북구에서 출발하고, 강남구로 도착한 데이터\n\n# Q. 이동시간이 30분 ~ 45분인 데이터만 추출분\nmoving_data %&gt;% filter(between(pyeong_gyun_idong_sigan_bun, 30, 45))\n\n# A tibble: 446,970 × 10\n   daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu dochag_sigungu_kodeu\n              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;                &lt;dbl&gt;\n 1           202107 일    09                          11010                11010\n 2           202107 일    09                          11010                11010\n 3           202107 일    09                          11010                11010\n 4           202107 일    09                          11010                11010\n 5           202107 일    09                          11010                11020\n 6           202107 일    09                          11010                11020\n 7           202107 일    09                          11010                11020\n 8           202107 일    09                          11010                11020\n 9           202107 일    09                          11010                11020\n10           202107 일    09                          11010                11030\n# ℹ 446,960 more rows\n# ℹ 5 more variables: seongbyeol &lt;chr&gt;, nai &lt;chr&gt;, idong_yuhyeong &lt;chr&gt;,\n#   pyeong_gyun_idong_sigan_bun &lt;dbl&gt;, idong_ingu_hab &lt;chr&gt;\n\n\n\nslice()\n\n\nreference_data %&gt;% slice(1:5)\n\n# A tibble: 5 × 4\n   sido sigungu name   full_name        \n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;            \n1 11000   11010 종로구 서울특별시 종로구\n2 11000   11020 중구   서울특별시 중구  \n3 11000   11030 용산구 서울특별시 용산구\n4 11000   11040 성동구 서울특별시 성동구\n5 11000   11050 광진구 서울특별시 광진구\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nreference_data %&gt;% slice(10:n())\n\n# A tibble: 82 × 4\n    sido sigungu name     full_name          \n   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n 1 11000   11100 도봉구   서울특별시 도봉구  \n 2 11000   11110 노원구   서울특별시 노원구  \n 3 11000   11120 은평구   서울특별시 은평구  \n 4 11000   11130 서대문구 서울특별시 서대문구\n 5 11000   11140 마포구   서울특별시 마포구  \n 6 11000   11150 양천구   서울특별시 양천구  \n 7 11000   11160 강서구   서울특별시 강서구  \n 8 11000   11170 구로구   서울특별시 구로구  \n 9 11000   11180 금천구   서울특별시 금천구  \n10 11000   11190 영등포구 서울특별시 영등포구\n# ℹ 72 more rows\n\nreference_data %&gt;% slice_max(sigungu, n = 4)\n\n# A tibble: 4 × 4\n   sido sigungu name           full_name     \n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;         \n1 39000   39000 제주특별자치도 제주특별자치도\n2 38000   38000 경상남도       경상남도      \n3 37000   37000 경상북도       경상북도      \n4 36000   36000 전라남도       전라남도      \n\nmoving_data %&gt;% mutate(nai = as.numeric(nai)) %&gt;% distinct(nai) %&gt;% slice_max(nai, n=5)\n\n# A tibble: 5 × 1\n    nai\n  &lt;dbl&gt;\n1    80\n2    75\n3    70\n4    65\n5    60\n\n\n\n\n\n\narrange()\n\n\nmoving_data %&gt;%\n  select(dochagsigan, pyeong_gyun_idong_sigan_bun) %&gt;%\n  arrange(dochagsigan, desc(pyeong_gyun_idong_sigan_bun ))\n\n# A tibble: 1,263,554 × 2\n   dochagsigan pyeong_gyun_idong_sigan_bun\n   &lt;chr&gt;                             &lt;dbl&gt;\n 1 09                                  670\n 2 09                                  650\n 3 09                                  650\n 4 09                                  640\n 5 09                                  640\n 6 09                                  630\n 7 09                                  630\n 8 09                                  620\n 9 09                                  620\n10 09                                  620\n# ℹ 1,263,544 more rows\n\n\n\nselect()\n\n\nreference_data %&gt;% \n  select(sido, full_name) %&gt;% \n  head()\n\n# A tibble: 6 × 2\n   sido full_name          \n  &lt;dbl&gt; &lt;chr&gt;              \n1 11000 서울특별시 종로구  \n2 11000 서울특별시 중구    \n3 11000 서울특별시 용산구  \n4 11000 서울특별시 성동구  \n5 11000 서울특별시 광진구  \n6 11000 서울특별시 동대문구\n\n\n\nmutate()\n\n\nmoving_data %&gt;% \n  mutate(year = substr(daesang_yeon_wol, 1, 4) %&gt;% as.integer()) %&gt;%\n  select(year, everything())\n\n# A tibble: 1,263,554 × 11\n    year daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu\n   &lt;int&gt;            &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;\n 1  2021           202107 일    09                          11010\n 2  2021           202107 일    09                          11010\n 3  2021           202107 일    09                          11010\n 4  2021           202107 일    09                          11010\n 5  2021           202107 일    09                          11010\n 6  2021           202107 일    09                          11010\n 7  2021           202107 일    09                          11010\n 8  2021           202107 일    09                          11010\n 9  2021           202107 일    09                          11010\n10  2021           202107 일    09                          11010\n# ℹ 1,263,544 more rows\n# ℹ 6 more variables: dochag_sigungu_kodeu &lt;dbl&gt;, seongbyeol &lt;chr&gt;, nai &lt;chr&gt;,\n#   idong_yuhyeong &lt;chr&gt;, pyeong_gyun_idong_sigan_bun &lt;dbl&gt;,\n#   idong_ingu_hab &lt;chr&gt;\n\nreference_data %&gt;% \n  mutate(sido_name = str_split_fixed(full_name, pattern = \" \", 2)[ ,1]) %&gt;% \n  select(sido_name) %&gt;% \n  distinct()\n\n# A tibble: 17 × 1\n   sido_name     \n   &lt;chr&gt;         \n 1 서울특별시    \n 2 부산광역시    \n 3 대구광역시    \n 4 인천광역시    \n 5 광주광역시    \n 6 대전광역시    \n 7 울산광역시    \n 8 세종특별자치시\n 9 경기도        \n10 강원도        \n11 충청북도      \n12 충청남도      \n13 전라북도      \n14 전라남도      \n15 경상북도      \n16 경상남도      \n17 제주특별자치도\n\n\n\nrename()\n\n\nmoving_data %&gt;% \n  rename(year = daesang_yeon_wol) %&gt;% \n  select(year, everything())\n\n# A tibble: 1,263,554 × 10\n     year yoil  dochagsigan chulbal_sigungu_kodeu dochag_sigungu_kodeu\n    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;                &lt;dbl&gt;\n 1 202107 일    09                          11010                11010\n 2 202107 일    09                          11010                11010\n 3 202107 일    09                          11010                11010\n 4 202107 일    09                          11010                11010\n 5 202107 일    09                          11010                11010\n 6 202107 일    09                          11010                11010\n 7 202107 일    09                          11010                11010\n 8 202107 일    09                          11010                11010\n 9 202107 일    09                          11010                11010\n10 202107 일    09                          11010                11010\n# ℹ 1,263,544 more rows\n# ℹ 5 more variables: seongbyeol &lt;chr&gt;, nai &lt;chr&gt;, idong_yuhyeong &lt;chr&gt;,\n#   pyeong_gyun_idong_sigan_bun &lt;dbl&gt;, idong_ingu_hab &lt;chr&gt;\n\n\n\nrelocate()\n\n\nmoving_data %&gt;% \n  relocate(idong_ingu_hab)\n\n# A tibble: 1,263,554 × 10\n   idong_ingu_hab daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu\n   &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;\n 1 55.41                    202107 일    09                          11010\n 2 5.9                      202107 일    09                          11010\n 3 41.5                     202107 일    09                          11010\n 4 11.98                    202107 일    09                          11010\n 5 5.93                     202107 일    09                          11010\n 6 6.05                     202107 일    09                          11010\n 7 4.04                     202107 일    09                          11010\n 8 20.39                    202107 일    09                          11010\n 9 76.78                    202107 일    09                          11010\n10 48.43                    202107 일    09                          11010\n# ℹ 1,263,544 more rows\n# ℹ 5 more variables: dochag_sigungu_kodeu &lt;dbl&gt;, seongbyeol &lt;chr&gt;, nai &lt;chr&gt;,\n#   idong_yuhyeong &lt;chr&gt;, pyeong_gyun_idong_sigan_bun &lt;dbl&gt;"
  },
  {
    "objectID": "r4ds_2nd.html",
    "href": "r4ds_2nd.html",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(ggthemes)\n\n\n\n\nOur ultimate goal in this chapter is to recreate the following visualization displaying the relationship between flipper lengths and body masses of these penguins, taking into consideration the species of the penguin.\n\n\n용어정의(variable, value, Tabular data)\n\n변수, 값, 표 데이터에 대해서 정의합니다. 데이터 분석의 경우 교재가 통계학에서 영향을 받은 경우 ‘독립/종속’ 등과 같은 용어를 쓰기 때문에 가능하면 교재에서 제시한 용어의 의미를 명확하게 이해하는 것이 우선입니다.\n\n\n\nTo make the discussion easier, let’s define some terms: A variable is a quantity, quality, or property that you can measure. A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. An observation is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. We’ll sometimes refer to an observation as a data point. Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row.\n\n\npenguins %&gt;% glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\npenguins의 데이테는 데이터프레임이 아니라 tibble 입니다. 데이터프레임과 tibble의 차이점은 이 곳을 참고하세요.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nggplot2를 사용해서 해당 데이터를 시각화해보도록 하겠습니다.\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\npipe operator를 사용해서 코드를 작성하였습니다. pipe operator는 %&gt;% 입니다. pipe operator를 사용하면 코드의 가독성이 좋아지기 때문에 사용하는 것이 좋습니다.\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, colour = species)) +\n  geom_density()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(aes(colour = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"loess\", na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (musthaver?)의 경우 3장, 4장을 참고하세요. (forallr?)의 경우 2장, 3장을 참고하세요.\n\n\n\n\n\n\n\n실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(musthaver?)의 경우 5장, 6장을 참고하세요. (forallr?)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(musthaver?)의 경우 7장, 8장을 참고하세요. (forallr?)의 경우 4장을 참고하세요."
  },
  {
    "objectID": "r4ds_2nd.html#appendix",
    "href": "r4ds_2nd.html#appendix",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (musthaver?)의 경우 3장, 4장을 참고하세요. (forallr?)의 경우 2장, 3장을 참고하세요."
  },
  {
    "objectID": "r4ds_2nd.html#제어와-함수",
    "href": "r4ds_2nd.html#제어와-함수",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(musthaver?)의 경우 5장, 6장을 참고하세요. (forallr?)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(musthaver?)의 경우 7장, 8장을 참고하세요. (forallr?)의 경우 4장을 참고하세요."
  },
  {
    "objectID": "r4ds_2nd.html#whole-game",
    "href": "r4ds_2nd.html#whole-game",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "Our ultimate goal in this chapter is to recreate the following visualization displaying the relationship between flipper lengths and body masses of these penguins, taking into consideration the species of the penguin.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(ggthemes)\n\n\n용어정의(variable, value, Tabular data)\n\n변수, 값, 표 데이터에 대해서 정의합니다. 데이터 분석의 경우 교재가 통계학에서 영향을 받은 경우 ‘독립/종속’ 등과 같은 용어를 쓰기 때문에 가능하면 교재에서 제시한 용어의 의미를 명확하게 이해하는 것이 우선입니다.\n\n\n\nTo make the discussion easier, let’s define some terms: A variable is a quantity, quality, or property that you can measure. A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. An observation is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. We’ll sometimes refer to an observation as a data point. Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row.\n\n\npenguins %&gt;% glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…",
    "crumbs": [
      "Home",
      "R 기초",
      "`R4DS 2nd`에서 배운 것"
    ]
  },
  {
    "objectID": "r4ds_2nd.html#data-visualization",
    "href": "r4ds_2nd.html#data-visualization",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "Our ultimate goal in this chapter is to recreate the following visualization displaying the relationship between flipper lengths and body masses of these penguins, taking into consideration the species of the penguin.\n\n\n용어정의(variable, value, Tabular data)\n\n변수, 값, 표 데이터에 대해서 정의합니다. 데이터 분석의 경우 교재가 통계학에서 영향을 받은 경우 ‘독립/종속’ 등과 같은 용어를 쓰기 때문에 가능하면 교재에서 제시한 용어의 의미를 명확하게 이해하는 것이 우선입니다.\n\n\n\nTo make the discussion easier, let’s define some terms: A variable is a quantity, quality, or property that you can measure. A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. An observation is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. We’ll sometimes refer to an observation as a data point. Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row.\n\n\npenguins %&gt;% glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\npenguins의 데이테는 데이터프레임이 아니라 tibble 입니다. 데이터프레임과 tibble의 차이점은 이 곳을 참고하세요.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nggplot2를 사용해서 해당 데이터를 시각화해보도록 하겠습니다.\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\npipe operator를 사용해서 코드를 작성하였습니다. pipe operator는 %&gt;% 입니다. pipe operator를 사용하면 코드의 가독성이 좋아지기 때문에 사용하는 것이 좋습니다.\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, colour = species)) +\n  geom_density()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(aes(colour = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"loess\", na.rm = TRUE)"
  },
  {
    "objectID": "r4ds_2nd_01.html",
    "href": "r4ds_2nd_01.html",
    "title": "Data visualization",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(ggthemes)",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#data-visualization",
    "href": "r4ds_2nd_01.html#data-visualization",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "Our ultimate goal in this chapter is to recreate the following visualization displaying the relationship between flipper lengths and body masses of these penguins, taking into consideration the species of the penguin.\n\n\n용어정의(variable, value, Tabular data)\n\n변수, 값, 표 데이터에 대해서 정의합니다. 데이터 분석의 경우 교재가 통계학에서 영향을 받은 경우 ‘독립/종속’ 등과 같은 용어를 쓰기 때문에 가능하면 교재에서 제시한 용어의 의미를 명확하게 이해하는 것이 우선입니다.\n\n\n\nTo make the discussion easier, let’s define some terms: A variable is a quantity, quality, or property that you can measure. A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. An observation is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. We’ll sometimes refer to an observation as a data point. Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row.\n\n\npenguins %&gt;% glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\npenguins의 데이테는 데이터프레임이 아니라 tibble 입니다. 데이터프레임과 tibble의 차이점은 이 곳을 참고하세요.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nggplot2를 사용해서 해당 데이터를 시각화해보도록 하겠습니다.\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\npipe operator를 사용해서 코드를 작성하였습니다. pipe operator는 %&gt;% 입니다. pipe operator를 사용하면 코드의 가독성이 좋아지기 때문에 사용하는 것이 좋습니다.\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, colour = species)) +\n  geom_density()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(aes(colour = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"loess\", na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% \n  ggplot(aes(y = species))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% ggplot(aes(x = species)) +\n  geom_bar(fill = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;% \n  ggplot(aes(x = carat)) +\n  geom_histogram(binwidth = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% ggplot(mapping = aes(\n  x = bill_length_mm, y = bill_depth_mm, \n  color = species, shape = species\n  )) +\n  geom_point(na.rm = TRUE) +\n  labs(color = \"Species\", shape = \"Species\")\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% ggplot(aes(x = island, fill = species)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\npenguins %&gt;% ggplot(aes(x = species, fill = island)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n#|eval : False\nmpg %&gt;% \n  ggplot() +\n  geom_point(aes(x = cty, y = hwy))\n\n\n\n\n\n\n\nggsave(\"mpg-plot.pdf\")\n\nSaving 7 x 5 in image",
    "crumbs": [
      "Home",
      "R4DS",
      "`R4DS 2nd`에서 배운 것"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#appendix",
    "href": "r4ds_2nd_01.html#appendix",
    "title": "Data visualization",
    "section": "Appendix",
    "text": "Appendix\n\n벡터\n\n벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n리스트\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n데이터프레임\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (나성호, 2021)의 경우 3장, 4장을 참고하세요. (오세종, 2023)의 경우 2장, 3장을 참고하세요.\n\n\n제어와 함수\n\n제어문\n\n실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n함수\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#제어와-함수",
    "href": "r4ds_2nd_01.html#제어와-함수",
    "title": "1 Data visualization",
    "section": "제어와 함수",
    "text": "제어와 함수\n\n제어문\n\n실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n함수\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R4DS",
      "1 Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#연습문제-1.2.5",
    "href": "r4ds_2nd_01.html#연습문제-1.2.5",
    "title": "Data visualization",
    "section": "연습문제 1.2.5",
    "text": "연습문제 1.2.5\n\n3\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n4\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n5\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, colour = species)) +\n  geom_density()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\n\n8\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(aes(colour = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"loess\", na.rm = TRUE)",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#연습문제-1.4.3",
    "href": "r4ds_2nd_01.html#연습문제-1.4.3",
    "title": "Data visualization",
    "section": "연습문제 1.4.3",
    "text": "연습문제 1.4.3\n\n1\n\npenguins %&gt;% \n  ggplot(aes(y = species))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n2\n\npenguins %&gt;% \n  ggplot(aes(x = species)) +\n  geom_bar(fill = \"red\")\n\n\n\n\n\n\n\n\n\n\n4\n\ndiamonds %&gt;% \n  ggplot(aes(x = carat)) +\n  geom_histogram(binwidth = 0.5)",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#연습문제-1.5.5",
    "href": "r4ds_2nd_01.html#연습문제-1.5.5",
    "title": "Data visualization",
    "section": "연습문제 1.5.5",
    "text": "연습문제 1.5.5\n\n6\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = bill_length_mm, y = bill_depth_mm, \n                       color = species, shape = species)) +\n  geom_point(na.rm = TRUE) +\n  labs(color = \"Species\", shape = \"Species\")\n\n\n\n\n\n\n\n\n\n\n7\n\npenguins %&gt;% ggplot(aes(x = island, fill = species)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\npenguins %&gt;% ggplot(aes(x = species, fill = island)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n\n\n\n연습문제 1.6.1\n\nmpg %&gt;% \n  ggplot() +\n  geom_point(aes(x = cty, y = hwy))\n\n\n\n\n\n\n\n# ggsave(\"mpg-plot.pdf\")",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#r을-활용한-시각화-기초",
    "href": "r4ds_2nd_01.html#r을-활용한-시각화-기초",
    "title": "Data visualization",
    "section": "R을 활용한 시각화 기초",
    "text": "R을 활용한 시각화 기초\n\n정리1. 용어\n\nvariable, value, Tabular data(변수, 값, 표 데이터)에 대해서 정의\n데이터 분석의 경우 교재가 통계학에서 영향을 받은 경우 ‘독립/종속’ 등과 같은 용어를 쓰기 때문에 가능하면 교재에서 제시한 용어의 의미를 명확하게 이해하는 것이 우선\n\n\nTo make the discussion easier, let’s define some terms: A variable is a quantity, quality, or property that you can measure. A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. An observation is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. We’ll sometimes refer to an observation as a data point. Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row.\n\n\npenguins %&gt;% glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n정리2. 데이터 자료형\n\npenguins의 데이테는 데이터프레임이 아니라 tibble 임\n데이터프레임과 tibble의 차이점은 이 곳을 참고\n\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n정리3. 간단한 시각화\n\n‘산점도, 막대, 선’ 그리고 ‘박스플롯’\nggplot2를 사용해서 해당 데이터를 시각화\n\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n정리4. pipe operator\n\n%&gt;% / |&gt;를 사용해서 코드를 작성하고 있으며, pipe operator는 %&gt;%임\npipe operator를 사용하면 코드의 가독성이 좋아지기 때문에 사용하는 것이 좋음\n\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n정리5. 변수 유형에 따른 그래프 선택\n\n변수 유형에 따라서 적절한 그래프를 사용\n범주형 변수의 경우 막대그래프를 사용하고, 연속형 변수의 경우 산점도를 사용하는 것이 일반적\n변수의 개수에 따라 변수가 1개인 경우 히스토그램을 사용하고, 2개인 경우 산점도를 사용하는 것이 일반적(Midway (2020), Kelleher & Wagener (2011), Islam & Jin (2019) 등도 함께 참고)",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  }
]