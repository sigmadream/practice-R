[
  {
    "objectID": "notes/r4ds_2nd.html",
    "href": "notes/r4ds_2nd.html",
    "title": "R for Data Science (2e)",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.\nlibrary(ggplot2)\nlibrary(ggthemes) \nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(nycflights13)",
    "crumbs": [
      "Home",
      "R",
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "notes/r4ds_2nd.html#data-visualization",
    "href": "notes/r4ds_2nd.html#data-visualization",
    "title": "R for Data Science (2e)",
    "section": "1. Data visualization",
    "text": "1. Data visualization\n\n1.2 First steps\n\n1.2.1 The penguins data frame\n\npenguins contains 344 observations collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER2.\n\n\nTo make the discussion easier, let’s define some terms: A variable is a quantity, quality, or property that you can measure. A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. An observation is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. We’ll sometimes refer to an observation as a data point. Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row.\n\n\n\n1.2.2 Ultimate goal\n\nOur ultimate goal in this chapter is to recreate the following visualization displaying the relationship between flipper lengths and body masses of these penguins, taking into consideration the species of the penguin.\n\n\n\n1.2.4 Adding aesthetics and layers\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n    color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n1.2.5(연습문제)\n\n3\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n4\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n5\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, colour = species)) +\n  geom_density()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\n8\n\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(aes(colour = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"loess\", na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n1.3 ggplot2 calls\n\nIn the future, you’ll also learn about the pipe, |&gt;, which will allow you to create that plot with.\n\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n1.4 Visualizing distributions\n\nHow you visualize the distribution of a variable depends on the type of variable: categorical or numerical.\n\n\n변수의 개수에 따라 변수가 1개인 경우 히스토그램을 사용하고, 2개인 경우 산점도를 사용하는 것이 일반적(Midway (2020), Kelleher & Wagener (2011), Islam & Jin (2019) 등도 함께 참고)\n\n\n1.4.1 A categorical variable\n\nA variable is categorical if it can only take one of a small set of values. To examine the distribution of a categorical variable, you can use a bar chart. The height of the bars displays how many observations occurred with each x value.\n\n\n\n1.4.2\n\nA variable is numerical (or quantitative) if it can take on a wide range of numerical values, and it is sensible to add, subtract, or take averages with those values. Numerical variables can be continuous or discrete.\n\n\n\n1.4.3(연습문제)\n\n1\n\n\npenguins %&gt;% \n  ggplot(aes(y = species))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\n2\n\n\npenguins %&gt;% \n  ggplot(aes(x = species)) +\n  geom_bar(fill = \"red\")\n\n\n\n\n\n\n\n\n\n4\n\n\ndiamonds %&gt;% \n  ggplot(aes(x = carat)) +\n  geom_histogram(binwidth = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n1.5 Visualizing relationships\n\nTo visualize a relationship we need to have at least two variables mapped to aesthetics of a plot.\n\n\n1.5.1 A numerical and a categorical variable\n\nA boxplot is a type of visual shorthand for measures of position (percentiles) that describe a distribution. It is also useful for identifying potential outliers.\n\n\n\n1.5.2 Two categorical variables\n\nWe can use stacked bar plots to visualize the relationship between two categorical variables.\n\n\n\n1.5.3 Two numerical variables\n\n[…] A scatterplot is probably the most commonly used plot for visualizing the relationship between two numerical variables.\n\n\n\n1.5.4 Three or more variables\n\nHowever adding too many aesthetic mappings to a plot makes it cluttered and difficult to make sense of. Another way, which is particularly useful for categorical variables, is to split your plot into facets, subplots that each display one subset of the data.\n\n\n\n1.5.5(연습문제)\n\n6\n\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = bill_length_mm, y = bill_depth_mm, \n                       color = species, shape = species)) +\n  geom_point(na.rm = TRUE) +\n  labs(color = \"Species\", shape = \"Species\")\n\n\n\n\n\n\n\n\n\n7\n\n\npenguins %&gt;% ggplot(aes(x = island, fill = species)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\npenguins %&gt;% ggplot(aes(x = species, fill = island)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n\n\n\n1.6.1(연습문제)\n\nmpg %&gt;% \n  ggplot() +\n  geom_point(aes(x = cty, y = hwy))\n\n\n\n\n\n\n\n# ggsave(\"mpg-plot.pdf\")",
    "crumbs": [
      "Home",
      "R",
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "notes/r4ds_2nd.html#workflow---basics",
    "href": "notes/r4ds_2nd.html#workflow---basics",
    "title": "R for Data Science (2e)",
    "section": "2. Workflow - basics",
    "text": "2. Workflow - basics\n\nYou now have some experience running R code. We didn’t give you many details, but you’ve obviously figured out the basics, or you would’ve thrown this book away in frustration! Frustration is natural when you start programming in R because it is such a stickler for punctuation, and even one character out of place can cause it to complain. But while you should expect to be a little frustrated, take comfort in that this experience is typical and temporary: it happens to everyone, and the only way to get over it is to keep trying.\n\n\n2.1 Coding basics\n\nYou will make lots of assignments, and &lt;- is a pain to type. You can save time with RStudio’s keyboard shortcut: Alt + -(the minus sign). Notice that RStudio automatically surrounds &lt;- with spaces, which is a good code formatting practice. Code can be miserable to read on a good day, so giveyoureyesabreak and use spaces.\n\n\n\n2.2 Comments\n\nFor data analysis code, use comments to explain your overall plan of attack and record important insights as you encounter them. There’s no way to re-capture this knowledge from the code itself.\n\n\n\n2.3 What’s in a name\n\nWe recommend snake_case, where you separate lowercase words with _.",
    "crumbs": [
      "Home",
      "R",
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "notes/r4ds_2nd.html#data-transformation",
    "href": "notes/r4ds_2nd.html#data-transformation",
    "title": "R for Data Science (2e)",
    "section": "3. Data transformation",
    "text": "3. Data transformation\n\nVisualization is an important tool for generating insight, but it’s rare that you get the data in exactly the right form you need to make the graph you want. Often you’ll need to create some new variables or summaries to answer your questions with your data, or maybe you just want to rename the variables or reorder the observations to make the data a little easier to work with.\n\n\nflights is a tibble, a special type of data frame used by the tidyverse to avoid some common gotchas. The most important difference between tibbles and data frames is the way tibbles print; they are designed for large datasets, so they only show the first few rows and only the columns that fit on one screen. There are a few options to see everything. If you’re using RStudio, the most convenient is probably View(flights), which opens an interactive, scrollable, and filterable view. Otherwise you can use print(flights, width = Inf) to show all columns, or use glimpse():\n\n\nflights %&gt;% \n  glimpse()\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\n\n3.1.3 dplyr basics\n\nYou’re about to learn the primary dplyr verbs (functions), which will allow you to solve the vast majority of your data manipulation challenges. But before we discuss their individual differences, it’s worth stating what they have in common: 1. The first argument is always a data frame., 2. The subsequent arguments typically describe which columns to operate on using the variable names (without quotes)., 3. The output is always a new data frame.\n\n\nflights |&gt;\n  filter(dest == \"IAH\") |&gt; \n  group_by(year, month, day) |&gt; \n  summarize(\n    arr_delay = mean(arr_delay, na.rm = TRUE)\n  ) \n\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;\n 1  2013     1     1     17.8 \n 2  2013     1     2      7   \n 3  2013     1     3     18.3 \n 4  2013     1     4     -3.2 \n 5  2013     1     5     20.2 \n 6  2013     1     6      9.28\n 7  2013     1     7     -7.74\n 8  2013     1     8      7.79\n 9  2013     1     9     18.1 \n10  2013     1    10      6.68\n# ℹ 355 more rows\n\n\n\ndplyr’s verbs are organized into four groups based on what they operate on: rows, columns, groups, or tables. In the following sections, you’ll learn the most important verbs for rows, columns, and groups. Then, we’ll return to the join verbs that work on tables in Chapter 19. Let’s dive in!\n\n\n\n3.2 Rows\n\nThe most important verbs that operate on rows of a dataset are filter(), which changes which rows are present without changing their order, and arrange(), which changes the order of the rows without changing which are present. Both functions only affect the rows, and the columns are left unchanged. We’ll also discuss distinct() which finds rows with unique values. Unlike arrange() and filter() it can also optionally modify the columns.\n\n\n3.2.1 filter\n\nfilter() allows you to keep rows based on the values of the columns. The first argument is the data frame. The second and subsequent arguments are the conditions that must be true to keep the row.\n\n\nflights |&gt; \n  filter(dep_delay &gt; 120)\n\n# A tibble: 9,723 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ℹ 9,713 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nThere’s a useful shortcut when you’re combining | and ==: %in%. It keeps rows where the variable equals one of the values on the right:\n\n\nflights |&gt; \n  filter(month == 1 & day == 1)\n\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  filter(month == 1 | month == 2)\n\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  filter(month %in% c(1, 2))\n\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\njan1 &lt;- flights |&gt; \n  filter(month == 1 & day == 1)\n\n\n\n3.2.3 arrange\n\narrange() changes the order of the rows based on the value of the columns. It takes a data frame and a set of column names (or more complicated expressions) to order by. If you provide more than one column name, each additional column will be used to break ties in the values of the preceding columns. For example, the following code sorts by the departure time, which is spread over four columns. We get the earliest years first, then within a year, the earliest months, etc\n\n\nflights |&gt; \n  arrange(year, month, day, dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n3.2.4 distinct\n\ndistinct() finds all the unique rows in a dataset, so technically, it primarily operates on the rows. Most of the time, however, you’ll want the distinct combination of some variables, so you can also optionally supply column names:\n\n\nflights |&gt; \n  distinct()\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  distinct(origin, dest)\n\n# A tibble: 224 × 2\n   origin dest \n   &lt;chr&gt;  &lt;chr&gt;\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ℹ 214 more rows\n\n\n\nAlternatively, if you want to the keep other columns when filtering for unique rows, you can use the .keep_all = TRUE option.\n\n\nflights |&gt; \n  distinct(origin, dest, .keep_all = TRUE)\n\n# A tibble: 224 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 214 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nIf you want to find the number of occurrences instead, you’re better off swapping distinct() for count(). With the sort = TRUE argument, you can arrange them in descending order of the number of occurrences. You’ll learn more about count in Section 13.3.\n\n\nflights |&gt;\n  count(origin, dest, sort = TRUE)\n\n# A tibble: 224 × 3\n   origin dest      n\n   &lt;chr&gt;  &lt;chr&gt; &lt;int&gt;\n 1 JFK    LAX   11262\n 2 LGA    ATL   10263\n 3 LGA    ORD    8857\n 4 JFK    SFO    8204\n 5 LGA    CLT    6168\n 6 EWR    ORD    6100\n 7 JFK    BOS    5898\n 8 LGA    MIA    5781\n 9 JFK    MCO    5464\n10 EWR    BOS    5327\n# ℹ 214 more rows\n\n\n\n\n3.2.5(연습문제)\n\n1\n\n\n# Had an arrival delay of two or more hours\nflights |&gt;\n  filter(arr_delay &gt;= 120) |&gt;\n  arrange(desc(arr_delay))\n\n# A tibble: 10,200 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     7    22     2257            759       898      121           1026\n 9  2013    12     5      756           1700       896     1058           2020\n10  2013     5     3     1133           2055       878     1250           2215\n# ℹ 10,190 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n# Flew to Houston (IAH or HOU)\nflights |&gt;\n  filter(dest %in% c(\"IAH\", \"HOU\"))\n\n# A tibble: 9,313 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      623            627        -4      933            932\n 4  2013     1     1      728            732        -4     1041           1038\n 5  2013     1     1      739            739         0     1104           1038\n 6  2013     1     1      908            908         0     1228           1219\n 7  2013     1     1     1028           1026         2     1350           1339\n 8  2013     1     1     1044           1045        -1     1352           1351\n 9  2013     1     1     1114            900       134     1447           1222\n10  2013     1     1     1205           1200         5     1503           1505\n# ℹ 9,303 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n# Were operated by United, American, or Delta\nflights |&gt;\n  filter(carrier %in% c(\"UA\", \"AA\", \"DL\"))\n\n# A tibble: 139,504 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      554            600        -6      812            837\n 5  2013     1     1      554            558        -4      740            728\n 6  2013     1     1      558            600        -2      753            745\n 7  2013     1     1      558            600        -2      924            917\n 8  2013     1     1      558            600        -2      923            937\n 9  2013     1     1      559            600        -1      941            910\n10  2013     1     1      559            600        -1      854            902\n# ℹ 139,494 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n# Departed in summer (July, August, and September)\nflights |&gt;\n  filter(month %in% c(7, 8, 9))\n\n# A tibble: 86,326 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     7     1        1           2029       212      236           2359\n 2  2013     7     1        2           2359         3      344            344\n 3  2013     7     1       29           2245       104      151              1\n 4  2013     7     1       43           2130       193      322             14\n 5  2013     7     1       44           2150       174      300            100\n 6  2013     7     1       46           2051       235      304           2358\n 7  2013     7     1       48           2001       287      308           2305\n 8  2013     7     1       58           2155       183      335             43\n 9  2013     7     1      100           2146       194      327             30\n10  2013     7     1      100           2245       135      337            135\n# ℹ 86,316 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n# Arrived more than two hours late, but didn’t leave late\nflights |&gt; \n  filter(arr_delay &gt;= 120 & dep_delay &lt;= 0) |&gt; view()\n\n# Were delayed by at least an hour, but made up over 30 minutes in flight\nflights |&gt; \n  filter(dep_delay &gt;= 60 & dep_delay - arr_delay &gt; 30)\n\n# A tibble: 1,844 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1     2205           1720       285       46           2040\n 2  2013     1     1     2326           2130       116      131             18\n 3  2013     1     3     1503           1221       162     1803           1555\n 4  2013     1     3     1839           1700        99     2056           1950\n 5  2013     1     3     1850           1745        65     2148           2120\n 6  2013     1     3     1941           1759       102     2246           2139\n 7  2013     1     3     1950           1845        65     2228           2227\n 8  2013     1     3     2015           1915        60     2135           2111\n 9  2013     1     3     2257           2000       177       45           2224\n10  2013     1     4     1917           1700       137     2135           1950\n# ℹ 1,834 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n2\n\n\nflights |&gt; \n  arrange(desc(dep_delay)) |&gt; \n  arrange(sched_dep_time) |&gt;\n  relocate(dep_delay, sched_dep_time)\n\n# A tibble: 336,776 × 19\n   dep_delay sched_dep_time  year month   day dep_time arr_time sched_arr_time\n       &lt;dbl&gt;          &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1        NA            106  2013     7    27       NA       NA            245\n 2       188            500  2013     4    24      808     1008            640\n 3        61            500  2013     9    13      601      732            648\n 4        47            500  2013     3     9      547      733            648\n 5        44            500  2013     6     8      544      727            640\n 6        29            500  2013     4    17      529      704            640\n 7        25            500  2013     6    30      525      703            640\n 8        22            500  2013    11    28      522      658            651\n 9        20            500  2013     4    21      520      705            640\n10        18            500  2013     6     3      518      654            640\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n3\n\n\nflights |&gt; \n  mutate(speed = distance / (air_time / 60)) |&gt;\n  arrange(desc(speed)) |&gt;\n  relocate(speed)\n\n# A tibble: 336,776 × 20\n   speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1  703.  2013     5    25     1709           1700         9     1923\n 2  650.  2013     7     2     1558           1513        45     1745\n 3  648   2013     5    13     2040           2025        15     2225\n 4  641.  2013     3    23     1914           1910         4     2045\n 5  591.  2013     1    12     1559           1600        -1     1849\n 6  564   2013    11    17      650            655        -5     1059\n 7  557.  2013     2    21     2355           2358        -3      412\n 8  556.  2013    11    17      759            800        -1     1212\n 9  554.  2013    11    16     2003           1925        38       17\n10  554.  2013    11    16     2349           2359       -10      402\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n4\n\n\nflights |&gt; \n  distinct(year, month, day) |&gt;\n  nrow()\n\n[1] 365\n\n\n\n5\n\n\nflights |&gt; \n  arrange(desc(distance)) |&gt;\n  relocate(distance)\n\n# A tibble: 336,776 × 19\n   distance  year month   day dep_time sched_dep_time dep_delay arr_time\n      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1     4983  2013     1     1      857            900        -3     1516\n 2     4983  2013     1     2      909            900         9     1525\n 3     4983  2013     1     3      914            900        14     1504\n 4     4983  2013     1     4      900            900         0     1516\n 5     4983  2013     1     5      858            900        -2     1519\n 6     4983  2013     1     6     1019            900        79     1558\n 7     4983  2013     1     7     1042            900       102     1620\n 8     4983  2013     1     8      901            900         1     1504\n 9     4983  2013     1     9      641            900      1301     1242\n10     4983  2013     1    10      859            900        -1     1449\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n3.3 Columns\n\nThere are four important verbs that affect the columns without changing the rows: mutate() creates new columns that are derived from the existing columns, select() changes which columns are present, rename() changes the names of the columns, and relocate() changes the positions of the columns.\n\n\n3.3.1 mutate\n\nThe job of mutate() is to add new columns that are calculated from the existing columns. In the transform chapters, you’ll learn a large set of functions that you can use to manipulate different types of variables. For now, we’ll stick with basic algebra, which allows us to compute the gain, how much time a delayed flight made up in the air, and the speed in miles per hour:\n\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60\n  )\n\n# A tibble: 336,776 × 21\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 13 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, gain &lt;dbl&gt;, speed &lt;dbl&gt;\n\n\n\nBy default, mutate() adds new columns on the right-hand side of your dataset, which makes it difficult to see what’s happening here. We can use the .before argument to instead add the variables to the left-hand side. […] Alternatively, you can control which variables are kept with the .keep argument. A particularly useful argument is “used” which specifies that we only keep the columns that were involved or created in the mutate() step. […] we should think carefully about whether we want the result to be assigned back to flights, overwriting the original data frame with many more variables, or to a new object.\n\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .before = 1\n  )\n\n# A tibble: 336,776 × 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .after = day\n  )\n\n# A tibble: 336,776 × 21\n    year month   day  gain speed dep_time sched_dep_time dep_delay arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1  2013     1     1    -9  370.      517            515         2      830\n 2  2013     1     1   -16  374.      533            529         4      850\n 3  2013     1     1   -31  408.      542            540         2      923\n 4  2013     1     1    17  517.      544            545        -1     1004\n 5  2013     1     1    19  394.      554            600        -6      812\n 6  2013     1     1   -16  288.      554            558        -4      740\n 7  2013     1     1   -24  404.      555            600        -5      913\n 8  2013     1     1    11  259.      557            600        -3      709\n 9  2013     1     1     5  405.      557            600        -3      838\n10  2013     1     1   -10  319.      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    hours = air_time / 60,\n    gain_per_hour = gain / hours,\n    .keep = \"used\"\n  )\n\n# A tibble: 336,776 × 6\n   dep_delay arr_delay air_time  gain hours gain_per_hour\n       &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1         2        11      227    -9 3.78          -2.38\n 2         4        20      227   -16 3.78          -4.23\n 3         2        33      160   -31 2.67         -11.6 \n 4        -1       -18      183    17 3.05           5.57\n 5        -6       -25      116    19 1.93           9.83\n 6        -4        12      150   -16 2.5           -6.4 \n 7        -5        19      158   -24 2.63          -9.11\n 8        -3       -14       53    11 0.883         12.5 \n 9        -3        -8      140     5 2.33           2.14\n10        -2         8      138   -10 2.3           -4.35\n# ℹ 336,766 more rows\n\n\n\n\n3.3.2 select\n\nIt’s not uncommon to get datasets with hundreds or even thousands of variables. In this situation, the first challenge is often just focusing on the variables you’re interested in. select() allows you to rapidly zoom in on a useful subset using operations based on the names of the variables:\n\n\n# Select columns by name:\nflights |&gt; \n  select(year, month, day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\n# Select all columns between year and day (inclusive):\nflights |&gt; \n  select(year:day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\nflights |&gt; \n  select(!year:day)\n\n# A tibble: 336,776 × 16\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1      517            515         2      830            819        11 UA     \n 2      533            529         4      850            830        20 UA     \n 3      542            540         2      923            850        33 AA     \n 4      544            545        -1     1004           1022       -18 B6     \n 5      554            600        -6      812            837       -25 DL     \n 6      554            558        -4      740            728        12 UA     \n 7      555            600        -5      913            854        19 B6     \n 8      557            600        -3      709            723       -14 EV     \n 9      557            600        -3      838            846        -8 B6     \n10      558            600        -2      753            745         8 AA     \n# ℹ 336,766 more rows\n# ℹ 9 more variables: flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;,\n#   air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n# Select all columns that are characters:\nflights |&gt; \n  select(where(is.character))\n\n# A tibble: 336,776 × 4\n   carrier tailnum origin dest \n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;\n 1 UA      N14228  EWR    IAH  \n 2 UA      N24211  LGA    IAH  \n 3 AA      N619AA  JFK    MIA  \n 4 B6      N804JB  JFK    BQN  \n 5 DL      N668DN  LGA    ATL  \n 6 UA      N39463  EWR    ORD  \n 7 B6      N516JB  EWR    FLL  \n 8 EV      N829AS  LGA    IAD  \n 9 B6      N593JB  JFK    MCO  \n10 AA      N3ALAA  LGA    ORD  \n# ℹ 336,766 more rows\n\n\n\nYou can rename variables as you select() them by using =. The new name appears on the left-hand side of the =, and the old variable appears on the right-hand side:\n\n\nflights |&gt; \n  select(tail_num = tailnum)\n\n# A tibble: 336,776 × 1\n   tail_num\n   &lt;chr&gt;   \n 1 N14228  \n 2 N24211  \n 3 N619AA  \n 4 N804JB  \n 5 N668DN  \n 6 N39463  \n 7 N516JB  \n 8 N829AS  \n 9 N593JB  \n10 N3ALAA  \n# ℹ 336,766 more rows\n\n\n\n\n3.3.3 rename\n\nIf you want to keep all the existing variables and just want to rename a few, you can use rename() instead of select(): […] If you have a bunch of inconsistently named columns and it would be painful to fix them all by hand, check out janitor::clean_names() which provides some useful automated cleaning.\n\n\nflights |&gt; \n  rename(tail_num = tailnum)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tail_num &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n3.3.4 relocate\n\nUse relocate() to move variables around. You might want to collect related variables together or move important variables to the front. By default relocate() moves variables to the front:\n\n\nflights |&gt; \n  relocate(time_hour, air_time)\n\n# A tibble: 336,776 × 19\n   time_hour           air_time  year month   day dep_time sched_dep_time\n   &lt;dttm&gt;                 &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1 2013-01-01 05:00:00      227  2013     1     1      517            515\n 2 2013-01-01 05:00:00      227  2013     1     1      533            529\n 3 2013-01-01 05:00:00      160  2013     1     1      542            540\n 4 2013-01-01 05:00:00      183  2013     1     1      544            545\n 5 2013-01-01 06:00:00      116  2013     1     1      554            600\n 6 2013-01-01 05:00:00      150  2013     1     1      554            558\n 7 2013-01-01 06:00:00      158  2013     1     1      555            600\n 8 2013-01-01 06:00:00       53  2013     1     1      557            600\n 9 2013-01-01 06:00:00      140  2013     1     1      557            600\n10 2013-01-01 06:00:00      138  2013     1     1      558            600\n# ℹ 336,766 more rows\n# ℹ 12 more variables: dep_delay &lt;dbl&gt;, arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;,\n#   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;,\n#   dest &lt;chr&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;\n\nflights |&gt; \n  relocate(year:dep_time, .after = time_hour)\n\n# A tibble: 336,776 × 19\n   sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight\n            &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;    &lt;int&gt;\n 1            515         2      830            819        11 UA        1545\n 2            529         4      850            830        20 UA        1714\n 3            540         2      923            850        33 AA        1141\n 4            545        -1     1004           1022       -18 B6         725\n 5            600        -6      812            837       -25 DL         461\n 6            558        -4      740            728        12 UA        1696\n 7            600        -5      913            854        19 B6         507\n 8            600        -3      709            723       -14 EV        5708\n 9            600        -3      838            846        -8 B6          79\n10            600        -2      753            745         8 AA         301\n# ℹ 336,766 more rows\n# ℹ 12 more variables: tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, year &lt;int&gt;,\n#   month &lt;int&gt;, day &lt;int&gt;, dep_time &lt;int&gt;\n\nflights |&gt; \n  relocate(starts_with(\"arr\"), .before = dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day arr_time arr_delay dep_time sched_dep_time dep_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;\n 1  2013     1     1      830        11      517            515         2\n 2  2013     1     1      850        20      533            529         4\n 3  2013     1     1      923        33      542            540         2\n 4  2013     1     1     1004       -18      544            545        -1\n 5  2013     1     1      812       -25      554            600        -6\n 6  2013     1     1      740        12      554            558        -4\n 7  2013     1     1      913        19      555            600        -5\n 8  2013     1     1      709       -14      557            600        -3\n 9  2013     1     1      838        -8      557            600        -3\n10  2013     1     1      753         8      558            600        -2\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n3.3.5(연습문제)\n\n1\n\n\nflights |&gt; \n  relocate(dep_time, sched_dep_time, dep_delay)\n\n# A tibble: 336,776 × 19\n   dep_time sched_dep_time dep_delay  year month   day arr_time sched_arr_time\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1      517            515         2  2013     1     1      830            819\n 2      533            529         4  2013     1     1      850            830\n 3      542            540         2  2013     1     1      923            850\n 4      544            545        -1  2013     1     1     1004           1022\n 5      554            600        -6  2013     1     1      812            837\n 6      554            558        -4  2013     1     1      740            728\n 7      555            600        -5  2013     1     1      913            854\n 8      557            600        -3  2013     1     1      709            723\n 9      557            600        -3  2013     1     1      838            846\n10      558            600        -2  2013     1     1      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n2\n\n\nflights |&gt; \n  select(dep_time, dep_delay, arr_time, arr_delay)\n\n# A tibble: 336,776 × 4\n   dep_time dep_delay arr_time arr_delay\n      &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1      517         2      830        11\n 2      533         4      850        20\n 3      542         2      923        33\n 4      544        -1     1004       -18\n 5      554        -6      812       -25\n 6      554        -4      740        12\n 7      555        -5      913        19\n 8      557        -3      709       -14\n 9      557        -3      838        -8\n10      558        -2      753         8\n# ℹ 336,766 more rows\n\nflights |&gt; \n  select(starts_with(\"dep\"), starts_with(\"arr\"))\n\n# A tibble: 336,776 × 4\n   dep_time dep_delay arr_time arr_delay\n      &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1      517         2      830        11\n 2      533         4      850        20\n 3      542         2      923        33\n 4      544        -1     1004       -18\n 5      554        -6      812       -25\n 6      554        -4      740        12\n 7      555        -5      913        19\n 8      557        -3      709       -14\n 9      557        -3      838        -8\n10      558        -2      753         8\n# ℹ 336,766 more rows\n\nflights |&gt;\n  select(dep_time:arr_delay, -contains(\"sched\"))\n\n# A tibble: 336,776 × 4\n   dep_time dep_delay arr_time arr_delay\n      &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1      517         2      830        11\n 2      533         4      850        20\n 3      542         2      923        33\n 4      544        -1     1004       -18\n 5      554        -6      812       -25\n 6      554        -4      740        12\n 7      555        -5      913        19\n 8      557        -3      709       -14\n 9      557        -3      838        -8\n10      558        -2      753         8\n# ℹ 336,766 more rows\n\n\n\n3\n\n\nflights |&gt; \n  select(dep_time, dep_time)\n\n# A tibble: 336,776 × 1\n   dep_time\n      &lt;int&gt;\n 1      517\n 2      533\n 3      542\n 4      544\n 5      554\n 6      554\n 7      555\n 8      557\n 9      557\n10      558\n# ℹ 336,766 more rows\n\n\n\n4\n\n\nvariables &lt;- c(\"year\", \"month\", \"day\", \"dep_delay\", \"arr_delay\")\n\nflights |&gt; \n  select(any_of(variables))\n\n# A tibble: 336,776 × 5\n    year month   day dep_delay arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1  2013     1     1         2        11\n 2  2013     1     1         4        20\n 3  2013     1     1         2        33\n 4  2013     1     1        -1       -18\n 5  2013     1     1        -6       -25\n 6  2013     1     1        -4        12\n 7  2013     1     1        -5        19\n 8  2013     1     1        -3       -14\n 9  2013     1     1        -3        -8\n10  2013     1     1        -2         8\n# ℹ 336,766 more rows\n\n\n\n5\n\n\nflights |&gt; \n  select(contains(\"TIME\"))\n\n# A tibble: 336,776 × 6\n   dep_time sched_dep_time arr_time sched_arr_time air_time time_hour          \n      &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;dbl&gt; &lt;dttm&gt;             \n 1      517            515      830            819      227 2013-01-01 05:00:00\n 2      533            529      850            830      227 2013-01-01 05:00:00\n 3      542            540      923            850      160 2013-01-01 05:00:00\n 4      544            545     1004           1022      183 2013-01-01 05:00:00\n 5      554            600      812            837      116 2013-01-01 06:00:00\n 6      554            558      740            728      150 2013-01-01 05:00:00\n 7      555            600      913            854      158 2013-01-01 06:00:00\n 8      557            600      709            723       53 2013-01-01 06:00:00\n 9      557            600      838            846      140 2013-01-01 06:00:00\n10      558            600      753            745      138 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n\nflights |&gt; \n  select(contains(\"TIME\", ignore.case = FALSE))\n\n# A tibble: 336,776 × 0\n\n\n\n6\n\n\nflights |&gt;\n  rename(air_time_min = air_time) |&gt;\n  relocate(air_time_min)\n\n# A tibble: 336,776 × 19\n   air_time_min  year month   day dep_time sched_dep_time dep_delay arr_time\n          &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1          227  2013     1     1      517            515         2      830\n 2          227  2013     1     1      533            529         4      850\n 3          160  2013     1     1      542            540         2      923\n 4          183  2013     1     1      544            545        -1     1004\n 5          116  2013     1     1      554            600        -6      812\n 6          150  2013     1     1      554            558        -4      740\n 7          158  2013     1     1      555            600        -5      913\n 8           53  2013     1     1      557            600        -3      709\n 9          140  2013     1     1      557            600        -3      838\n10          138  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n3.4 The Pipe\n\nWhile both forms have their time and place, the pipe generally produces data analysis code that is easier to write and read.\n\n\nflights |&gt; \n  filter(dest == \"IAH\") |&gt; \n  mutate(speed = distance / air_time * 60) |&gt; \n  select(year:day, dep_time, carrier, flight, speed) |&gt; \n  arrange(desc(speed))\n\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n\n\n\n\n3.5 Groups\n\nSo far you’ve learned about functions that work with rows and columns. dplyr gets even more powerful when you add in the ability to work with groups.\n\n\n3.5.1 group_by\n\nUse group_by() to divide your dataset into groups meaningful for your analysis\n\n\nflights |&gt; \n  group_by(month)\n\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n3.5.2 summarize\n\nYou can create any number of summaries in a single call to summarize(). You’ll learn various useful summaries in the upcoming chapters, but one very useful summary is n(), which returns the number of rows in each group:\n\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay)\n  )\n\n# A tibble: 12 × 2\n   month avg_delay\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1        NA\n 2     2        NA\n 3     3        NA\n 4     4        NA\n 5     5        NA\n 6     6        NA\n 7     7        NA\n 8     8        NA\n 9     9        NA\n10    10        NA\n11    11        NA\n12    12        NA\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE)\n  )\n\n# A tibble: 12 × 2\n   month avg_delay\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1     10.0 \n 2     2     10.8 \n 3     3     13.2 \n 4     4     13.9 \n 5     5     13.0 \n 6     6     20.8 \n 7     7     21.7 \n 8     8     12.6 \n 9     9      6.72\n10    10      6.24\n11    11      5.44\n12    12     16.6 \n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    n = n()\n  )\n\n# A tibble: 12 × 3\n   month avg_delay     n\n   &lt;int&gt;     &lt;dbl&gt; &lt;int&gt;\n 1     1     10.0  27004\n 2     2     10.8  24951\n 3     3     13.2  28834\n 4     4     13.9  28330\n 5     5     13.0  28796\n 6     6     20.8  28243\n 7     7     21.7  29425\n 8     8     12.6  29327\n 9     9      6.72 27574\n10    10      6.24 28889\n11    11      5.44 27268\n12    12     16.6  28135\n\n\n\n\n3.5.3 slice_\n\nThere are five handy functions that allow you to extract specific rows within each group: - df |&gt; slice_head(n = 1) takes the first row from each group. - df |&gt; slice_tail(n = 1) takes the last row in each group. - df |&gt; slice_min(x, n = 1) takes the row with the smallest value of column x. - df |&gt; slice_max(x, n = 1) takes the row with the largest value of column x. - df |&gt; slice_sample(n = 1) takes one random row.\n\n\nflights |&gt; \n  group_by(dest) |&gt; \n  slice_max(arr_delay, n = 1) |&gt;\n  relocate(dest)\n\n# A tibble: 108 × 19\n# Groups:   dest [105]\n   dest   year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 ABQ    2013     7    22     2145           2007        98      132\n 2 ACK    2013     7    23     1139            800       219     1250\n 3 ALB    2013     1    25      123           2000       323      229\n 4 ANC    2013     8    17     1740           1625        75     2042\n 5 ATL    2013     7    22     2257            759       898      121\n 6 AUS    2013     7    10     2056           1505       351     2347\n 7 AVL    2013     8    13     1156            832       204     1417\n 8 BDL    2013     2    21     1728           1316       252     1839\n 9 BGR    2013    12     1     1504           1056       248     1628\n10 BHM    2013     4    10       25           1900       325      136\n# ℹ 98 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n3.5.4 Grouping by multiple variables\n\nYou can create groups using more than one variable. For example, we could make a group for each date.\n\n\ndaily &lt;- flights |&gt;  \n  group_by(year, month, day)\n\n\nWhen you summarize a tibble grouped by more than one variable, each summary peels off the last group. In hindsight, this wasn’t a great way to make this function work, but it’s difficult to change without breaking existing code.\n\n\ndaily_flights &lt;- daily |&gt; \n  summarize(n = n())\n\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n\ndaily_flights &lt;- daily |&gt; \n  summarize(\n    n = n(), \n    .groups = \"drop_last\"\n  )\n\n\n\n3.5.5 Ungrouping\n\nYou might also want to remove grouping from a data frame without using summarize(). You can do this with ungroup(). […] You get a single row back because dplyr treats all the rows in an ungrouped data frame as belonging to one group.\n\n\ndaily |&gt; \n  ungroup()\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\ndaily |&gt; \n  ungroup() |&gt;\n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    flights = n()\n  )\n\n# A tibble: 1 × 2\n  avg_delay flights\n      &lt;dbl&gt;   &lt;int&gt;\n1      12.6  336776\n\n\n\n\n3.5.6 .by\n\n[…] syntax for per-operation grouping, the .by argument. group_by() and ungroup() aren’t going away, but you can now also use the .by argument to group within a single operation. .by works with all verbs and has the advantage that you don’t need to use the .groups argument to suppress the grouping message or ungroup() when you’re done.\n\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = month\n  )\n\n# A tibble: 12 × 3\n   month delay     n\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1 10.0  27004\n 2    10  6.24 28889\n 3    11  5.44 27268\n 4    12 16.6  28135\n 5     2 10.8  24951\n 6     3 13.2  28834\n 7     4 13.9  28330\n 8     5 13.0  28796\n 9     6 20.8  28243\n10     7 21.7  29425\n11     8 12.6  29327\n12     9  6.72 27574\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = c(origin, dest)\n  )\n\n# A tibble: 224 × 4\n   origin dest  delay     n\n   &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;int&gt;\n 1 EWR    IAH   11.8   3973\n 2 LGA    IAH    9.06  2951\n 3 JFK    MIA    9.34  3314\n 4 JFK    BQN    6.67   599\n 5 LGA    ATL   11.4  10263\n 6 EWR    ORD   14.6   6100\n 7 EWR    FLL   13.5   3793\n 8 LGA    IAD   16.7   1803\n 9 JFK    MCO   10.6   5464\n10 LGA    ORD   10.7   8857\n# ℹ 214 more rows\n\n\n\n\n3.5.7(연습문제)\n\n1\n\n\nflights |&gt;\n  group_by(carrier) |&gt;\n  summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |&gt;\n  arrange(desc(avg_dep_delay))\n\n# A tibble: 16 × 2\n   carrier avg_dep_delay\n   &lt;chr&gt;           &lt;dbl&gt;\n 1 F9              20.2 \n 2 EV              20.0 \n 3 YV              19.0 \n 4 FL              18.7 \n 5 WN              17.7 \n 6 9E              16.7 \n 7 B6              13.0 \n 8 VX              12.9 \n 9 OO              12.6 \n10 UA              12.1 \n11 MQ              10.6 \n12 DL               9.26\n13 AA               8.59\n14 AS               5.80\n15 HA               4.90\n16 US               3.78\n\n\n\n2\n\n\nflights |&gt; \n  group_by(dest) |&gt; \n  arrange(dest, desc(dep_delay)) |&gt;\n  slice_head(n = 5) |&gt;\n  relocate(dest, dep_delay)\n\n# A tibble: 517 × 19\n# Groups:   dest [105]\n   dest  dep_delay  year month   day dep_time sched_dep_time arr_time\n   &lt;chr&gt;     &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;\n 1 ABQ         142  2013    12    14     2223           2001      133\n 2 ABQ         139  2013    12    17     2220           2001      120\n 3 ABQ         125  2013     7    30     2212           2007       57\n 4 ABQ         125  2013     9     2     2212           2007       48\n 5 ABQ         119  2013     7    23     2206           2007      116\n 6 ACK         219  2013     7    23     1139            800     1250\n 7 ACK         138  2013     7     2     1018            800     1119\n 8 ACK         117  2013     7     4      957            800     1106\n 9 ACK         101  2013     5    30     1321           1140     1419\n10 ACK         100  2013     6    24      940            800     1111\n# ℹ 507 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n3\n\n\nflights |&gt;\n  group_by(hour) |&gt;\n  summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |&gt;\n  ggplot(aes(x = hour, y = avg_dep_delay)) + \n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n4\n\n\nflights |&gt; \n  slice_min(dep_delay, n = -5) |&gt;\n  relocate(dep_delay)\n\n# A tibble: 336,776 × 19\n   dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n       &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1       -43  2013    12     7     2040           2123       40           2352\n 2       -33  2013     2     3     2022           2055     2240           2338\n 3       -32  2013    11    10     1408           1440     1549           1559\n 4       -30  2013     1    11     1900           1930     2233           2243\n 5       -27  2013     1    29     1703           1730     1947           1957\n 6       -26  2013     8     9      729            755     1002            955\n 7       -25  2013    10    23     1907           1932     2143           2143\n 8       -25  2013     3    30     2030           2055     2213           2250\n 9       -24  2013     3     2     1431           1455     1601           1631\n10       -24  2013     5     5      934            958     1225           1309\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  slice_min(dep_delay, n = 5) |&gt;\n  relocate(dep_delay)\n\n# A tibble: 5 × 19\n  dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n1       -43  2013    12     7     2040           2123       40           2352\n2       -33  2013     2     3     2022           2055     2240           2338\n3       -32  2013    11    10     1408           1440     1549           1559\n4       -30  2013     1    11     1900           1930     2233           2243\n5       -27  2013     1    29     1703           1730     1947           1957\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  slice_max(dep_delay, n = -5) |&gt;\n  relocate(dep_delay)\n\n# A tibble: 336,776 × 19\n   dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n       &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1      1301  2013     1     9      641            900     1242           1530\n 2      1137  2013     6    15     1432           1935     1607           2120\n 3      1126  2013     1    10     1121           1635     1239           1810\n 4      1014  2013     9    20     1139           1845     1457           2210\n 5      1005  2013     7    22      845           1600     1044           1815\n 6       960  2013     4    10     1100           1900     1342           2211\n 7       911  2013     3    17     2321            810      135           1020\n 8       899  2013     6    27      959           1900     1236           2226\n 9       898  2013     7    22     2257            759      121           1026\n10       896  2013    12     5      756           1700     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  slice_max(dep_delay, n = 5) |&gt;\n  relocate(dep_delay)\n\n# A tibble: 5 × 19\n  dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n1      1301  2013     1     9      641            900     1242           1530\n2      1137  2013     6    15     1432           1935     1607           2120\n3      1126  2013     1    10     1121           1635     1239           1810\n4      1014  2013     9    20     1139           1845     1457           2210\n5      1005  2013     7    22      845           1600     1044           1815\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n6\n\n\ndf &lt;- tibble(\n  x = 1:5,\n  y = c(\"a\", \"b\", \"a\", \"a\", \"b\"),\n  z = c(\"K\", \"K\", \"L\", \"L\", \"K\")\n)\ndf |&gt;\n  group_by(y)\n\n# A tibble: 5 × 3\n# Groups:   y [2]\n      x y     z    \n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 a     K    \n2     2 b     K    \n3     3 a     L    \n4     4 a     L    \n5     5 b     K    \n\ndf |&gt;\n  arrange(y)\n\n# A tibble: 5 × 3\n      x y     z    \n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 a     K    \n2     3 a     L    \n3     4 a     L    \n4     2 b     K    \n5     5 b     K    \n\ndf |&gt;\n  group_by(y) |&gt;\n  summarize(mean_x = mean(x))\n\n# A tibble: 2 × 2\n  y     mean_x\n  &lt;chr&gt;  &lt;dbl&gt;\n1 a       2.67\n2 b       3.5 \n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x))\n\n`summarise()` has grouped output by 'y'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 3 × 3\n# Groups:   y [2]\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x), .groups = \"drop\")\n\n# A tibble: 3 × 3\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x))\n\n`summarise()` has grouped output by 'y'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 3 × 3\n# Groups:   y [2]\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  mutate(mean_x = mean(x))\n\n# A tibble: 5 × 4\n# Groups:   y, z [3]\n      x y     z     mean_x\n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1     1 a     K        1  \n2     2 b     K        3.5\n3     3 a     L        3.5\n4     4 a     L        3.5\n5     5 b     K        3.5",
    "crumbs": [
      "Home",
      "R",
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "notes/r4ds_2nd.html#workflow---code-style",
    "href": "notes/r4ds_2nd.html#workflow---code-style",
    "title": "R for Data Science (2e)",
    "section": "4. Workflow - code style",
    "text": "4. Workflow - code style\n\n[…] Open the palette by pressing Cmd/Ctrl + Shift + P, then type “styler” to see all the shortcuts offered by styler.\n\n\n4.1 Naems\n\n[…] by mutate()) should use only lowercase letters, numbers, and . Use  to separate words within a name. […] If you have a bunch of names for related things, do your best to be consistent. It’s easy for inconsistencies to arise when you forget a previous convention, so don’t feel bad if you have to go back and rename things. In general, if you have a bunch of variables that are a variation on a theme, you’re better off giving them a common prefix rather than a common suffix because autocomplete works best on the start of a variable.\n\n\n# Strive for:\nshort_flights &lt;- flights |&gt; filter(air_time &lt; 60)\n\n# Avoid:\nSHORTFLIGHTS &lt;- flights |&gt; filter(air_time &lt; 60)\n\n\n\n4.2 Spaces\n\nPut spaces on either side of mathematical operators apart from ^ (i.e. +, -, ==, &lt;, …), and around the assignment operator (&lt;-).\n\n\n# Strive for\nz &lt;- (a + b)^2 / d\n\n# Avoid\nz&lt;-( a + b ) ^ 2/d\n\n\nIt’s OK to add extra spaces if it improves alignment. For example, if you’re creating multiple variables in mutate(), you might want to add spaces so that all the = line up.1 This makes it easier to skim the code.\n\n\n# Strive for\nmean(x, na.rm = TRUE)\n\n# Avoid\nmean (x ,na.rm=TRUE)\n\n\n\n4.3 Pipes\n\n|&gt; should always have a space before it and should typically be the last thing on a line. […] After the first step of the pipeline, indent each line by two spaces. RStudio will automatically put the spaces in for you after a line break following a |&gt; . If you’re putting each argument on its own line, indent by an extra two spaces. Make sure ) is on its own line, and un-indented to match the horizontal position of the function name. […] Finally, be wary of writing very long pipes, say longer than 10-15 lines. Try to break them up into smaller sub-tasks, giving each task an informative name. The names will help cue the reader into what’s happening and makes it easier to check that intermediate results are as expected. Whenever you can give something an informative name, you should give it an informative name, for example when you fundamentally change the structure of the data, e.g., after pivoting or summarizing. Don’t expect to get it right the first time! This means breaking up long pipelines if there are intermediate states that can get good names.\n\n\n# Strive for \nflights |&gt;  \n  filter(!is.na(arr_delay), !is.na(tailnum)) |&gt; \n  count(dest)\n\n# A tibble: 104 × 2\n   dest      n\n   &lt;chr&gt; &lt;int&gt;\n 1 ABQ     254\n 2 ACK     264\n 3 ALB     418\n 4 ANC       8\n 5 ATL   16837\n 6 AUS    2411\n 7 AVL     261\n 8 BDL     412\n 9 BGR     358\n10 BHM     269\n# ℹ 94 more rows\n\n# Avoid\nflights|&gt;filter(!is.na(arr_delay), !is.na(tailnum))|&gt;count(dest)\n\n# A tibble: 104 × 2\n   dest      n\n   &lt;chr&gt; &lt;int&gt;\n 1 ABQ     254\n 2 ACK     264\n 3 ALB     418\n 4 ANC       8\n 5 ATL   16837\n 6 AUS    2411\n 7 AVL     261\n 8 BDL     412\n 9 BGR     358\n10 BHM     269\n# ℹ 94 more rows\n\n# Strive for\nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\n# A tibble: 4,044 × 3\n   tailnum  delay     n\n   &lt;chr&gt;    &lt;dbl&gt; &lt;int&gt;\n 1 D942DN  31.5       4\n 2 N0EGMQ   9.98    371\n 3 N10156  12.7     153\n 4 N102UW   2.94     48\n 5 N103US  -6.93     46\n 6 N104UW   1.80     47\n 7 N10575  20.7     289\n 8 N105UW  -0.267    45\n 9 N107US  -5.73     41\n10 N108UW  -1.25     60\n# ℹ 4,034 more rows\n\n# Avoid\nflights |&gt;\n  group_by(\n    tailnum\n  ) |&gt; \n  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())\n\n# A tibble: 4,044 × 3\n   tailnum  delay     n\n   &lt;chr&gt;    &lt;dbl&gt; &lt;int&gt;\n 1 D942DN  31.5       4\n 2 N0EGMQ   9.98    371\n 3 N10156  12.7     153\n 4 N102UW   2.94     48\n 5 N103US  -6.93     46\n 6 N104UW   1.80     47\n 7 N10575  20.7     289\n 8 N105UW  -0.267    45\n 9 N107US  -5.73     41\n10 N108UW  -1.25     60\n# ℹ 4,034 more rows\n\n# Strive for \nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\n# A tibble: 4,044 × 3\n   tailnum  delay     n\n   &lt;chr&gt;    &lt;dbl&gt; &lt;int&gt;\n 1 D942DN  31.5       4\n 2 N0EGMQ   9.98    371\n 3 N10156  12.7     153\n 4 N102UW   2.94     48\n 5 N103US  -6.93     46\n 6 N104UW   1.80     47\n 7 N10575  20.7     289\n 8 N105UW  -0.267    45\n 9 N107US  -5.73     41\n10 N108UW  -1.25     60\n# ℹ 4,034 more rows\n\n# Avoid\nflights|&gt;\n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE), \n    n = n()\n  )\n\n# A tibble: 4,044 × 3\n   tailnum  delay     n\n   &lt;chr&gt;    &lt;dbl&gt; &lt;int&gt;\n 1 D942DN  31.5       4\n 2 N0EGMQ   9.98    371\n 3 N10156  12.7     153\n 4 N102UW   2.94     48\n 5 N103US  -6.93     46\n 6 N104UW   1.80     47\n 7 N10575  20.7     289\n 8 N105UW  -0.267    45\n 9 N107US  -5.73     41\n10 N108UW  -1.25     60\n# ℹ 4,034 more rows\n\n# Avoid\nflights|&gt;\n  group_by(tailnum) |&gt; \n  summarize(\n  delay = mean(arr_delay, na.rm = TRUE), \n  n = n()\n  )\n\n# A tibble: 4,044 × 3\n   tailnum  delay     n\n   &lt;chr&gt;    &lt;dbl&gt; &lt;int&gt;\n 1 D942DN  31.5       4\n 2 N0EGMQ   9.98    371\n 3 N10156  12.7     153\n 4 N102UW   2.94     48\n 5 N103US  -6.93     46\n 6 N104UW   1.80     47\n 7 N10575  20.7     289\n 8 N105UW  -0.267    45\n 9 N107US  -5.73     41\n10 N108UW  -1.25     60\n# ℹ 4,034 more rows\n\n# This fits compactly on one line\ndf |&gt; mutate(y = x + 1)\n\n# A tibble: 5 × 3\n      x     y z    \n  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;\n1     1     2 K    \n2     2     3 K    \n3     3     4 L    \n4     4     5 L    \n5     5     6 K    \n\n# While this takes up 4x as many lines, it's easily extended to \n# more variables and more steps in the future\ndf |&gt; \n  mutate(\n    y = x + 1\n  )\n\n# A tibble: 5 × 3\n      x     y z    \n  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;\n1     1     2 K    \n2     2     3 K    \n3     3     4 L    \n4     4     5 L    \n5     5     6 K    \n\n\n\n\n4.4 ggplot2\n\nThe same basic rules that apply to the pipe also apply to ggplot2; just treat + the same way as |&gt;. […] Again, if you can’t fit all of the arguments to a function on to a single line, put each argument on its own line:\n\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE)\n  ) |&gt; \n  ggplot(aes(x = month, y = delay)) +\n  geom_point() + \n  geom_line()\n\n\n\n\n\n\n\nflights |&gt; \n  group_by(dest) |&gt; \n  summarize(\n    distance = mean(distance),\n    speed = mean(distance / air_time, na.rm = TRUE)\n  ) |&gt; \n  ggplot(aes(x = distance, y = speed)) +\n  geom_smooth(\n    method = \"loess\",\n    span = 0.5,\n    se = FALSE, \n    color = \"white\", \n    linewidth = 4\n  ) +\n  geom_point()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nSection\n\nAs your scripts get longer, you can use sectioning comments to break up your file into manageable pieces:\n\n\n# Load data --------------------------------------\n\n# Plot data --------------------------------------\n\n\n\n4.6(연습문제)\n\nflights |&gt;\n  filter(dest == \"IAH\") |&gt;\n  group_by(year, month, day) |&gt;\n  summarize(\n    n = n(),\n    delay = mean(arr_delay, na.rm = TRUE)\n  ) |&gt;\n  filter(n &gt; 10)\n\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 365 × 5\n# Groups:   year, month [12]\n    year month   day     n delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1  2013     1     1    20 17.8 \n 2  2013     1     2    20  7   \n 3  2013     1     3    19 18.3 \n 4  2013     1     4    20 -3.2 \n 5  2013     1     5    13 20.2 \n 6  2013     1     6    18  9.28\n 7  2013     1     7    19 -7.74\n 8  2013     1     8    19  7.79\n 9  2013     1     9    19 18.1 \n10  2013     1    10    19  6.68\n# ℹ 355 more rows\n\nflights |&gt;\n  filter(\n    carrier == \"UA\", \n    dest %in% c(\"IAH\", \"HOU\"), \n    sched_dep_time &gt; 0900, \n    sched_arr_time &lt; 2000\n  ) |&gt;\n  group_by(flight) |&gt;\n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE), \n    cancelled = sum(is.na(arr_delay)), n = n()\n  ) |&gt;\n  filter(n &gt; 10)\n\n# A tibble: 74 × 4\n   flight delay cancelled     n\n    &lt;int&gt; &lt;dbl&gt;     &lt;int&gt; &lt;int&gt;\n 1     53 12.5          2    18\n 2    112 14.1          0    14\n 3    205 -1.71         0    14\n 4    235 -5.36         0    14\n 5    255 -9.47         0    15\n 6    268 38.6          1    15\n 7    292  6.57         0    21\n 8    318 10.7          1    20\n 9    337 20.1          2    21\n10    370 17.5          0    11\n# ℹ 64 more rows",
    "crumbs": [
      "Home",
      "R",
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "notes/r4ds_2nd.html#data-tidying",
    "href": "notes/r4ds_2nd.html#data-tidying",
    "title": "R for Data Science (2e)",
    "section": "5. Data tidying",
    "text": "5. Data tidying\n\nTidy data\n\n“Happy families are all alike; every unhappy family is unhappy in its own way.” — Leo Tolstoy, “Tidy datasets are all alike, but every messy dataset is messy in its own way.” — Hadley Wickham\n\n\nlibrary(tidyverse)\nlibrary(ggthemes)\n\n\nOne of them, table1, will be much easier to work with inside the tidyverse because it’s tidy.\n\n\ntable1 # tidy!\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\n\nThere are three interrelated rules that make a dataset tidy: - Each variable is a column; each column is a variable., - Each observation is a row; each row is an observation., - Each value is a cell; each cell is a single value.\n\n\nWhy ensure that your data is tidy? There are two main advantages: - If you have a consistent data structure, it’s easier to learn the tools that work with it because they have an underlying uniformity., - There’s a specific advantage to placing variables in columns because it allows R’s vectorized nature to shine.\n\n\n# Compute rate per 10,000\ntable1 |&gt;\n  mutate(rate = cases / population * 10000)\n\n# A tibble: 6 × 5\n  country      year  cases population  rate\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071 0.373\n2 Afghanistan  2000   2666   20595360 1.29 \n3 Brazil       1999  37737  172006362 2.19 \n4 Brazil       2000  80488  174504898 4.61 \n5 China        1999 212258 1272915272 1.67 \n6 China        2000 213766 1280428583 1.67 \n\ntable1 |&gt; \n  group_by(year) |&gt; \n  summarize(total_cases = sum(cases))\n\n# A tibble: 2 × 2\n   year total_cases\n  &lt;dbl&gt;       &lt;dbl&gt;\n1  1999      250740\n2  2000      296920\n\nggplot(table1, aes(x = year, y = cases)) +\n  geom_line(aes(group = country), color = \"grey50\") +\n  geom_point(aes(color = country, shape = country)) +\n  scale_x_continuous(breaks = c(1999, 2000)) # x-axis breaks at 1999 and 2000\n\n\n\n\n\n\n\n\n\n\n5.2.1(연습문제)\n\n2\n\ntable2 |&gt;\n  pivot_wider(\n    names_from = type,\n    values_from = count\n  ) |&gt; \n  mutate(rate = cases / population * 10000)\n\n# A tibble: 6 × 5\n  country      year  cases population  rate\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071 0.373\n2 Afghanistan  2000   2666   20595360 1.29 \n3 Brazil       1999  37737  172006362 2.19 \n4 Brazil       2000  80488  174504898 4.61 \n5 China        1999 212258 1272915272 1.67 \n6 China        2000 213766 1280428583 1.67 \n\n\n\ntable3 |&gt;\n  separate_wider_delim(\n    cols = rate, \n    delim = \"/\", \n    names = c(\"cases\", \"population\"),\n  ) |&gt;\n  mutate(\n    cases = as.numeric(cases),\n    population = as.numeric(population),\n    rate = cases / population * 10000\n  )\n\n# A tibble: 6 × 5\n  country      year  cases population  rate\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071 0.373\n2 Afghanistan  2000   2666   20595360 1.29 \n3 Brazil       1999  37737  172006362 2.19 \n4 Brazil       2000  80488  174504898 4.61 \n5 China        1999 212258 1272915272 1.67 \n6 China        2000 213766 1280428583 1.67 \n\n\n\n\n\nLengthening data\nThe principles of tidy data might seem so obvious that you wonder if you’ll ever encounter a dataset that isn’t tidy. Unfortunately, however, most real data is untidy. There are two main reasons: - Data is often organized to facilitate some goal other than analysis. For example, it’s common for data to be structured to make data entry, not analysis, easy. - Most people aren’t familiar with the principles of tidy data, and it’s hard to derive them yourself unless you spend a lot of time working with data.\nThis means that most real analyses will require at least a little tidying. You’ll begin by figuring out what the underlying variables and observations are. Sometimes this is easy; other times you’ll need to consult with the people who originally generated the data. Next, you’ll pivot your data into a tidy form, with variables in the columns and observations in the rows.\n\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\"\n  )\n\n# A tibble: 24,092 × 5\n   artist track                   date.entered week   rank\n   &lt;chr&gt;  &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk8      NA\n 9 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk9      NA\n10 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk10     NA\n# ℹ 24,082 more rows\n\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# ℹ 5,297 more rows\n\nbillboard_longer &lt;- billboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  ) |&gt; \n  mutate(\n    week = parse_number(week)\n  )\n\nbillboard_longer |&gt; \n  ggplot(aes(x = week, y = rank, group = track)) + \n  geom_line(alpha = 0.25) + \n  scale_y_reverse()\n\n\n\n\n\n\n\n\n\n\nHow does pivoting work?\n\ndf &lt;- tribble(\n  ~id,  ~bp1, ~bp2,\n   \"A\",  100,  120,\n   \"B\",  140,  115,\n   \"C\",  120,  125\n)\n\ndf |&gt; \n  pivot_longer(\n    cols = bp1:bp2,\n    names_to = \"measurement\",\n    values_to = \"value\"\n  )\n\n# A tibble: 6 × 3\n  id    measurement value\n  &lt;chr&gt; &lt;chr&gt;       &lt;dbl&gt;\n1 A     bp1           100\n2 A     bp2           120\n3 B     bp1           140\n4 B     bp2           115\n5 C     bp1           120\n6 C     bp2           125\n\n\n\n\nMany variables in column names\n\n[…] To organize these six pieces of information in six separate columns, we use pivot_longer() with a vector of column names for names_to and instructors for splitting the original variable names into pieces for names_sep as well as a column name for values_to\n\n\nwho2 |&gt; \n  pivot_longer(\n    cols = !(country:year),\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n    names_sep = \"_\",\n    values_to = \"count\"\n  )\n\n# A tibble: 405,440 × 6\n   country      year diagnosis gender age   count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 Afghanistan  1980 sp        m      014      NA\n 2 Afghanistan  1980 sp        m      1524     NA\n 3 Afghanistan  1980 sp        m      2534     NA\n 4 Afghanistan  1980 sp        m      3544     NA\n 5 Afghanistan  1980 sp        m      4554     NA\n 6 Afghanistan  1980 sp        m      5564     NA\n 7 Afghanistan  1980 sp        m      65       NA\n 8 Afghanistan  1980 sp        f      014      NA\n 9 Afghanistan  1980 sp        f      1524     NA\n10 Afghanistan  1980 sp        f      2534     NA\n# ℹ 405,430 more rows\n\n\n\n\nData and variable names in the column headers\n\nTo solve this problem we again need to supply a vector to names_to but this time we use the special “.value” sentinel; this isn’t the name of a variable but a unique value that tells pivot_longer() to do something different. This overrides the usual values_to argument to use the first component of the pivoted column name as a variable name in the output.\n\n\nhousehold |&gt; \n  pivot_longer(\n    cols = !family, \n    names_to = c(\".value\", \"child\"), \n    names_sep = \"_\", \n    values_drop_na = TRUE\n  )\n\n# A tibble: 9 × 4\n  family child  dob        name  \n   &lt;int&gt; &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt; \n1      1 child1 1998-11-26 Susan \n2      1 child2 2000-01-29 Jose  \n3      2 child1 1996-06-22 Mark  \n4      3 child1 2002-07-11 Sam   \n5      3 child2 2004-04-05 Seth  \n6      4 child1 2004-10-10 Craig \n7      4 child2 2009-08-27 Khai  \n8      5 child1 2000-12-05 Parker\n9      5 child2 2005-02-28 Gracie\n\n\n\n\nWidening data\n\ncms_patient_experience |&gt; \n  pivot_wider(\n    id_cols = starts_with(\"org\"),\n    names_from = measure_cd,\n    values_from = prf_rate\n  )\n\n# A tibble: 95 × 8\n   org_pac_id org_nm CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3 CAHPS_GRP_5 CAHPS_GRP_8\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 0446157747 USC C…          63          87          86          57          85\n 2 0446162697 ASSOC…          59          85          83          63          88\n 3 0547164295 BEAVE…          49          NA          75          44          73\n 4 0749333730 CAPE …          67          84          85          65          82\n 5 0840104360 ALLIA…          66          87          87          64          87\n 6 0840109864 REX H…          73          87          84          67          91\n 7 0840513552 SCL H…          58          83          76          58          78\n 8 0941545784 GRITM…          46          86          81          54          NA\n 9 1052612785 COMMU…          65          84          80          58          87\n10 1254237779 OUR L…          61          NA          NA          65          NA\n# ℹ 85 more rows\n# ℹ 1 more variable: CAHPS_GRP_12 &lt;dbl&gt;\n\n\n\ndf &lt;- tribble(\n  ~id, ~measurement, ~value,\n  \"A\",        \"bp1\",    100,\n  \"B\",        \"bp1\",    140,\n  \"B\",        \"bp2\",    115, \n  \"A\",        \"bp2\",    120,\n  \"A\",        \"bp3\",    105\n)\n\ndf |&gt; \n  pivot_wider(\n    names_from = measurement,\n    values_from = value\n  )\n\n# A tibble: 2 × 4\n  id      bp1   bp2   bp3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A       100   120   105\n2 B       140   115    NA\n\ndf |&gt; \n  distinct(measurement) |&gt; \n  pull()\n\n[1] \"bp1\" \"bp2\" \"bp3\"\n\ndf |&gt; \n  select(-measurement, -value) |&gt; \n  distinct()\n\n# A tibble: 2 × 1\n  id   \n  &lt;chr&gt;\n1 A    \n2 B    \n\ndf |&gt; \n  select(-measurement, -value) |&gt; \n  distinct() |&gt; \n  mutate(x = NA, y = NA, z = NA)\n\n# A tibble: 2 × 4\n  id    x     y     z    \n  &lt;chr&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;\n1 A     NA    NA    NA   \n2 B     NA    NA    NA   \n\n\n\ndf &lt;- tribble(\n  ~id, ~measurement, ~value,\n  \"A\",        \"bp1\",    100,\n  \"A\",        \"bp1\",    102,\n  \"A\",        \"bp2\",    120,\n  \"B\",        \"bp1\",    140, \n  \"B\",        \"bp2\",    115\n)\n\ndf |&gt;\n  pivot_wider(\n    names_from = measurement,\n    values_from = value\n  )\n\nWarning: Values from `value` are not uniquely identified; output will contain list-cols.\n• Use `values_fn = list` to suppress this warning.\n• Use `values_fn = {summary_fun}` to summarise duplicates.\n• Use the following dplyr code to identify duplicates.\n  {data} |&gt;\n  dplyr::summarise(n = dplyr::n(), .by = c(id, measurement)) |&gt;\n  dplyr::filter(n &gt; 1L)\n\n\n# A tibble: 2 × 3\n  id    bp1       bp2      \n  &lt;chr&gt; &lt;list&gt;    &lt;list&gt;   \n1 A     &lt;dbl [2]&gt; &lt;dbl [1]&gt;\n2 B     &lt;dbl [1]&gt; &lt;dbl [1]&gt;\n\ndf |&gt; \n  group_by(id, measurement) |&gt; \n  summarize(n = n(), .groups = \"drop\") |&gt; \n  filter(n &gt; 1)\n\n# A tibble: 1 × 3\n  id    measurement     n\n  &lt;chr&gt; &lt;chr&gt;       &lt;int&gt;\n1 A     bp1             2",
    "crumbs": [
      "Home",
      "R",
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "notes/r4ds_2nd.html#workflow---scripts-and-projects",
    "href": "notes/r4ds_2nd.html#workflow---scripts-and-projects",
    "title": "R for Data Science (2e)",
    "section": "6. Workflow - scripts and projects",
    "text": "6. Workflow - scripts and projects\n\nscripts and projects give you a solid workflow that will serve you well in the future: - Create one RStudio project for each data analysis project., - Save your scripts (with informative names) in the project, edit them, run them in bits or as a whole., - Restart R frequently to make sure you’ve captured everything in your scripts., - Only ever use relative paths, not absolute paths., - Then everything you need is in one place and cleanly separated from all the other projects that you are working on.",
    "crumbs": [
      "Home",
      "R",
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "notes/r4ds_2nd.html#reading-data-from-a-file",
    "href": "notes/r4ds_2nd.html#reading-data-from-a-file",
    "title": "R for Data Science (2e)",
    "section": "7. Reading data from a file",
    "text": "7. Reading data from a file\n\nstudents &lt;- read_csv(\"data/students.csv\")\n\nRows: 6 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstudents &lt;- read_csv(\"data/students.csv\", na = c(\"N/A\", \"\"))\n\nRows: 6 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nstudents |&gt; \n  rename(\n    student_id = `Student ID`,\n    full_name = `Full Name`\n  )\n\n# A tibble: 6 × 5\n  student_id full_name        favourite.food     mealPlan            AGE  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents |&gt; janitor::clean_names()\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents |&gt;\n  janitor::clean_names() |&gt;\n  mutate(meal_plan = factor(meal_plan))\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents &lt;- students |&gt;\n  janitor::clean_names() |&gt;\n  mutate(\n    meal_plan = factor(meal_plan),\n    age = parse_number(if_else(age == \"five\", \"5\", age))\n  )\n\n\n7.2.4(연습문제)\n\nannoying &lt;- tibble(\n  `1` = 1:10,\n  `2` = `1` * 2 + rnorm(length(`1`))\n)\n\nannoying |&gt;\n  select(`1`)\n\n# A tibble: 10 × 1\n     `1`\n   &lt;int&gt;\n 1     1\n 2     2\n 3     3\n 4     4\n 5     5\n 6     6\n 7     7\n 8     8\n 9     9\n10    10\n\nggplot(annoying, aes(x = `2`, y = `1`)) +\n  geom_point()\n\n\n\n\n\n\n\nannoying |&gt;\n  mutate(`3` = `2` / `1`)\n\n# A tibble: 10 × 3\n     `1`   `2`   `3`\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  2.95  2.95\n 2     2  4.84  2.42\n 3     3  6.36  2.12\n 4     4  7.37  1.84\n 5     5  9.79  1.96\n 6     6 11.0   1.83\n 7     7 14.4   2.06\n 8     8 16.4   2.04\n 9     9 17.7   1.96\n10    10 20.0   2.00\n\nannoying |&gt;\n  mutate(`3` = `2` / `1`) |&gt;\n  rename(\n    \"one\" = `1`,\n    \"two\" = `2`,\n    \"three\" = `3`\n  )\n\n# A tibble: 10 × 3\n     one   two three\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  2.95  2.95\n 2     2  4.84  2.42\n 3     3  6.36  2.12\n 4     4  7.37  1.84\n 5     5  9.79  1.96\n 6     6 11.0   1.83\n 7     7 14.4   2.06\n 8     8 16.4   2.04\n 9     9 17.7   1.96\n10    10 20.0   2.00\n\n\n\n\nData entry\n\ntribble(\n  ~x, ~y, ~z,\n  1, \"h\", 0.08,\n  2, \"m\", 0.83,\n  5, \"g\", 0.60\n)\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6",
    "crumbs": [
      "Home",
      "R",
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "notes/r4ds_2nd.html#workflow---getting-help",
    "href": "notes/r4ds_2nd.html#workflow---getting-help",
    "title": "R for Data Science (2e)",
    "section": "8. Workflow - getting help",
    "text": "8. Workflow - getting help\n\nGoogle is your friend\n\n[…] If you get an error message and you have no idea what it means, try googling it! Chances are that someone else has been confused by it in the past, and there will be help somewhere on the web. (If the error message isn’t in English, run Sys.setenv(LANGUAGE = “en”) and re-run the code; you’re more likely to find help for English error messages.)\n\n\n\nMaking a reprex\n\nFirst, you need to make your code reproducible. This means that you need to capture everything, i.e. include any library() calls and create all necessary objects. The easiest way to make sure you’ve done this is using the reprex package.\n\n\ny &lt;- 1:4\nmean(y)\n\n[1] 2.5\n\nreprex::reprex(y)\n\nℹ Non-interactive session, setting `html_preview = FALSE`.\n\n\nℹ Rendering reprex...\n\n\nCLIPR_ALLOW has not been set, so clipr will not run interactively\n\n\n\nThis text is formatted in a special way, called Markdown, which can be pasted to sites like StackOverflow or Github and they will automatically render it to look like code. Here’s what that Markdown would look like rendered on GitHub:\n\n\ndput(mtcars)\n\nstructure(list(mpg = c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3, \n24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4, \n30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8, \n19.7, 15, 21.4), cyl = c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, \n8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4), \n    disp = c(160, 160, 108, 258, 360, 225, 360, 146.7, 140.8, \n    167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440, 78.7, 75.7, \n    71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1, 351, 145, \n    301, 121), hp = c(110, 110, 93, 110, 175, 105, 245, 62, 95, \n    123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150, \n    150, 245, 175, 66, 91, 113, 264, 175, 335, 109), drat = c(3.9, \n    3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92, \n    3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08, 4.93, 4.22, 3.7, 2.76, \n    3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11\n    ), wt = c(2.62, 2.875, 2.32, 3.215, 3.44, 3.46, 3.57, 3.19, \n    3.15, 3.44, 3.44, 4.07, 3.73, 3.78, 5.25, 5.424, 5.345, 2.2, \n    1.615, 1.835, 2.465, 3.52, 3.435, 3.84, 3.845, 1.935, 2.14, \n    1.513, 3.17, 2.77, 3.57, 2.78), qsec = c(16.46, 17.02, 18.61, \n    19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3, 18.9, 17.4, 17.6, \n    18, 17.98, 17.82, 17.42, 19.47, 18.52, 19.9, 20.01, 16.87, \n    17.3, 15.41, 17.05, 18.9, 16.7, 16.9, 14.5, 15.5, 14.6, 18.6\n    ), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, \n    0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1), am = c(1, \n    1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, \n    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), gear = c(4, 4, 4, 3, \n    3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, \n    3, 3, 4, 5, 5, 5, 5, 5, 4), carb = c(4, 4, 1, 1, 2, 1, 4, \n    2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1, \n    2, 2, 4, 6, 8, 2)), row.names = c(\"Mazda RX4\", \"Mazda RX4 Wag\", \n\"Datsun 710\", \"Hornet 4 Drive\", \"Hornet Sportabout\", \"Valiant\", \n\"Duster 360\", \"Merc 240D\", \"Merc 230\", \"Merc 280\", \"Merc 280C\", \n\"Merc 450SE\", \"Merc 450SL\", \"Merc 450SLC\", \"Cadillac Fleetwood\", \n\"Lincoln Continental\", \"Chrysler Imperial\", \"Fiat 128\", \"Honda Civic\", \n\"Toyota Corolla\", \"Toyota Corona\", \"Dodge Challenger\", \"AMC Javelin\", \n\"Camaro Z28\", \"Pontiac Firebird\", \"Fiat X1-9\", \"Porsche 914-2\", \n\"Lotus Europa\", \"Ford Pantera L\", \"Ferrari Dino\", \"Maserati Bora\", \n\"Volvo 142E\"), class = \"data.frame\")\n\nreprex::reprex(mtcars)\n\nℹ Non-interactive session, setting `html_preview = FALSE`.\n\n\nℹ Rendering reprex...\n\n\n\nSpend a little bit of time ensuring that your code is easy for others to read: 1) Make sure you’ve used spaces and your variable names are concise yet informative. 2) Use comments to indicate where your problem lies. 3) Do your best to remove everything that is not related to the problem. 4) The shorter your code is, the easier it is to understand and the easier it is to fix.\n\n\nlibrary(tidyverse)",
    "crumbs": [
      "Home",
      "R",
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "notes/r4ds_2nd.html#layers",
    "href": "notes/r4ds_2nd.html#layers",
    "title": "R for Data Science (2e)",
    "section": "9. Layers",
    "text": "9. Layers\n\nAesthetic mappings\n\nUsing alpha for a discrete variable is not advised.\n\n\n# Left\nggplot(mpg, aes(x = displ, y = hwy, size = class)) +\n  geom_point()\n\nWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n\n\n\n# Right\nggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +\n  geom_point()\n\nWarning: Using alpha for a discrete variable is not advised.\n\n\n\n\n\n\n\n\n\n\n\nGeometric objects\n\nggplot2 will treat them as local mappings for the layer. It will use these mappings to extend or overwrite the global mappings for that layer only. This makes it possible to display different aesthetics in different layers.\n\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(aes(color = class)) + \n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nIf this sounds strange, we can make it clearer by overlaying the lines on top of the raw data and then coloring everything according to drv.\n\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) + \n  geom_point() +\n  geom_smooth(aes(linetype = drv))\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nThe best place to get a comprehensive overview of all of the geoms ggplot2 offers, as well as all functions in the package, is the reference page: https://ggplot2.tidyverse.org/reference. To learn more about any single geom, use the help (e.g., ?geom_smooth).\n\n\n\nFacets\n\nBy default each of the facets share the same scale and range for x and y axes. This is useful when you want to compare data across facets but it can be limiting when you want to visualize the relationship within each facet better. Setting the scales argument in a faceting function to “free_x” will allow for different scales of x-axis across columns, “free_y” will allow for different scales on y-axis across rows, and “free” will allow both.\n\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_grid(drv ~ cyl, scales = \"free\")\n\n\n\n\n\n\n\n\n\n\nStatistical transformations\n\nThe algorithm used to calculate new values for a graph is called a stat, short for statistical transformation. Figure 9.2 shows how this process works with geom_bar().\n\n\nggplot(diamonds, aes(x = cut)) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\nEvery geom has a default stat; and every stat has a default geom. This means that you can typically use geoms without worrying about the underlying statistical transformation. However, there are three reasons why you might need to use a stat explicitly:\n\n\nggplot(diamonds) + \n  stat_summary(\n    aes(x = cut, y = depth),\n    fun.min = min,\n    fun.max = max,\n    fun = median\n  )\n\n\n\n\n\n\n\n\n\n\nPosition adjustments\n\nThe stacking is performed automatically using the position adjustment specified by the position argument. If you don’t want a stacked bar chart, you can use one of three other options: “identity”, “dodge” or “fill”.\n\n\n# Left\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n# Right\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\n\n\n\n\nCoordinate systems\n\ncoord_quickmap() sets the aspect ratio correctly for geographic maps. This is very important if you’re plotting spatial data with ggplot2. We don’t have the space to discuss maps in this book, but you can learn more in the Maps chapter of ggplot2: Elegant graphics for data analysis.\n\n\nbar &lt;- ggplot(data = diamonds) + \n  geom_bar(\n    mapping = aes(x = clarity, fill = clarity), \n    show.legend = FALSE,\n    width = 1\n  ) + \n  theme(aspect.ratio = 1)\n\nbar + coord_flip()\n\n\n\n\n\n\n\nbar + coord_polar()\n\n\n\n\n\n\n\n\n\n\nThe layered grammar of graphics\n\nIf you’d like to learn more about the theoretical underpinnings of ggplot2, you might enjoy reading “The Layered Grammar of Graphics”, the scientific paper that describes the theory of ggplot2 in detail.\n\n\nggplot(data = &lt;DATA&gt;) + \n  &lt;GEOM_FUNCTION&gt;(\n     mapping = aes(&lt;MAPPINGS&gt;),\n     stat = &lt;STAT&gt;, \n     position = &lt;POSITION&gt;\n  ) +\n  &lt;COORDINATE_FUNCTION&gt; +\n  &lt;FACET_FUNCTION&gt;\n\n\nstudents &lt;- read_csv(\"data/students.csv\")\n\nRows: 6 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstudents |&gt; janitor::clean_names()\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents |&gt;\n  janitor::clean_names() |&gt;\n  mutate(meal_plan = factor(meal_plan))\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents &lt;- students |&gt;\n  janitor::clean_names() |&gt;\n  mutate(\n    meal_plan = factor(meal_plan),\n    age = parse_number(if_else(age == \"five\", \"5\", age))\n  )\n\n\n\nData entry\n\ntribble(\n  ~x, ~y, ~z,\n  1, \"h\", 0.08,\n  2, \"m\", 0.83,\n  5, \"g\", 0.60\n)\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6",
    "crumbs": [
      "Home",
      "R",
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "notes/r4ds_2nd.html#exploratory-data-analysis",
    "href": "notes/r4ds_2nd.html#exploratory-data-analysis",
    "title": "R for Data Science (2e)",
    "section": "10. Exploratory data analysis",
    "text": "10. Exploratory data analysis\n\nThis chapter will show you how to use visualization and transformation to explore your data in a systematic way, a task that statisticians call exploratory data analysis, or EDA for short. EDA is an iterative cycle. You: 1) Generate questions about your data. 2) Search for answers by visualizing, transforming, and modelling your data. 3) Use what you learn to refine your questions and/or generate new questions.\n\n\nEDA is a state of mind.\n\n\nlibrary(tidyverse)\n\n\nQuestions\n\n“There are no routine statistical questions, only questionable statistical routines.” — Sir David Cox\n\n\n“Far better an approximate answer to the right question, which is often vague, than an exact answer to the wrong question, which can always be made precise.” — John Tukey\n\n\n\nVariation\n\nThe key to asking good follow-up questions will be to rely on your curiosity (What do you want to learn more about?) as well as your skepticism (How could this be misleading?).\n\n\nggplot(diamonds, aes(x = carat)) + \n  geom_histogram(binwidth = 0.5)\n\n\n\n\n\n\n\n\n\nHowever, if they have a substantial effect on your results, you shouldn’t drop them without justification. You’ll need to figure out what caused them (e.g., a data entry error) and disclose that you removed them in your write-up.\n\n\n\n10.3.3(연습문제)\n\n1\n\nsummary(select(diamonds, x, y, z))\n\n       x                y                z         \n Min.   : 0.000   Min.   : 0.000   Min.   : 0.000  \n 1st Qu.: 4.710   1st Qu.: 4.720   1st Qu.: 2.910  \n Median : 5.700   Median : 5.710   Median : 3.530  \n Mean   : 5.731   Mean   : 5.735   Mean   : 3.539  \n 3rd Qu.: 6.540   3rd Qu.: 6.540   3rd Qu.: 4.040  \n Max.   :10.740   Max.   :58.900   Max.   :31.800  \n\nggplot(diamonds) +\n  geom_histogram(mapping = aes(x = x), binwidth = 0.01)\n\n\n\n\n\n\n\n\nggplot(diamonds) +\n  geom_histogram(mapping = aes(x = y), binwidth = 0.01)\n\nggplot(diamonds) +\n  geom_histogram(mapping = aes(x = z), binwidth = 0.01)\n\n\n\n\n\n\n\n\n\n\n2\n\nggplot(filter(diamonds, price &lt; 2500), aes(x = price)) +\n  geom_histogram(binwidth = 10, center = 0)\n\n\n\n\n\n\n\n\n\nggplot(filter(diamonds), aes(x = price)) +\n  geom_histogram(binwidth = 100, center = 0)\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  mutate(ending = price %% 10) %&gt;%\n  ggplot(aes(x = ending)) +\n  geom_histogram(binwidth = 1, center = 0)\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  mutate(ending = price %% 100) %&gt;%\n  ggplot(aes(x = ending)) +\n  geom_histogram(binwidth = 1)\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  mutate(ending = price %% 1000) %&gt;%\n  filter(ending &gt;= 500, ending &lt;= 800) %&gt;%\n  ggplot(aes(x = ending)) +\n  geom_histogram(binwidth = 1)\n\n\n\n\n\n\n\n\n\n\n3\n\ndiamonds %&gt;%\n  filter(carat &gt;= 0.99, carat &lt;= 1) %&gt;%\n  count(carat)\n\n# A tibble: 2 × 2\n  carat     n\n  &lt;dbl&gt; &lt;int&gt;\n1  0.99    23\n2  1     1558\n\n\n\ndiamonds %&gt;%\n  filter(carat &gt;= 0.9, carat &lt;= 1.1) %&gt;%\n  count(carat) %&gt;%\n  print(n = Inf)\n\n# A tibble: 21 × 2\n   carat     n\n   &lt;dbl&gt; &lt;int&gt;\n 1  0.9   1485\n 2  0.91   570\n 3  0.92   226\n 4  0.93   142\n 5  0.94    59\n 6  0.95    65\n 7  0.96   103\n 8  0.97    59\n 9  0.98    31\n10  0.99    23\n11  1     1558\n12  1.01  2242\n13  1.02   883\n14  1.03   523\n15  1.04   475\n16  1.05   361\n17  1.06   373\n18  1.07   342\n19  1.08   246\n20  1.09   287\n21  1.1    278\n\n\n\n\n4\n\nggplot(diamonds) +\n  geom_histogram(mapping = aes(x = price)) +\n  coord_cartesian(xlim = c(100, 5000), ylim = c(0, 3000))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nggplot(diamonds) +\n  geom_histogram(mapping = aes(x = price)) +\n  xlim(100, 5000) +\n  ylim(0, 3000)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 14714 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 6 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\n\n\nUnusual values\n\nIf you’ve encountered unusual values in your dataset, and simply want to move on to the rest of your analysis, you have two options. Drop the entire row with the strange values: We don’t recommend this option because one invalid value doesn’t imply that all the other values for that observation are also invalid. Additionally, if you have low quality data, by the time that you’ve applied this approach to every variable you might find that you don’t have any data left! Instead, we recommend replacing the unusual values with missing values. The easiest way to do this is to use mutate() to replace the variable with a modified copy. You can use the if_else() function to replace unusual values with NA:\n\n\n\n10.4.1(연습문제)\n\n1\n\ndiamonds2 &lt;- diamonds %&gt;%\n  mutate(y = ifelse(y &lt; 3 | y &gt; 20, NA, y))\n\nggplot(diamonds2, aes(x = y)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 9 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  mutate(cut = if_else(runif(n()) &lt; 0.1, NA_character_, as.character(cut))) %&gt;%\n  ggplot() +\n  geom_bar(mapping = aes(x = cut))\n\n\n\n\n\n\n\n\n\n\n2\n\nmean(c(0, 1, 2, NA), na.rm = TRUE)\n\n[1] 1\n\nsum(c(0, 1, 2, NA), na.rm = TRUE)\n\n[1] 3\n\n\n\n\n\nCovariation\n\nIf variation describes the behavior within a variable, covariation describes the behavior between variables. Covariation is the tendency for the values of two or more variables to vary together in a related way. The best way to spot covariation is to visualize the relationship between two or more variables.\n\n\n10.5.1.1(연습문제)\n\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n\nTwo categorical variables\n\nTo visualize the covariation between categorical variables, you’ll need to count the number of observations for each combination of levels of these categorical variables. One way to do that is to rely on the built-in geom_count():\n\n\nggplot(diamonds, aes(x = cut, y = color)) +\n  geom_count()\n\n\n\n\n\n\n\ndiamonds |&gt; \n  count(color, cut)\n\n# A tibble: 35 × 3\n   color cut           n\n   &lt;ord&gt; &lt;ord&gt;     &lt;int&gt;\n 1 D     Fair        163\n 2 D     Good        662\n 3 D     Very Good  1513\n 4 D     Premium    1603\n 5 D     Ideal      2834\n 6 E     Fair        224\n 7 E     Good        933\n 8 E     Very Good  2400\n 9 E     Premium    2337\n10 E     Ideal      3903\n# ℹ 25 more rows\n\ndiamonds |&gt; \n  count(color, cut) |&gt;  \n  ggplot(aes(x = color, y = cut)) +\n  geom_tile(aes(fill = n))\n\n\n\n\n\n\n\n\n\n\n10.5.2.1(연습문제)\n\nNone\nNone\nNone\n\n\n\nTwo numerical variables\n\nYou’ve already seen one great way to visualize the covariation between two numerical variables: draw a scatterplot with geom_point(). You can see covariation as a pattern in the points. For example, you can see a positive relationship between the carat size and price of a diamond: diamonds with more carats have a higher price. The relationship is exponential.\n\n\nsmaller &lt;- diamonds |&gt; \n  filter(carat &lt; 3)\nggplot(smaller, aes(x = carat, y = price)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\ngeom_bin2d() and geom_hex() divide the coordinate plane into 2d bins and then use a fill color to display how many points fall into each bin. geom_bin2d() creates rectangular bins. geom_hex() creates hexagonal bins. You will need to install the hexbin package to use geom_hex().\n\n\nggplot(smaller, aes(x = carat, y = price)) + \n  geom_point(alpha = 1 / 100)\n\n\n\n\n\n\n\nggplot(smaller, aes(x = carat, y = price)) +\n  geom_bin2d()\n\n\n\n\n\n\n\n# install.packages(\"hexbin\")\nggplot(smaller, aes(x = carat, y = price)) +\n  geom_hex()\n\nWarning: Computation failed in `stat_binhex()`.\nCaused by error in `compute_group()`:\n! The package \"hexbin\" is required for `stat_bin_hex()`.\n\n\n\n\n\n\n\n\nggplot(smaller, aes(x = carat, y = price)) + \n  geom_boxplot(aes(group = cut_width(carat, 0.1)))\n\n\n\n\n\n\n\n\n\n\n10.5.3.1(연습문제)\n\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n\n\nPatterns and models\n\nIf a systematic relationship exists between two variables it will appear as a pattern in the data. If you spot a pattern, ask yourself: 1) Could this pattern be due to coincidence (i.e. random chance)? 2) How can you describe the relationship implied by the pattern? 3) How strong is the relationship implied by the pattern? 4) What other variables might affect the relationship? 5) Does the relationship change if you look at individual subgroups of the data?\n\n\nPatterns in your data provide clues about relationships, i.e., they reveal covariation. If you think of variation as a phenomenon that creates uncertainty, covariation is a phenomenon that reduces it. If two variables covary, you can use the values of one variable to make better predictions about the values of the second. If the covariation is due to a causal relationship (a special case), then you can use the value of one variable to control the value of the second.\n\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n\n\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n\ndiamonds &lt;- diamonds |&gt;\n  mutate(\n    log_price = log(price),\n    log_carat = log(carat)\n  )\n\ndiamonds_fit &lt;- linear_reg() |&gt;\n  fit(log_price ~ log_carat, data = diamonds)\n\ndiamonds_aug &lt;- augment(diamonds_fit, new_data = diamonds) |&gt;\n  mutate(.resid = exp(.resid))\n\nggplot(diamonds_aug, aes(x = carat, y = .resid)) + \n  geom_point()\n\n\n\n\n\n\n\nggplot(diamonds_aug, aes(x = cut, y = .resid)) + \n  geom_boxplot()",
    "crumbs": [
      "Home",
      "R",
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Preface",
    "section": "",
    "text": "꽤 오랫동안 R을 사용했습니다. 정확히는 협업에서 R을 사용했습니다. 데이터 분석이나 추천시스템을 전문적으로 배우지 못하고, 현장에서 추천시스템을 개발/개선하는 업무를 진행했기 때문에 다양한 도구를 많이 사용했습니다. 그 중에서 데이터를 다루는 분들과 의사소통을 위해서 가장 많이 활용했던 도구가 R과 Excel 입니다. 기존에 관련 연구자 및 분석가분들과 함께 공부를 하면서 알게된 내용을 간단하게 정리해둔 문서입니다. 이 문서는 R을 사용하는 분들이나 데이터 분석을 하시는 분들에게 도움이 되었으면 좋겠습니다.\nP.S : 해당 저장소는 R언어를 사용하는 분들의 관례에 따라 renv를 사용하고 있습니다. 해당 프로젝트를 renv를 사용하세요.",
    "crumbs": [
      "Home",
      "Preface"
    ]
  },
  {
    "objectID": "index.html#소개",
    "href": "index.html#소개",
    "title": "Preface",
    "section": "",
    "text": "꽤 오랫동안 R을 사용했습니다. 정확히는 협업에서 R을 사용했습니다. 데이터 분석이나 추천시스템을 전문적으로 배우지 못하고, 현장에서 추천시스템을 개발/개선하는 업무를 진행했기 때문에 다양한 도구를 많이 사용했습니다. 그 중에서 데이터를 다루는 분들과 의사소통을 위해서 가장 많이 활용했던 도구가 R과 Excel 입니다. 기존에 관련 연구자 및 분석가분들과 함께 공부를 하면서 알게된 내용을 간단하게 정리해둔 문서입니다. 이 문서는 R을 사용하는 분들이나 데이터 분석을 하시는 분들에게 도움이 되었으면 좋겠습니다.\nP.S : 해당 저장소는 R언어를 사용하는 분들의 관례에 따라 renv를 사용하고 있습니다. 해당 프로젝트를 renv를 사용하세요.",
    "crumbs": [
      "Home",
      "Preface"
    ]
  },
  {
    "objectID": "notes/ggplot2.html",
    "href": "notes/ggplot2.html",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "R 패키지를 활용하여 다양한 작업을 할 수 있지만, 저는 그 중에서 데이터 분석과 통계 분석 및 모델을 기반으로 많은 업무를 진행하였습니다. 따라서 제가 생각하기 R 패키지 중에서 가장 활용 용도가 높다고 생각하는 ggplot2을 사용해서 간단한 R 코드를 연습하고, 데이터 시각화를 진행해보겠습니다.\n제가 지금까지 사용했던 모든 그래프 도구 중에서 가장 멋진 라이브러리 입니다. 모든 그래프 도구가 나름의 멋짐을 가지고 있지만, ggplot2가 가져다 주는 조합의 묘미가 굉장히 흥미롭게 재미있습니다. 그리고 R을 사용함에 있어서 ggplot2를 잘 활용하면 좋은 데이터를 기반으로 더 나은 의사소통을 할 수 있습니다.",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#준비",
    "href": "notes/ggplot2.html#준비",
    "title": "간단한 그래프(ggplot2)",
    "section": "준비",
    "text": "준비\nggplot2 패키지를 사용하기 위해서는 아래와 같은 패키지를 설치하고 불러와야 합니다. 패키지 설치는 install.packages()를 사용하시면 됩니다. ggplot2, dplyr, readr은 tidyverse 패키지에 포함되어 있기 때문에, 일반적으로 tidyverse를 설치하실 때 대부분 설치되었있습니다. 만약 설치되어 있지 않다면 install.packages(\"tidyverse\")로 설치를 진행하시면 됩니다. ggthemes는 ggplot2의 테마를 추가 할 수 있는 패키지입니다.\n\nlibrary(ggplot2)\nlibrary(ggthemes) \nlibrary(dplyr) \nlibrary(readr)\nlibrary(forcats)\nlibrary(scales)\nlibrary(RColorBrewer)",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#데이터",
    "href": "notes/ggplot2.html#데이터",
    "title": "간단한 그래프(ggplot2)",
    "section": "데이터",
    "text": "데이터\n간단한 데이터를 생성하고, 이를 시각화하는 방법을 알아보겠습니다. 이 데이터는 (Mauricio Vargas Sepúlveda, 2023)에서 가져왔습니다.\n\nchilean_exports &lt;- \"year,product,export,percentage\n2006,copper,4335009500,81\n2006,others,1016726518,19\n2007,copper,9005361914,86\n2007,others,1523085299,14\n2008,copper,6907056354,80\n2008,others,1762684216,20\n2009,copper,10529811075,81\n2009,others,2464094241,19\n2010,copper,14828284450,85\n2010,others,2543015596,15\n2011,copper,15291679086,82\n2011,others,3447972354,18\n2012,copper,14630686732,80\n2012,others,3583968218,20\n2013,copper,15244038840,79\n2013,others,4051281128,21\n2014,copper,14703374241,78\n2014,others,4251484600,22\n2015,copper,13155922363,78\n2015,others,3667286912,22\n\"\nexports_data &lt;- read_csv(chilean_exports)\n\nRows: 20 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): product\ndbl (3): year, export, percentage\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#선-그래프",
    "href": "notes/ggplot2.html#선-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "선 그래프",
    "text": "선 그래프\n\ncolour &lt;- c(\"#40b8d0\", \"#b2d183\")\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product), data = exports_data) +\n  geom_line(linewidth = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_colour_manual(values = colour) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\"),\n        legend.key.size = unit(2, \"lines\")) +\n  geom_point(size = 3)\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\np1\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#영역-차트area-chart",
    "href": "notes/ggplot2.html#영역-차트area-chart",
    "title": "간단한 그래프(ggplot2)",
    "section": "영역 차트(Area Chart)",
    "text": "영역 차트(Area Chart)\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np2 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) + \n  geom_area() +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10), \n        axis.text.y = element_text(colour = \"black\", size = 10), \n        legend.key = element_rect(fill = \"white\", colour = \"white\"), \n        legend.position = \"bottom\", \n        legend.direction = \"horizontal\", \n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"), \n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T)) \np2\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#막대-그래프",
    "href": "notes/ggplot2.html#막대-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "막대 그래프",
    "text": "막대 그래프\n\nexports_data &lt;- exports_data %&gt;%\n  mutate(export_label = paste(round(export/1000000000,2), \"B\"))\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np3 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = export_label), position = position_stack(vjust = 0.5), colour = \"black\", family = \"Tahoma\", size = 3, show.legend = F) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\n\np3\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#누적-막대stacked-bar-그래프",
    "href": "notes/ggplot2.html#누적-막대stacked-bar-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "누적 막대(Stacked Bar) 그래프",
    "text": "누적 막대(Stacked Bar) 그래프\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np4 &lt;- ggplot(aes(y = percentage, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = paste0(percentage,\"%\")), position = position_stack(vjust = 0.5), colour = \"black\", family = \"MaruBuri Regular\", size = 4) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  scale_y_continuous(labels = dollar_format(suffix = \"%\", prefix = \"\")) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"Percentage\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\np4\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#산점도scatter",
    "href": "notes/ggplot2.html#산점도scatter",
    "title": "간단한 그래프(ggplot2)",
    "section": "산점도(Scatter)",
    "text": "산점도(Scatter)\n\ndata(airquality)\n\naq_trim &lt;- airquality %&gt;%\n  filter(Month %in% c(7,8,9)) %&gt;%\n  mutate(Month = factor(Month, labels = c(\"July\", \"August\", \"September\")))\n\nfill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np5 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\", legend.direction = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np5\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#가중-산점도weighted-scatter",
    "href": "notes/ggplot2.html#가중-산점도weighted-scatter",
    "title": "간단한 그래프(ggplot2)",
    "section": "가중 산점도(Weighted Scatter)",
    "text": "가중 산점도(Weighted Scatter)\n\nfill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np6 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, size = Wind, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", size = \"Wind Speed (mph) \", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"vertical\",\n    legend.key.size = unit(0.5, \"cm\"),\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np6\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#히스토그램histograms",
    "href": "notes/ggplot2.html#히스토그램histograms",
    "title": "간단한 그래프(ggplot2)",
    "section": "히스토그램(Histograms)",
    "text": "히스토그램(Histograms)\n\ndata(airquality)\nbarfill &lt;- \"#4271AE\"; barlines &lt;- \"#1F3552\"\n\np7 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 5, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  geom_vline(xintercept = 75, size = 1, colour = \"#FF3721\", linetype = \"dashed\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, linewidth = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np7\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"July\")))\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  facet_grid(. ~ Month.f, scales = \"free\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np7  \n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, fill = Month.f)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, position = \"identity\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_fill_brewer(palette = \"Accent\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\")) +\n  labs(fill = \"Month \")\np7\n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#밀집denstiy-그래프",
    "href": "notes/ggplot2.html#밀집denstiy-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "밀집(Denstiy) 그래프",
    "text": "밀집(Denstiy) 그래프\n\ndata(airquality)\n\np8 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_density(fill = \"#4271AE\", colour = \"#1F3552\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Density plot of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,6,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"June\", \"July\")))\n\np8 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, colour = Month.f)) +\n  geom_density(position = \"identity\", size = 1) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 200, 25), limits = c(0, 200)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_colour_brewer(palette = \"Accent\") +\n  labs(colour = \"Month \") +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 31 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#function-그래프",
    "href": "notes/ggplot2.html#function-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "Function 그래프",
    "text": "Function 그래프\n\nfuncShaded &lt;- function(x) {\n  y &lt;- dnorm(x, mean = 0.2, sd = 0.1)\n  y[x &lt; 0.2 | x &gt; (0.2 + 4 * 0.1)] &lt;- NA\n  return(y)\n}\n\np9 &lt;- ggplot(tibble(x = c(0, 1)), aes(x = x)) +\n  stat_function(fun = dnorm, args = list(0.2, 0.1),\n                aes(colour = \"Group 1 \"), size = 1.5) +\n  stat_function(fun = dnorm, args = list(0.7, 0.05),\n                aes(colour = \"Group 2 \"), size = 1.5) +\n  stat_function(fun = funcShaded, geom = \"area\", fill = \"#84CA72\", alpha = 0.2) +\n  scale_x_continuous(name = \"Probability\", breaks = seq(0, 1, 0.2), limits = c(0, 1)) +\n  scale_y_continuous(name = \"Frequency\") +\n  labs(title = \"Normal function curves of probabilities\") +\n  labs(colour = \"Groups \") +\n  scale_colour_brewer(palette = \"Accent\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np9\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "notes/ggplot2.html#박스-플롯boxplot",
    "href": "notes/ggplot2.html#박스-플롯boxplot",
    "title": "간단한 그래프(ggplot2)",
    "section": "박스 플롯(Boxplot)",
    "text": "박스 플롯(Boxplot)\n\ndata(airquality)\nfill &lt;- \"#4271AE\"; lines &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\np10 &lt;- ggplot(airquality, aes(x = Month, y = Ozone)) +\n  geom_boxplot(colour = lines, fill = fill, size = 1, notch = TRUE) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", size = .5),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"),\n    axis.title = element_text(face = \"bold\"),\n    axis.text.x = element_text(colour = \"black\", size = 11),\n    axis.text.y = element_text(colour = \"black\", size = 9))\np10\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nNotch went outside hinges\nℹ Do you want `notch = FALSE`?\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\nfill &lt;- \"#4271AE\"; line &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(\"Jul\", \"Aug\", \"Sep\")) %&gt;%\n  mutate(Temp.f = factor(ifelse(Temp &gt; mean(Temp), 1, 0),\n                         labels = c(\"Low temp \", \"High temp \")))\n\np10 &lt;- ggplot(airquality_trimmed, aes(x = Month, y = Ozone)) +\n  geom_boxplot(fill = fill, colour = line, alpha = 0.7) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 50), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"),\n        axis.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(size = 11)) +\n  facet_grid(. ~ Temp.f)\np10  \n\nWarning: Removed 11 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "ggplot",
      "간단한 그래프(ggplot2)"
    ]
  }
]