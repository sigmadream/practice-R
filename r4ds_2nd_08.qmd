---
title: Workflow - getting help
---

> 해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 @HadleyWickham2023 입니다.

[...] 답이 없는 문제를 발견하게 될 때, 어디서 도움을 받을 수 있을까요?

## Google is your friend

막막하다면 Google부터 시작하세요. 일반적으로 검색어에 "R", "tidyverse" 또는 "ggplot2"와 같은 추가적인 정보를 검색어에 포함하세요. Google은 오류 메시지에 특히 유용합니다. 오류 메시지가 표시되었는데 무슨 뜻인지 모르겠다면 Google에서 검색해 보세요! 만약, 오류 메시지가 영어로 되어 있지 않은 경우 `Sys.setenv(LANGUAGE = "en")`를 실행하고 코드를 다시 실행하면 오류가 영어로 출력됩니다.

구글과 함께  [Stack Overflow](https://stackoverflow.com)도 함께 참고하세요.

## Making a reprex

인터넷 검색에서 유용한 정보를 찾지 못했다면 재현 가능한 최소한의 예제를 뜻하는 reprex를 준비하는 것이 좋습니다. 좋은 reprex를 만들면 다른 사람들이 더 쉽게 도움을 줄 수 있고, 만드는 과정에서 스스로 문제를 파악할 수 있는 경우가 많습니다. 레프렉스를 만드는 데는 두 가지 부분이 있습니다.

- 첫째, 코드를 재현 가능하게 만들어야 합니다. 즉, 모든 library() 호출을 포함하고 필요한 모든 객체를 생성하는 등 모든 것을 캡처해야 합니다. 이를 확인하는 가장 쉬운 방법은 reprex 패키지를 사용하는 것입니다.

- 둘째, 최소한으로 만들어야 합니다. 문제와 직접 관련이 없는 모든 것을 제거하세요. 여기에는 일반적으로 실생활에서 직면하는 문제보다 훨씬 작고 단순한 R 개체를 만들거나 내장된 데이터를 사용하는 것이 포함됩니다.

많은 작업처럼 들립니다! 그럴 수도 있지만 그만한 보상이 있습니다.

- 80%의 경우, 훌륭한 레프렉스를 만들면 문제의 원인을 파악할 수 있습니다. 독립적이고 최소한의 예시를 작성하는 과정에서 스스로 질문에 답할 수 있는 경우가 얼마나 많은지 놀라울 정도입니다.

- 나머지 20%의 시간에는 다른 사람들이 쉽게 사용할 수 있는 방식으로 문제의 본질을 파악하게 됩니다. 이렇게 하면 도움을 받을 가능성이 크게 높아집니다!

수작업으로 reprex를 만들 때는 실수로 무언가를 놓치기 쉬우므로 다른 사람의 컴퓨터에서 코드를 실행할 수 없게 됩니다. tidyverse의 일부로 설치되는 reprex 패키지를 사용하면 이 문제를 방지할 수 있습니다. 

```{r}
y <- 1:4
mean(y)
```

그런 다음 기본 출력 형식이 GitHub용으로 지정된 reprex()를 호출합니다.

```{r}
reprex::reprex()
```


멋지게 렌더링된 HTML 미리 보기가 RStudio의 뷰어(RStudio를 사용하는 경우) 또는 기본 브라우저에 표시됩니다. 클립보드에 자동으로 복사됩니다. 이 텍스트는 마크다운이라는 방식으로 작성되며, 마크다운을 StackOverflow나 Github 같은 사이트에 붙여넣으면 코드처럼 보이도록 자동으로 렌더링됩니다. 

누구나 바로 복사하여 붙여넣고 실행할 수 있습니다. 예제를 재현 가능하게 만들려면 필수 패키지, 데이터, 코드 세 가지를 포함해야 합니다.

1. 예제에 필요한 패키지를 쉽게 확인할 수 있도록 스크립트의 맨 위에 패키지가 로드되어야 합니다. 패키지를 설치하거나 마지막으로 업데이트한 이후 수정된 버그를 발견했을 수 있으므로 각 패키지의 최신 버전을 사용하고 있는지 확인하기에 좋은 시기입니다. tidyverse에 있는 패키지의 경우 가장 쉽게 확인할 수 있는 방법은 tidyverse_update()를 실행하는 것입니다.

2. 데이터를 포함하는 가장 쉬운 방법은 dput()을 사용하여 데이터를 다시 생성하는 데 필요한 R 코드를 생성하는 것입니다. 예를 들어, R에서 mtcars 데이터 집합을 다시 만들려면 다음 단계를 수행합니다.

- R에서 `dput(mtcars)`를 실행합니다.
- 출력 복사
- reprex에서 mtcars <-를 입력한 다음 붙여넣습니다.

```{r}
dput(mtcars)
reprex::reprex(mtcars)
```

3. 다른 사람들이 코드를 쉽게 읽을 수 있도록 약간의 시간을 투자하세요.

- 변수 등을 올바로 사용했는지 확인하세요.
- 주석을 사용해서 문제가 발생한 부분에 적절한 정보를 추가하세요.
- 문제와 관련이 없는 모든 것은 제거하세요.

새로운 세션을 시작하고, 작성된 스크립트가 재현 가능한 예제인지 확인하세요. 만약, 재현 가능하지 않다면 유사한 예제를 만들 수 있도록 연습해야 합니다. 코드가 포함된 질문을 하는 법을 배우고, 재현 가능하도록 R과 관려된 기술에 시간을 투자하세요.


## Investing in yourself

문제가 발생하기 전에 문제를 해결할 수 있도록 준비하는 데 시간을 투자하세요. 사용하시는 라이브러리에 대해서 더 깊게 공부하시거나, 주변의 R 관련 커뮤니티를 방문하세요.

## Summary

이 장으로 이 책의 전체 게임 부분을 마무리합니다. 이제 데이터 과학 프로세스에서 가장 중요한 부분인 시각화, 변환, 정리 및 가져오기를 살펴보았습니다. 이제 전체 프로세스에 대한 전체적인 관점을 갖게 되었으니, 이제 작은 부분의 세부 사항을 살펴보기 시작하겠습니다.

이 책의 다음 파트인 시각화에서는 그래픽 문법을 자세히 살펴보고, ggplot2로 데이터 시각화를 만들고, 지금까지 배운 도구를 사용하여 탐색적 데이터 분석을 수행하는 방법을 보여주고, 커뮤니케이션을 위한 플롯을 만드는 모범 사례를 소개합니다.
