[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Preface",
    "section": "",
    "text": "꽤 오랫동안 R을 사용했습니다. 정확히는 협업에서 R을 사용했습니다. 데이터 분석이나 추천시스템을 전문적으로 배우지 못하고, 현장에서 추천시스템을 개발/개선하는 업무를 진행했기 때문에 다양한 도구를 많이 사용했습니다. 그 중에서 데이터를 다루는 분들과 의사소통을 위해서 가장 많이 활용했던 도구가 R과 Excel 입니다. 기존에 관련 연구자 및 분석가분들과 함께 공부를 하면서 알게된 내용을 간단하게 정리해둔 문서입니다. 이 문서는 R을 사용하는 분들이나 데이터 분석을 하시는 분들에게 도움이 되었으면 좋겠습니다.\nP.S : 해당 저장소는 R언어를 사용하는 분들의 관례에 따라 renv를 사용하고 있습니다. 해당 프로젝트를 renv를 사용하세요.",
    "crumbs": [
      "Home",
      "Preface"
    ]
  },
  {
    "objectID": "index.html#소개",
    "href": "index.html#소개",
    "title": "Preface",
    "section": "",
    "text": "꽤 오랫동안 R을 사용했습니다. 정확히는 협업에서 R을 사용했습니다. 데이터 분석이나 추천시스템을 전문적으로 배우지 못하고, 현장에서 추천시스템을 개발/개선하는 업무를 진행했기 때문에 다양한 도구를 많이 사용했습니다. 그 중에서 데이터를 다루는 분들과 의사소통을 위해서 가장 많이 활용했던 도구가 R과 Excel 입니다. 기존에 관련 연구자 및 분석가분들과 함께 공부를 하면서 알게된 내용을 간단하게 정리해둔 문서입니다. 이 문서는 R을 사용하는 분들이나 데이터 분석을 하시는 분들에게 도움이 되었으면 좋겠습니다.\nP.S : 해당 저장소는 R언어를 사용하는 분들의 관례에 따라 renv를 사용하고 있습니다. 해당 프로젝트를 renv를 사용하세요.",
    "crumbs": [
      "Home",
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "R의 자료구조, 제어문 그리고 함수",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (나성호, 2021)의 경우 3장, 4장을 참고하세요. (오세종, 2023)의 경우 2장, 3장을 참고하세요.\n\n\n\n\n\n\n\n실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "intro.html#벡터",
    "href": "intro.html#벡터",
    "title": "주요 자료 구조",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n\n\n\nR에서 하나의 값은 자료가 지닌 형태에 따라 실수, 정수, 문자, 논리, 범주(요인) 자료형(data type)으로 표현\n\n실수형(numeric), 소수점을 포함하고 있는 숫자\n정수형(integer), 소수점이 없는 숫자, 마지막에 L을 붙이면 정수형으로 표현\n문자형(character), 숫자가 아니라 일반적인 문자로 구성된 자료형\n논리형(logical) : TRUE(또는 T) 및 FALSE(또는 F)로 구성된 자료형\n범주형(factor), 명목형인 범주(요인)로 구성된 자료형\n\n벡터는 동일한 자료형을 갖는 원소들의 집합\n\n자료형이 다른 스칼라 또는 벡터를 추가하면 자동으로 자료형이 변환되는 강제변환(coercion) 됨\n논리, 범주 -&gt; 정수 -&gt; 실수 -&gt; 문자 순으로 변환됨\n\n\n\n\n\n\na &lt;- c(1,2,3)\nclass(a)\n\n[1] \"numeric\"\n\nb &lt;- c(1L, 2L, 3L)\nclass(b)\n\n[1] \"integer\"\n\nc &lt;- c('hello', 'world')\nclass(c)\n\n[1] \"character\"\n\nd &lt;- c(FALSE, TRUE)\nclass(d)\n\n[1] \"logical\"\n\ne &lt;- as.factor(x = c('한국', '일본', '중국', '미국', '중국', '한국', '미국', '일본'))\nclass(e)\n\n[1] \"factor\"\n\nas.integer(x = e)\n\n[1] 4 2 3 1 3 4 1 2",
    "crumbs": [
      "Home",
      "R 기초",
      "주요 자료 구조"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "ds-vector.html",
    "href": "ds-vector.html",
    "title": "R 기초에 관한 자료",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (나성호, 2021)의 경우 3장, 4장을 참고하세요. (오세종, 2023)의 경우 2장, 3장을 참고하세요.\n\n\n\n\n\n\n\n실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "ds-vector.html#벡터",
    "href": "ds-vector.html#벡터",
    "title": "주요 자료 구조",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R` 기초에 관한 자료"
    ]
  },
  {
    "objectID": "ds-vector.html#리스트",
    "href": "ds-vector.html#리스트",
    "title": "주요 자료 구조",
    "section": "",
    "text": "리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R` 기초에 관한 자료"
    ]
  },
  {
    "objectID": "ds-vector.html#데이터프레임",
    "href": "ds-vector.html#데이터프레임",
    "title": "주요 자료 구조",
    "section": "",
    "text": "R을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R` 기초에 관한 자료"
    ]
  },
  {
    "objectID": "ds-vector.html#자료구조",
    "href": "ds-vector.html#자료구조",
    "title": "R 기초에 관한 자료",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (나성호, 2021)의 경우 3장, 4장을 참고하세요. (오세종, 2023)의 경우 2장, 3장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "ds-vector.html#제어와-함수",
    "href": "ds-vector.html#제어와-함수",
    "title": "R 기초에 관한 자료",
    "section": "",
    "text": "실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "intro.html#자료구조",
    "href": "intro.html#자료구조",
    "title": "R의 자료구조, 제어문 그리고 함수",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (나성호, 2021)의 경우 3장, 4장을 참고하세요. (오세종, 2023)의 경우 2장, 3장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "intro.html#제어와-함수",
    "href": "intro.html#제어와-함수",
    "title": "R의 자료구조, 제어문 그리고 함수",
    "section": "",
    "text": "실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R 기초",
      "`R`의 자료구조, 제어문 그리고 함수"
    ]
  },
  {
    "objectID": "ggplot2.html",
    "href": "ggplot2.html",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "R 패키지를 활용하여 다양한 작업을 할 수 있지만, 저는 그 중에서 데이터 분석과 통계 분석 및 모델을 기반으로 많은 업무를 진행하였습니다. 따라서 제가 생각하기 R 패키지 중에서 가장 활용 용도가 높다고 생각하는 ggplot2을 사용해서 간단한 R 코드를 연습하고, 데이터 시각화를 진행해보겠습니다.\n\n제가 지금까지 사용했던 모든 그래프 도구 중에서 가장 멋진 라이브러리 입니다. 모든 그래프 도구가 나름의 멋짐을 가지고 있지만, ggplot2가 가져다 주는 조합의 묘미가 굉장히 흥미롭게 재미있습니다. 그리고 R을 사용함에 있어서 ggplot2를 잘 활용하면 좋은 데이터를 기반으로 더 나은 의사소통을 할 수 있습니다.\n\n\nggplot2 패키지를 사용하기 위해서는 아래와 같은 패키지를 설치하고 불러와야 합니다. 패키지 설치는 install.packages()를 사용하시면 됩니다. ggplot2, dplyr, readr은 tidyverse 패키지에 포함되어 있기 때문에, 일반적으로 tidyverse를 설치하실 때 대부분 설치되었있습니다. 만약 설치되어 있지 않다면 install.packages(\"tidyverse\")로 설치를 진행하시면 됩니다. ggthemes는 ggplot2의 테마를 추가 할 수 있는 패키지입니다.\n\nlibrary(ggplot2)\nlibrary(ggthemes) \nlibrary(dplyr) \nlibrary(readr)\nlibrary(forcats)\nlibrary(scales)\nlibrary(RColorBrewer)\n\n\n\n\n간단한 데이터를 생성하고, 이를 시각화하는 방법을 알아보겠습니다. 이 데이터는 (Mauricio Vargas Sepúlveda, 2023)에서 가져왔습니다.\n\nchilean_exports &lt;- \"year,product,export,percentage\n2006,copper,4335009500,81\n2006,others,1016726518,19\n2007,copper,9005361914,86\n2007,others,1523085299,14\n2008,copper,6907056354,80\n2008,others,1762684216,20\n2009,copper,10529811075,81\n2009,others,2464094241,19\n2010,copper,14828284450,85\n2010,others,2543015596,15\n2011,copper,15291679086,82\n2011,others,3447972354,18\n2012,copper,14630686732,80\n2012,others,3583968218,20\n2013,copper,15244038840,79\n2013,others,4051281128,21\n2014,copper,14703374241,78\n2014,others,4251484600,22\n2015,copper,13155922363,78\n2015,others,3667286912,22\n\"\nexports_data &lt;- read_csv(chilean_exports)\n\nRows: 20 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): product\ndbl (3): year, export, percentage\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\ncolour &lt;- c(\"#40b8d0\", \"#b2d183\")\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product), data = exports_data) +\n  geom_line(linewidth = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_colour_manual(values = colour) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\"),\n        legend.key.size = unit(2, \"lines\")) +\n  geom_point(size = 3)\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\np1\n\n\n\n\n\n\n\n\n\n\n\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np2 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) + \n  geom_area() +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10), \n        axis.text.y = element_text(colour = \"black\", size = 10), \n        legend.key = element_rect(fill = \"white\", colour = \"white\"), \n        legend.position = \"bottom\", \n        legend.direction = \"horizontal\", \n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"), \n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T)) \np2\n\n\n\n\n\n\n\n\n\n\n\n\nexports_data &lt;- exports_data %&gt;%\n  mutate(export_label = paste(round(export/1000000000,2), \"B\"))\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np3 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = export_label), position = position_stack(vjust = 0.5), colour = \"black\", family = \"Tahoma\", size = 3, show.legend = F) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\n\np3\n\n\n\n\n\n\n\n\n\n\n\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np4 &lt;- ggplot(aes(y = percentage, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = paste0(percentage,\"%\")), position = position_stack(vjust = 0.5), colour = \"black\", family = \"MaruBuri Regular\", size = 4) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  scale_y_continuous(labels = dollar_format(suffix = \"%\", prefix = \"\")) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"Percentage\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\np4\n\n\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\n\naq_trim &lt;- airquality %&gt;%\n  filter(Month %in% c(7,8,9)) %&gt;%\n  mutate(Month = factor(Month, labels = c(\"July\", \"August\", \"September\")))\n\nfill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np5 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\", legend.direction = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np5\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nfill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np6 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, size = Wind, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", size = \"Wind Speed (mph) \", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"vertical\",\n    legend.key.size = unit(0.5, \"cm\"),\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np6\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\nbarfill &lt;- \"#4271AE\"; barlines &lt;- \"#1F3552\"\n\np7 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 5, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  geom_vline(xintercept = 75, size = 1, colour = \"#FF3721\", linetype = \"dashed\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, linewidth = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np7\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"July\")))\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  facet_grid(. ~ Month.f, scales = \"free\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np7  \n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, fill = Month.f)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, position = \"identity\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_fill_brewer(palette = \"Accent\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\")) +\n  labs(fill = \"Month \")\np7\n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\n\np8 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_density(fill = \"#4271AE\", colour = \"#1F3552\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Density plot of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,6,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"June\", \"July\")))\n\np8 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, colour = Month.f)) +\n  geom_density(position = \"identity\", size = 1) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 200, 25), limits = c(0, 200)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_colour_brewer(palette = \"Accent\") +\n  labs(colour = \"Month \") +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 31 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nfuncShaded &lt;- function(x) {\n  y &lt;- dnorm(x, mean = 0.2, sd = 0.1)\n  y[x &lt; 0.2 | x &gt; (0.2 + 4 * 0.1)] &lt;- NA\n  return(y)\n}\n\np9 &lt;- ggplot(tibble(x = c(0, 1)), aes(x = x)) +\n  stat_function(fun = dnorm, args = list(0.2, 0.1),\n                aes(colour = \"Group 1 \"), size = 1.5) +\n  stat_function(fun = dnorm, args = list(0.7, 0.05),\n                aes(colour = \"Group 2 \"), size = 1.5) +\n  stat_function(fun = funcShaded, geom = \"area\", fill = \"#84CA72\", alpha = 0.2) +\n  scale_x_continuous(name = \"Probability\", breaks = seq(0, 1, 0.2), limits = c(0, 1)) +\n  scale_y_continuous(name = \"Frequency\") +\n  labs(title = \"Normal function curves of probabilities\") +\n  labs(colour = \"Groups \") +\n  scale_colour_brewer(palette = \"Accent\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np9\n\n\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\nfill &lt;- \"#4271AE\"; lines &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\np10 &lt;- ggplot(airquality, aes(x = Month, y = Ozone)) +\n  geom_boxplot(colour = lines, fill = fill, size = 1, notch = TRUE) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", size = .5),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"),\n    axis.title = element_text(face = \"bold\"),\n    axis.text.x = element_text(colour = \"black\", size = 11),\n    axis.text.y = element_text(colour = \"black\", size = 9))\np10\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nNotch went outside hinges\nℹ Do you want `notch = FALSE`?\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\nfill &lt;- \"#4271AE\"; line &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(\"Jul\", \"Aug\", \"Sep\")) %&gt;%\n  mutate(Temp.f = factor(ifelse(Temp &gt; mean(Temp), 1, 0),\n                         labels = c(\"Low temp \", \"High temp \")))\n\np10 &lt;- ggplot(airquality_trimmed, aes(x = Month, y = Ozone)) +\n  geom_boxplot(fill = fill, colour = line, alpha = 0.7) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 50), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"),\n        axis.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(size = 11)) +\n  facet_grid(. ~ Temp.f)\np10  \n\nWarning: Removed 11 rows containing non-finite outside the scale range\n(`stat_boxplot()`).",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#준비",
    "href": "ggplot2.html#준비",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "ggplot2 패키지를 사용하기 위해서는 아래와 같은 패키지를 설치하고 불러와야 합니다. 패키지 설치는 install.packages()를 사용하시면 됩니다. ggplot2, dplyr, readr은 tidyverse 패키지에 포함되어 있기 때문에, 일반적으로 tidyverse를 설치하실 때 대부분 설치되었있습니다. 만약 설치되어 있지 않다면 install.packages(\"tidyverse\")로 설치를 진행하시면 됩니다. ggthemes는 ggplot2의 테마를 추가 할 수 있는 패키지입니다.\n\nlibrary(ggplot2)\nlibrary(ggthemes) \nlibrary(dplyr) \nlibrary(readr)\nlibrary(forcats)\nlibrary(scales)\nlibrary(RColorBrewer)",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#line",
    "href": "ggplot2.html#line",
    "title": "ggplot2",
    "section": "",
    "text": "간단한 데이터를 생성하고, 이를 시각화하는 방법을 알아보겠습니다. 이 데이터는 (Mauricio Vargas Sepúlveda, 2023)에서 가져왔습니다.\n\nchilean_exports &lt;- \"year,product,export,percentage\n2006,copper,4335009500,81\n2006,others,1016726518,19\n2007,copper,9005361914,86\n2007,others,1523085299,14\n2008,copper,6907056354,80\n2008,others,1762684216,20\n2009,copper,10529811075,81\n2009,others,2464094241,19\n2010,copper,14828284450,85\n2010,others,2543015596,15\n2011,copper,15291679086,82\n2011,others,3447972354,18\n2012,copper,14630686732,80\n2012,others,3583968218,20\n2013,copper,15244038840,79\n2013,others,4051281128,21\n2014,copper,14703374241,78\n2014,others,4251484600,22\n2015,copper,13155922363,78\n2015,others,3667286912,22\n\"\nexports_data &lt;- read_csv(chilean_exports)\n\nRows: 20 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): product\ndbl (3): year, export, percentage\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n먼저 간단한 선(line) 그래프를 그려보겠습니다. 그래프를 초기화하기 위해 ggplot에 exports_data를 데이터로 지정하고 각 축에 변수(x, y)를 지정합니다. 그런 다음 geom_line 명령을 추가하여 선 그래프 화면에 출력하도록 합니다. 선 그래프의 두께를 조절하기 위해서 linewidth를 1.5로 설정합니다. 산점도(geom_point), 박스(geom_boxplot), 히스토그램(geom_histogram), 막대(geom_bar) 등과 같은 그래프 등을 많이 활용합니다.\n\np1 &lt;- ggplot(data = exports_data, mapping = aes(x = year, y = export, colour = product)) +\n  geom_line(linewidth = 1.5)\np1\n\n\n\n\n\n\n\n\n그래프에 몇가지 정보를 추가해보도록 하겠습니다. 특히 범례를 중점적으로 수정하도록 하겠습니다.\n\nexports_data &lt;- exports_data %&gt;%\n  mutate(product = factor(product, levels = c(\"copper\",\"others\"),\n                          labels = c(\"Copper \",\"Pulp wood, Fruit, Salmon & Others\")))\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product), data = exports_data) +\n  geom_line(linewidth = 1.5) +\n  theme(text=element_text(family=\"MaruBuri Regular\"),\n        legend.position = \"bottom\", \n        legend.direction = \"horizontal\",\n        legend.title = element_blank())\np1\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n축(x,y)의 데이터와 제목을 추가하도록 하겠습니다.\n\np1 &lt;- p1 + scale_x_continuous(breaks = seq(2006,2015,1)) + \n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\")\np1\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n약간의 색을 변경할 수도 있습니다.\n\ncolour &lt;- c(\"#5F9EA0\", \"#E1B378\")\np1 &lt;- p1 + scale_colour_manual(values = colour)\np1\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n해당 그래프에 테마(theme_bw)를 적용해보도록 하겠습니다.\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product), data = exports_data) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_colour_manual(values = colour) +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_blank())\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np1\n\n\n\n\n\n\n\n\n테마를 조금 수정해보도록 하겠습니다. 세부적인 사항들은 ggplot2 theme에서 확인하실 수 있습니다.\n\nfill &lt;- c(\"#40b8d0\",\"#b2d183\")\n\np1 &lt;- ggplot(data = exports_data, mapping = aes(y = export, x = year, colour = product)) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(axis.line.x = element_line(size = .5, colour = \"black\"),\n      axis.line.y = element_line(size = .5, colour = \"black\"),\n      axis.text.x = element_text(colour = \"black\", size = 10),\n      axis.text.y = element_text(colour = \"black\", size = 10),\n      legend.key = element_rect(fill = \"white\", colour = \"white\"),\n      legend.position = \"bottom\", legend.direction = \"horizontal\",\n      legend.title = element_blank(),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(), panel.border = element_blank(),\n      panel.background = element_blank())\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\np1\n\n\n\n\n\n\n\n\n테마(theme_economist)를 적용하고, 필요한 부분만 수정해보도록 하겠습니다.\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product),\n  data = exports_data) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  theme_economist() + scale_colour_economist() +\n  theme(axis.line.x = element_line(size = .5, colour = \"black\"),\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        plot.title = element_text(family = \"MaruBuri Regular\"),\n        text = element_text(family = \"MaruBuri Regular\"))\np1\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n선 그래프의 가독성을 고려해서 아래와 같이 자신만의 테마로 구성하는 방법도 존재합니다.\n\ncolour &lt;- c(\"#40b8d0\", \"#b2d183\")\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product), data = exports_data) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_colour_manual(values = colour) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\"),\n        legend.key.size = unit(2, \"lines\")) +\n  geom_point(size = 3)\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\np1\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database",
    "crumbs": [
      "Home",
      "R 기초",
      "ggplot2"
    ]
  },
  {
    "objectID": "ggplot2.html#데이터",
    "href": "ggplot2.html#데이터",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "간단한 데이터를 생성하고, 이를 시각화하는 방법을 알아보겠습니다. 이 데이터는 (Mauricio Vargas Sepúlveda, 2023)에서 가져왔습니다.\n\nchilean_exports &lt;- \"year,product,export,percentage\n2006,copper,4335009500,81\n2006,others,1016726518,19\n2007,copper,9005361914,86\n2007,others,1523085299,14\n2008,copper,6907056354,80\n2008,others,1762684216,20\n2009,copper,10529811075,81\n2009,others,2464094241,19\n2010,copper,14828284450,85\n2010,others,2543015596,15\n2011,copper,15291679086,82\n2011,others,3447972354,18\n2012,copper,14630686732,80\n2012,others,3583968218,20\n2013,copper,15244038840,79\n2013,others,4051281128,21\n2014,copper,14703374241,78\n2014,others,4251484600,22\n2015,copper,13155922363,78\n2015,others,3667286912,22\n\"\nexports_data &lt;- read_csv(chilean_exports)\n\nRows: 20 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): product\ndbl (3): year, export, percentage\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#선-그래프",
    "href": "ggplot2.html#선-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "colour &lt;- c(\"#40b8d0\", \"#b2d183\")\n\np1 &lt;- ggplot(aes(y = export, x = year, colour = product), data = exports_data) +\n  geom_line(linewidth = 1.5) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_colour_manual(values = colour) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\"),\n        legend.key.size = unit(2, \"lines\")) +\n  geom_point(size = 3)\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\np1",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#영역-차트area-chart",
    "href": "ggplot2.html#영역-차트area-chart",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "fill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np2 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) + \n  geom_area() +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\",\n       subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10), \n        axis.text.y = element_text(colour = \"black\", size = 10), \n        legend.key = element_rect(fill = \"white\", colour = \"white\"), \n        legend.position = \"bottom\", \n        legend.direction = \"horizontal\", \n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"), \n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T)) \np2",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#bar-and-stacked-bar",
    "href": "ggplot2.html#bar-and-stacked-bar",
    "title": "ggplot2",
    "section": "",
    "text": "기본 막대형 차트를 간단하게 만들어보도록 하겠습니다. 앞선 예제에서 봤던 것과 같은 예제로 진행됩니다. 강의에서 자세히 설명했기 때문에 가능하면 코드를 중심으로 간략하게 설명하도록 하겠습니다.\ngeom_col은 막대형 막대그래프를 표시합니다.\n\np3 &lt;- ggplot(aes(y = export, x = year, fill = product), data = exports_data) +\n  geom_col()\np3\n\n\n\n\n\n\n\n\n막대의 순서를 역순으로 표시하기 위해선 아래와 같이 fct_rev를 사용하세요.\n\np3 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col()\np3\n\n\n\n\n\n\n\n\n레이블을 추가하는 방법은 아래와 같습니다.\n\nexports_data &lt;- exports_data %&gt;%\n  mutate(export_label = paste(round(export/1000000000,2), \"B\"))\n\np3 = p3 + geom_text(data = exports_data, aes(x = year, y = export,\n                                             label = export_label), size = 3)\np3",
    "crumbs": [
      "Home",
      "R 기초",
      "ggplot2"
    ]
  },
  {
    "objectID": "ggplot2.html#bar",
    "href": "ggplot2.html#bar",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "exports_data &lt;- exports_data %&gt;%\n  mutate(export_label = paste(round(export/1000000000,2), \"B\"))\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np3 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = export_label), position = position_stack(vjust = 0.5), colour = \"black\", family = \"Tahoma\", size = 3, show.legend = F) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\n\np3",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#stacked-bar",
    "href": "ggplot2.html#stacked-bar",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "fill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np4 &lt;- ggplot(aes(y = percentage, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = paste0(percentage,\"%\")), position = position_stack(vjust = 0.5), colour = \"black\", family = \"MaruBuri Regular\", size = 4) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  scale_y_continuous(labels = dollar_format(suffix = \"%\", prefix = \"\")) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"Percentage\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\np4",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#weighted-scatter",
    "href": "ggplot2.html#weighted-scatter",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "fill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np6 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, size = Wind, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", size = \"Wind Speed (mph) \", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"vertical\",\n    legend.key.size = unit(0.5, \"cm\"),\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np6\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#scatter",
    "href": "ggplot2.html#scatter",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\n\naq_trim &lt;- airquality %&gt;%\n  filter(Month %in% c(7,8,9)) %&gt;%\n  mutate(Month = factor(Month, labels = c(\"July\", \"August\", \"September\")))\n\nfill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np5 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\", legend.direction = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np5\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#histograms",
    "href": "ggplot2.html#histograms",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\nbarfill &lt;- \"#4271AE\"; barlines &lt;- \"#1F3552\"\n\np7 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 5, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  geom_vline(xintercept = 75, size = 1, colour = \"#FF3721\", linetype = \"dashed\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, linewidth = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np7\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"July\")))\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  facet_grid(. ~ Month.f, scales = \"free\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np7  \n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, fill = Month.f)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, position = \"identity\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_fill_brewer(palette = \"Accent\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\")) +\n  labs(fill = \"Month \")\np7\n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#denstiy",
    "href": "ggplot2.html#denstiy",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\n\np8 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_density(fill = \"#4271AE\", colour = \"#1F3552\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Density plot of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,6,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"June\", \"July\")))\n\np8 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, colour = Month.f)) +\n  geom_density(position = \"identity\", size = 1) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 200, 25), limits = c(0, 200)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_colour_brewer(palette = \"Accent\") +\n  labs(colour = \"Month \") +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 31 rows containing non-finite outside the scale range\n(`stat_density()`).",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#function",
    "href": "ggplot2.html#function",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "funcShaded &lt;- function(x) {\n  y &lt;- dnorm(x, mean = 0.2, sd = 0.1)\n  y[x &lt; 0.2 | x &gt; (0.2 + 4 * 0.1)] &lt;- NA\n  return(y)\n}\n\np9 &lt;- ggplot(tibble(x = c(0, 1)), aes(x = x)) +\n  stat_function(fun = dnorm, args = list(0.2, 0.1),\n                aes(colour = \"Group 1 \"), size = 1.5) +\n  stat_function(fun = dnorm, args = list(0.7, 0.05),\n                aes(colour = \"Group 2 \"), size = 1.5) +\n  stat_function(fun = funcShaded, geom = \"area\", fill = \"#84CA72\", alpha = 0.2) +\n  scale_x_continuous(name = \"Probability\", breaks = seq(0, 1, 0.2), limits = c(0, 1)) +\n  scale_y_continuous(name = \"Frequency\") +\n  labs(title = \"Normal function curves of probabilities\") +\n  labs(colour = \"Groups \") +\n  scale_colour_brewer(palette = \"Accent\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np9",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#boxplot",
    "href": "ggplot2.html#boxplot",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\nfill &lt;- \"#4271AE\"; lines &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\np10 &lt;- ggplot(airquality, aes(x = Month, y = Ozone)) +\n  geom_boxplot(colour = lines, fill = fill, size = 1, notch = TRUE) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", size = .5),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"),\n    axis.title = element_text(face = \"bold\"),\n    axis.text.x = element_text(colour = \"black\", size = 11),\n    axis.text.y = element_text(colour = \"black\", size = 9))\np10\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nNotch went outside hinges\nℹ Do you want `notch = FALSE`?\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\nfill &lt;- \"#4271AE\"; line &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(\"Jul\", \"Aug\", \"Sep\")) %&gt;%\n  mutate(Temp.f = factor(ifelse(Temp &gt; mean(Temp), 1, 0),\n                         labels = c(\"Low temp \", \"High temp \")))\n\np10 &lt;- ggplot(airquality_trimmed, aes(x = Month, y = Ozone)) +\n  geom_boxplot(fill = fill, colour = line, alpha = 0.7) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 50), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"),\n        axis.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(size = 11)) +\n  facet_grid(. ~ Temp.f)\np10  \n\nWarning: Removed 11 rows containing non-finite outside the scale range\n(`stat_boxplot()`).",
    "crumbs": [
      "Home",
      "R 기초",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#막대-그래프",
    "href": "ggplot2.html#막대-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "exports_data &lt;- exports_data %&gt;%\n  mutate(export_label = paste(round(export/1000000000,2), \"B\"))\n\nfill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np3 &lt;- ggplot(aes(y = export, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = export_label), position = position_stack(vjust = 0.5), colour = \"black\", family = \"Tahoma\", size = 3, show.legend = F) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"USD million\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\n\np3",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#누적-막대stacked-bar-그래프",
    "href": "ggplot2.html#누적-막대stacked-bar-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "fill &lt;- c(\"#b2d183\",\"#40b8d0\")\n\np4 &lt;- ggplot(aes(y = percentage, x = year, fill = fct_rev(product)), data = exports_data) +\n  geom_col() +\n  geom_text(aes(label = paste0(percentage,\"%\")), position = position_stack(vjust = 0.5), colour = \"black\", family = \"MaruBuri Regular\", size = 4) +\n  scale_x_continuous(breaks = seq(2006,2015,1)) +\n  scale_y_continuous(labels = dollar_format(suffix = \"%\", prefix = \"\")) +\n  labs(title = \"Composition of Exports to China ($)\", subtitle = \"Source: The Observatory of Economic Complexity\") +\n  labs(x = \"Year\", y = \"Percentage\") +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        axis.text.x = element_text(colour = \"black\", size = 10),\n        axis.text.y = element_text(colour = \"black\", size = 10),\n        legend.key = element_rect(fill = \"white\", colour = \"white\"),\n        legend.position = \"bottom\", legend.direction = \"horizontal\",\n        legend.title = element_blank(),\n        panel.grid.major = element_line(colour = \"#d3d3d3\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(family = \"MaruBuri Regular\")) +\n  guides(fill = guide_legend(reverse = T))\np4",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#산점도scatter",
    "href": "ggplot2.html#산점도scatter",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\n\naq_trim &lt;- airquality %&gt;%\n  filter(Month %in% c(7,8,9)) %&gt;%\n  mutate(Month = factor(Month, labels = c(\"July\", \"August\", \"September\")))\n\nfill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np5 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\", legend.direction = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np5\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#가중-산점도weighted-scatter",
    "href": "ggplot2.html#가중-산점도weighted-scatter",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "fill &lt;- c(\"steelblue\", \"yellowgreen\", \"violetred1\")\n\np6 &lt;- ggplot(aq_trim, aes(x = Day, y = Ozone, size = Wind, fill = Month)) +\n  geom_point(shape = 21) +\n  labs(title = \"Air Quality in New York by Day\", subtitle = \"Source: New York State Department of Conservation\") +\n  labs(x = \"Day of the month\", y = \"Ozone (ppb)\", size = \"Wind Speed (mph) \", fill = \"Months \") +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  scale_size(range = c(1, 10)) +\n  scale_fill_manual(values = fill) +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"vertical\",\n    legend.key.size = unit(0.5, \"cm\"),\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np6\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#히스토그램histograms",
    "href": "ggplot2.html#히스토그램histograms",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\nbarfill &lt;- \"#4271AE\"; barlines &lt;- \"#1F3552\"\n\np7 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 5, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  geom_vline(xintercept = 75, size = 1, colour = \"#FF3721\", linetype = \"dashed\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, linewidth = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np7\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"July\")))\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, colour = barlines, fill = barfill) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  facet_grid(. ~ Month.f, scales = \"free\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np7  \n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\np7 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, fill = Month.f)) +\n  geom_histogram(aes(y = ..count..), binwidth = 10, position = \"identity\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Count\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_fill_brewer(palette = \"Accent\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\")) +\n  labs(fill = \"Month \")\np7\n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#밀집denstiy-그래프",
    "href": "ggplot2.html#밀집denstiy-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\n\np8 &lt;- ggplot(airquality, aes(x = Ozone)) +\n  geom_density(fill = \"#4271AE\", colour = \"#1F3552\", alpha = 0.75) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Density plot of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    legend.key = element_blank(),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(5,6,7)) %&gt;%\n  mutate(Month.f = factor(Month, labels = c(\"May\", \"June\", \"July\")))\n\np8 &lt;- ggplot(airquality_trimmed, aes(x = Ozone, colour = Month.f)) +\n  geom_density(position = \"identity\", size = 1) +\n  scale_x_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 200, 25), limits = c(0, 200)) +\n  scale_y_continuous(name = \"Density\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  scale_colour_brewer(palette = \"Accent\") +\n  labs(colour = \"Month \") +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"))\np8\n\nWarning: Removed 31 rows containing non-finite outside the scale range\n(`stat_density()`).",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#function-그래프",
    "href": "ggplot2.html#function-그래프",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "funcShaded &lt;- function(x) {\n  y &lt;- dnorm(x, mean = 0.2, sd = 0.1)\n  y[x &lt; 0.2 | x &gt; (0.2 + 4 * 0.1)] &lt;- NA\n  return(y)\n}\n\np9 &lt;- ggplot(tibble(x = c(0, 1)), aes(x = x)) +\n  stat_function(fun = dnorm, args = list(0.2, 0.1),\n                aes(colour = \"Group 1 \"), size = 1.5) +\n  stat_function(fun = dnorm, args = list(0.7, 0.05),\n                aes(colour = \"Group 2 \"), size = 1.5) +\n  stat_function(fun = funcShaded, geom = \"area\", fill = \"#84CA72\", alpha = 0.2) +\n  scale_x_continuous(name = \"Probability\", breaks = seq(0, 1, 0.2), limits = c(0, 1)) +\n  scale_y_continuous(name = \"Frequency\") +\n  labs(title = \"Normal function curves of probabilities\") +\n  labs(colour = \"Groups \") +\n  scale_colour_brewer(palette = \"Accent\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n    axis.text.x = element_text(colour = \"black\", size = 9),\n    axis.text.y = element_text(colour = \"black\", size = 9),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    legend.box = \"horizontal\",\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"))\np9",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "ggplot2.html#박스-플롯boxplot",
    "href": "ggplot2.html#박스-플롯boxplot",
    "title": "간단한 그래프(ggplot2)",
    "section": "",
    "text": "data(airquality)\nfill &lt;- \"#4271AE\"; lines &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\np10 &lt;- ggplot(airquality, aes(x = Month, y = Ozone)) +\n  geom_boxplot(colour = lines, fill = fill, size = 1, notch = TRUE) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 25), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(panel.border = element_rect(colour = \"black\", size = .5),\n    panel.grid.major = element_line(colour = \"#d3d3d3\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n    text = element_text(family = \"MaruBuri Regular\"),\n    axis.title = element_text(face = \"bold\"),\n    axis.text.x = element_text(colour = \"black\", size = 11),\n    axis.text.y = element_text(colour = \"black\", size = 9))\np10\n\nWarning: Removed 37 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nNotch went outside hinges\nℹ Do you want `notch = FALSE`?\n\n\n\n\n\n\n\n\n\n\ndata(airquality)\nfill &lt;- \"#4271AE\"; line &lt;- \"#1F3552\"\n\nairquality &lt;- airquality %&gt;%\n  mutate(Month = factor(Month,\n                        labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")))\n\nairquality_trimmed &lt;- airquality %&gt;%\n  filter(Month %in% c(\"Jul\", \"Aug\", \"Sep\")) %&gt;%\n  mutate(Temp.f = factor(ifelse(Temp &gt; mean(Temp), 1, 0),\n                         labels = c(\"Low temp \", \"High temp \")))\n\np10 &lt;- ggplot(airquality_trimmed, aes(x = Month, y = Ozone)) +\n  geom_boxplot(fill = fill, colour = line, alpha = 0.7) +\n  scale_y_continuous(name = \"Mean ozone in\\nparts per billion\", breaks = seq(0, 175, 50), limits = c(0, 175)) +\n  scale_x_discrete(name = \"Month\") +\n  labs(title = \"Frequency histogram of mean ozone\", subtitle = \"Source: New York State Department of Conservation\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 14, family = \"MaruBuri Regular\", face = \"bold\"),\n        panel.border = element_rect(colour = \"black\", fill = NA, size = .5),\n        text = element_text(size = 12, family = \"MaruBuri Regular\"),\n        axis.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(size = 11)) +\n  facet_grid(. ~ Temp.f)\np10  \n\nWarning: Removed 11 rows containing non-finite outside the scale range\n(`stat_boxplot()`).",
    "crumbs": [
      "Home",
      "R4DS",
      "간단한 그래프(ggplot2)"
    ]
  },
  {
    "objectID": "tidyverse.html",
    "href": "tidyverse.html",
    "title": "tidyverse",
    "section": "",
    "text": "R에서 데이터 분석에 유용한 패키지들을 모아놓은 라이브러리입니다. tidyverse 내부에 포함된 패키지들은 데이터를 다루는데 있어서 편리한 기능을 제공합니다.\n\nggplot2는 데이터 시각화에 사용\ndplyr는 데이터 전처리에 사용\nreadr는 데이터를 가져오는데 사용\ntibble: modern data frames\nstringr는 문자열 처리에 사용\nforcats는 factor 데이터를 처리하는데 사용\ntidyr는 데이터를 다루기 위해서 사용\npurrr는 데이터를 다루는 함수를 제공\n\n\n\n\ncsv는 read_csv를 사용\n::은 패키지 내 함수를 사용할 때 사용\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nmoving_data &lt;- read_csv(\"./data/seoul_moving_202107_09_hr.csv\")\n\nRows: 1263554 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): 요일, 도착시간, 성별, 나이, 이동유형, 이동인구(합)\ndbl (4): 대상연월, 출발 시군구 코드, 도착 시군구 코드, 평균 이동 시간(분)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nreference_data &lt;- readxl::read_excel(\"./data/reference.xlsx\")\n\nmoving_data %&gt;% dim()\n\n[1] 1263554      10\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nmoving_data %&gt;% head()\n\n# A tibble: 6 × 10\n  대상연월 요일  도착시간 `출발 시군구 코드` `도착 시군구 코드` 성별  나이 \n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1   202107 일    09                    11010              11010 F     00   \n2   202107 일    09                    11010              11010 F     10   \n3   202107 일    09                    11010              11010 F     10   \n4   202107 일    09                    11010              11010 F     10   \n5   202107 일    09                    11010              11010 F     10   \n6   202107 일    09                    11010              11010 F     15   \n# ℹ 3 more variables: 이동유형 &lt;chr&gt;, `평균 이동 시간(분)` &lt;dbl&gt;,\n#   `이동인구(합)` &lt;chr&gt;\n\nmoving_data %&gt;% names() \n\n [1] \"대상연월\"           \"요일\"               \"도착시간\"          \n [4] \"출발 시군구 코드\"   \"도착 시군구 코드\"   \"성별\"              \n [7] \"나이\"               \"이동유형\"           \"평균 이동 시간(분)\"\n[10] \"이동인구(합)\"      \n\nmoving_data %&gt;% glimpse()\n\nRows: 1,263,554\nColumns: 10\n$ 대상연월             &lt;dbl&gt; 202107, 202107, 202107, 202107, 202107, 202107, 2…\n$ 요일                 &lt;chr&gt; \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"…\n$ 도착시간             &lt;chr&gt; \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"…\n$ `출발 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ `도착 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ 성별                 &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\",…\n$ 나이                 &lt;chr&gt; \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"…\n$ 이동유형             &lt;chr&gt; \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", \"EE\", \"…\n$ `평균 이동 시간(분)` &lt;dbl&gt; 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30, 60, 1…\n$ `이동인구(합)`       &lt;chr&gt; \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"6.05\", …\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% glimpse()\n\nRows: 91\nColumns: 4\n$ 시도        &lt;dbl&gt; 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11…\n$ 시군구      &lt;dbl&gt; 11010, 11020, 11030, 11040, 11050, 11060, 11070, 11080, 11…\n$ name        &lt;chr&gt; \"종로구\", \"중구\", \"용산구\", \"성동구\", \"광진구\", \"동대문구\"…\n$ `full name` &lt;chr&gt; \"서울특별시 종로구\", \"서울특별시 중구\", \"서울특별시 용산구…\n\nreference_data &lt;- janitor::clean_names(reference_data)\nreference_data %&gt;% names()\n\n[1] \"sido\"      \"sigungu\"   \"name\"      \"full_name\"\n\nmoving_data &lt;- janitor::clean_names(moving_data)\nmoving_data %&gt;% names()\n\n [1] \"daesang_yeon_wol\"            \"yoil\"                       \n [3] \"dochagsigan\"                 \"chulbal_sigungu_kodeu\"      \n [5] \"dochag_sigungu_kodeu\"        \"seongbyeol\"                 \n [7] \"nai\"                         \"idong_yuhyeong\"             \n [9] \"pyeong_gyun_idong_sigan_bun\" \"idong_ingu_hab\""
  },
  {
    "objectID": "tidyverse.html#데이터-불러오기",
    "href": "tidyverse.html#데이터-불러오기",
    "title": "tidyverse",
    "section": "",
    "text": "csv는 read_csv를 사용\n::은 패키지 내 함수를 사용할 때 사용\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nmoving_data &lt;- read_csv(\"./data/seoul_moving_202107_09_hr.csv\")\n\nRows: 1263554 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): 요일, 도착시간, 성별, 나이, 이동유형, 이동인구(합)\ndbl (4): 대상연월, 출발 시군구 코드, 도착 시군구 코드, 평균 이동 시간(분)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nreference_data &lt;- readxl::read_excel(\"./data/reference.xlsx\")\n\nmoving_data %&gt;% dim()\n\n[1] 1263554      10\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nmoving_data %&gt;% head()\n\n# A tibble: 6 × 10\n  대상연월 요일  도착시간 `출발 시군구 코드` `도착 시군구 코드` 성별  나이 \n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1   202107 일    09                    11010              11010 F     00   \n2   202107 일    09                    11010              11010 F     10   \n3   202107 일    09                    11010              11010 F     10   \n4   202107 일    09                    11010              11010 F     10   \n5   202107 일    09                    11010              11010 F     10   \n6   202107 일    09                    11010              11010 F     15   \n# ℹ 3 more variables: 이동유형 &lt;chr&gt;, `평균 이동 시간(분)` &lt;dbl&gt;,\n#   `이동인구(합)` &lt;chr&gt;\n\nmoving_data %&gt;% names() \n\n [1] \"대상연월\"           \"요일\"               \"도착시간\"          \n [4] \"출발 시군구 코드\"   \"도착 시군구 코드\"   \"성별\"              \n [7] \"나이\"               \"이동유형\"           \"평균 이동 시간(분)\"\n[10] \"이동인구(합)\"      \n\nmoving_data %&gt;% glimpse()\n\nRows: 1,263,554\nColumns: 10\n$ 대상연월             &lt;dbl&gt; 202107, 202107, 202107, 202107, 202107, 202107, 2…\n$ 요일                 &lt;chr&gt; \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"…\n$ 도착시간             &lt;chr&gt; \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"…\n$ `출발 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ `도착 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ 성별                 &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\",…\n$ 나이                 &lt;chr&gt; \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"…\n$ 이동유형             &lt;chr&gt; \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", \"EE\", \"…\n$ `평균 이동 시간(분)` &lt;dbl&gt; 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30, 60, 1…\n$ `이동인구(합)`       &lt;chr&gt; \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"6.05\", …\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% glimpse()\n\nRows: 91\nColumns: 4\n$ 시도        &lt;dbl&gt; 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11…\n$ 시군구      &lt;dbl&gt; 11010, 11020, 11030, 11040, 11050, 11060, 11070, 11080, 11…\n$ name        &lt;chr&gt; \"종로구\", \"중구\", \"용산구\", \"성동구\", \"광진구\", \"동대문구\"…\n$ `full name` &lt;chr&gt; \"서울특별시 종로구\", \"서울특별시 중구\", \"서울특별시 용산구…\n\nreference_data &lt;- janitor::clean_names(reference_data)\nreference_data %&gt;% names()\n\n[1] \"sido\"      \"sigungu\"   \"name\"      \"full_name\"\n\nmoving_data &lt;- janitor::clean_names(moving_data)\nmoving_data %&gt;% names()\n\n [1] \"daesang_yeon_wol\"            \"yoil\"                       \n [3] \"dochagsigan\"                 \"chulbal_sigungu_kodeu\"      \n [5] \"dochag_sigungu_kodeu\"        \"seongbyeol\"                 \n [7] \"nai\"                         \"idong_yuhyeong\"             \n [9] \"pyeong_gyun_idong_sigan_bun\" \"idong_ingu_hab\""
  },
  {
    "objectID": "tidyr.html",
    "href": "tidyr.html",
    "title": "Tidyverse",
    "section": "",
    "text": "R에서 데이터 분석에 유용한 패키지들을 모아놓은 라이브러리입니다. tidyverse 내부에 포함된 패키지들은 데이터를 다루는데 있어서 편리한 기능을 제공합니다.\n\nggplot2는 데이터 시각화에 사용\ndplyr는 데이터 전처리에 사용\nreadr는 데이터를 가져오는데 사용\ntibble: modern data frames\nstringr는 문자열 처리에 사용\nforcats는 factor 데이터를 처리하는데 사용\ntidyr는 데이터를 다루기 위해서 사용\npurrr는 데이터를 다루는 함수를 제공\n\n\n\n\ncsv는 read_csv를 사용\n::은 패키지 내 함수를 사용할 때 사용\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nmoving_data &lt;- read_csv(\"./data/seoul_moving_202107_09_hr.csv\")\n\nRows: 1263554 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): 요일, 도착시간, 성별, 나이, 이동유형, 이동인구(합)\ndbl (4): 대상연월, 출발 시군구 코드, 도착 시군구 코드, 평균 이동 시간(분)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nreference_data &lt;- readxl::read_excel(\"./data/reference.xlsx\")\n\nmoving_data %&gt;% dim()\n\n[1] 1263554      10\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nmoving_data %&gt;% head()\n\n# A tibble: 6 × 10\n  대상연월 요일  도착시간 `출발 시군구 코드` `도착 시군구 코드` 성별  나이 \n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1   202107 일    09                    11010              11010 F     00   \n2   202107 일    09                    11010              11010 F     10   \n3   202107 일    09                    11010              11010 F     10   \n4   202107 일    09                    11010              11010 F     10   \n5   202107 일    09                    11010              11010 F     10   \n6   202107 일    09                    11010              11010 F     15   \n# ℹ 3 more variables: 이동유형 &lt;chr&gt;, `평균 이동 시간(분)` &lt;dbl&gt;,\n#   `이동인구(합)` &lt;chr&gt;\n\nmoving_data %&gt;% names() \n\n [1] \"대상연월\"           \"요일\"               \"도착시간\"          \n [4] \"출발 시군구 코드\"   \"도착 시군구 코드\"   \"성별\"              \n [7] \"나이\"               \"이동유형\"           \"평균 이동 시간(분)\"\n[10] \"이동인구(합)\"      \n\nmoving_data %&gt;% glimpse()\n\nRows: 1,263,554\nColumns: 10\n$ 대상연월             &lt;dbl&gt; 202107, 202107, 202107, 202107, 202107, 202107, 2…\n$ 요일                 &lt;chr&gt; \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"…\n$ 도착시간             &lt;chr&gt; \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"…\n$ `출발 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ `도착 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ 성별                 &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\",…\n$ 나이                 &lt;chr&gt; \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"…\n$ 이동유형             &lt;chr&gt; \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", \"EE\", \"…\n$ `평균 이동 시간(분)` &lt;dbl&gt; 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30, 60, 1…\n$ `이동인구(합)`       &lt;chr&gt; \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"6.05\", …\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% glimpse()\n\nRows: 91\nColumns: 4\n$ 시도        &lt;dbl&gt; 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11…\n$ 시군구      &lt;dbl&gt; 11010, 11020, 11030, 11040, 11050, 11060, 11070, 11080, 11…\n$ name        &lt;chr&gt; \"종로구\", \"중구\", \"용산구\", \"성동구\", \"광진구\", \"동대문구\"…\n$ `full name` &lt;chr&gt; \"서울특별시 종로구\", \"서울특별시 중구\", \"서울특별시 용산구…\n\nreference_data &lt;- janitor::clean_names(reference_data)\nreference_data %&gt;% names()\n\n[1] \"sido\"      \"sigungu\"   \"name\"      \"full_name\"\n\nmoving_data &lt;- janitor::clean_names(moving_data)\nmoving_data %&gt;% names()\n\n [1] \"daesang_yeon_wol\"            \"yoil\"                       \n [3] \"dochagsigan\"                 \"chulbal_sigungu_kodeu\"      \n [5] \"dochag_sigungu_kodeu\"        \"seongbyeol\"                 \n [7] \"nai\"                         \"idong_yuhyeong\"             \n [9] \"pyeong_gyun_idong_sigan_bun\" \"idong_ingu_hab\"",
    "crumbs": [
      "Home",
      "R 분석 기초",
      "Tidyverse"
    ]
  },
  {
    "objectID": "tidyr.html#데이터-불러오기",
    "href": "tidyr.html#데이터-불러오기",
    "title": "Tidyverse",
    "section": "",
    "text": "csv는 read_csv를 사용\n::은 패키지 내 함수를 사용할 때 사용\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nmoving_data &lt;- read_csv(\"./data/seoul_moving_202107_09_hr.csv\")\n\nRows: 1263554 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): 요일, 도착시간, 성별, 나이, 이동유형, 이동인구(합)\ndbl (4): 대상연월, 출발 시군구 코드, 도착 시군구 코드, 평균 이동 시간(분)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nreference_data &lt;- readxl::read_excel(\"./data/reference.xlsx\")\n\nmoving_data %&gt;% dim()\n\n[1] 1263554      10\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nmoving_data %&gt;% head()\n\n# A tibble: 6 × 10\n  대상연월 요일  도착시간 `출발 시군구 코드` `도착 시군구 코드` 성별  나이 \n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1   202107 일    09                    11010              11010 F     00   \n2   202107 일    09                    11010              11010 F     10   \n3   202107 일    09                    11010              11010 F     10   \n4   202107 일    09                    11010              11010 F     10   \n5   202107 일    09                    11010              11010 F     10   \n6   202107 일    09                    11010              11010 F     15   \n# ℹ 3 more variables: 이동유형 &lt;chr&gt;, `평균 이동 시간(분)` &lt;dbl&gt;,\n#   `이동인구(합)` &lt;chr&gt;\n\nmoving_data %&gt;% names() \n\n [1] \"대상연월\"           \"요일\"               \"도착시간\"          \n [4] \"출발 시군구 코드\"   \"도착 시군구 코드\"   \"성별\"              \n [7] \"나이\"               \"이동유형\"           \"평균 이동 시간(분)\"\n[10] \"이동인구(합)\"      \n\nmoving_data %&gt;% glimpse()\n\nRows: 1,263,554\nColumns: 10\n$ 대상연월             &lt;dbl&gt; 202107, 202107, 202107, 202107, 202107, 202107, 2…\n$ 요일                 &lt;chr&gt; \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"…\n$ 도착시간             &lt;chr&gt; \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"…\n$ `출발 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ `도착 시군구 코드`   &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ 성별                 &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\",…\n$ 나이                 &lt;chr&gt; \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"…\n$ 이동유형             &lt;chr&gt; \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", \"EE\", \"…\n$ `평균 이동 시간(분)` &lt;dbl&gt; 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30, 60, 1…\n$ `이동인구(합)`       &lt;chr&gt; \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"6.05\", …\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% head()\n\n# A tibble: 6 × 4\n   시도 시군구 name     `full name`        \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n1 11000  11010 종로구   서울특별시 종로구  \n2 11000  11020 중구     서울특별시 중구    \n3 11000  11030 용산구   서울특별시 용산구  \n4 11000  11040 성동구   서울특별시 성동구  \n5 11000  11050 광진구   서울특별시 광진구  \n6 11000  11060 동대문구 서울특별시 동대문구\n\nreference_data %&gt;% glimpse()\n\nRows: 91\nColumns: 4\n$ 시도        &lt;dbl&gt; 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11…\n$ 시군구      &lt;dbl&gt; 11010, 11020, 11030, 11040, 11050, 11060, 11070, 11080, 11…\n$ name        &lt;chr&gt; \"종로구\", \"중구\", \"용산구\", \"성동구\", \"광진구\", \"동대문구\"…\n$ `full name` &lt;chr&gt; \"서울특별시 종로구\", \"서울특별시 중구\", \"서울특별시 용산구…\n\nreference_data &lt;- janitor::clean_names(reference_data)\nreference_data %&gt;% names()\n\n[1] \"sido\"      \"sigungu\"   \"name\"      \"full_name\"\n\nmoving_data &lt;- janitor::clean_names(moving_data)\nmoving_data %&gt;% names()\n\n [1] \"daesang_yeon_wol\"            \"yoil\"                       \n [3] \"dochagsigan\"                 \"chulbal_sigungu_kodeu\"      \n [5] \"dochag_sigungu_kodeu\"        \"seongbyeol\"                 \n [7] \"nai\"                         \"idong_yuhyeong\"             \n [9] \"pyeong_gyun_idong_sigan_bun\" \"idong_ingu_hab\"",
    "crumbs": [
      "Home",
      "R 분석 기초",
      "Tidyverse"
    ]
  },
  {
    "objectID": "dplyr.html",
    "href": "dplyr.html",
    "title": "dplyr",
    "section": "",
    "text": "library(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.0\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nmoving_data &lt;- read_csv(\"./data/seoul_moving_202107_09_hr.csv\")\n\nRows: 1263554 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): 요일, 도착시간, 성별, 나이, 이동유형, 이동인구(합)\ndbl (4): 대상연월, 출발 시군구 코드, 도착 시군구 코드, 평균 이동 시간(분)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmoving_data &lt;- janitor::clean_names(moving_data)\nmoving_data %&gt;% names()\n\n [1] \"daesang_yeon_wol\"            \"yoil\"                       \n [3] \"dochagsigan\"                 \"chulbal_sigungu_kodeu\"      \n [5] \"dochag_sigungu_kodeu\"        \"seongbyeol\"                 \n [7] \"nai\"                         \"idong_yuhyeong\"             \n [9] \"pyeong_gyun_idong_sigan_bun\" \"idong_ingu_hab\"             \n\nmoving_data %&gt;% glimpse()\n\nRows: 1,263,554\nColumns: 10\n$ daesang_yeon_wol            &lt;dbl&gt; 202107, 202107, 202107, 202107, 202107, 20…\n$ yoil                        &lt;chr&gt; \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", …\n$ dochagsigan                 &lt;chr&gt; \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", …\n$ chulbal_sigungu_kodeu       &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, …\n$ dochag_sigungu_kodeu        &lt;dbl&gt; 11010, 11010, 11010, 11010, 11010, 11010, …\n$ seongbyeol                  &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F…\n$ nai                         &lt;chr&gt; \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", …\n$ idong_yuhyeong              &lt;chr&gt; \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", …\n$ pyeong_gyun_idong_sigan_bun &lt;dbl&gt; 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30…\n$ idong_ingu_hab              &lt;chr&gt; \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"…\n\nreference_data &lt;- readxl::read_excel(\"./data/reference.xlsx\")\nreference_data &lt;- janitor::clean_names(reference_data)\nreference_data %&gt;% names()\n\n[1] \"sido\"      \"sigungu\"   \"name\"      \"full_name\"\n\nreference_data %&gt;% glimpse()\n\nRows: 91\nColumns: 4\n$ sido      &lt;dbl&gt; 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 1100…\n$ sigungu   &lt;dbl&gt; 11010, 11020, 11030, 11040, 11050, 11060, 11070, 11080, 1109…\n$ name      &lt;chr&gt; \"종로구\", \"중구\", \"용산구\", \"성동구\", \"광진구\", \"동대문구\", …\n$ full_name &lt;chr&gt; \"서울특별시 종로구\", \"서울특별시 중구\", \"서울특별시 용산구\",…\n\n\n\n\n\n\n\ndistinct()\n\n\nreference_data %&gt;% distinct(sido) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    17\n\nreference_data %&gt;% distinct(sido, .keep_all = TRUE) %&gt;% dim()\n\n[1] 17  4\n\n# Q. moving_data에서 nai를 중복없이 추출하고, 그 개수를 구하세요.\nmoving_data %&gt;% distinct(nai) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    16\n\n\n\nfilter()\n\n\n# Q. 화요일에 30분 이상 이동한 데이터만 추출\nmoving_data %&gt;% filter(yoil == \"화\" & pyeong_gyun_idong_sigan_bun &gt;= 30) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1 91207\n\n# Q. 이동시간이 30분 이상인 데이터 중, 중랑구와 성북구에서 출발할 데이터\nmoving_data %&gt;% filter(pyeong_gyun_idong_sigan_bun &gt;= 30 & (chulbal_sigungu_kodeu  == 11070 | chulbal_sigungu_kodeu == 11080)) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1 26620\n\n# Q. 이동시간이 30분 이상인 데이터 중, 중랑구와 성북구에서 출발하고, 강남구로 도착한 데이터\n\n# Q. 이동시간이 30분 ~ 45분인 데이터만 추출분\nmoving_data %&gt;% filter(between(pyeong_gyun_idong_sigan_bun, 30, 45))\n\n# A tibble: 446,970 × 10\n   daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu dochag_sigungu_kodeu\n              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;                &lt;dbl&gt;\n 1           202107 일    09                          11010                11010\n 2           202107 일    09                          11010                11010\n 3           202107 일    09                          11010                11010\n 4           202107 일    09                          11010                11010\n 5           202107 일    09                          11010                11020\n 6           202107 일    09                          11010                11020\n 7           202107 일    09                          11010                11020\n 8           202107 일    09                          11010                11020\n 9           202107 일    09                          11010                11020\n10           202107 일    09                          11010                11030\n# ℹ 446,960 more rows\n# ℹ 5 more variables: seongbyeol &lt;chr&gt;, nai &lt;chr&gt;, idong_yuhyeong &lt;chr&gt;,\n#   pyeong_gyun_idong_sigan_bun &lt;dbl&gt;, idong_ingu_hab &lt;chr&gt;\n\n\n\nslice()\n\n\nreference_data %&gt;% slice(1:5)\n\n# A tibble: 5 × 4\n   sido sigungu name   full_name        \n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;            \n1 11000   11010 종로구 서울특별시 종로구\n2 11000   11020 중구   서울특별시 중구  \n3 11000   11030 용산구 서울특별시 용산구\n4 11000   11040 성동구 서울특별시 성동구\n5 11000   11050 광진구 서울특별시 광진구\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nreference_data %&gt;% slice(10:n())\n\n# A tibble: 82 × 4\n    sido sigungu name     full_name          \n   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n 1 11000   11100 도봉구   서울특별시 도봉구  \n 2 11000   11110 노원구   서울특별시 노원구  \n 3 11000   11120 은평구   서울특별시 은평구  \n 4 11000   11130 서대문구 서울특별시 서대문구\n 5 11000   11140 마포구   서울특별시 마포구  \n 6 11000   11150 양천구   서울특별시 양천구  \n 7 11000   11160 강서구   서울특별시 강서구  \n 8 11000   11170 구로구   서울특별시 구로구  \n 9 11000   11180 금천구   서울특별시 금천구  \n10 11000   11190 영등포구 서울특별시 영등포구\n# ℹ 72 more rows\n\nreference_data %&gt;% slice_max(sigungu, n = 4)\n\n# A tibble: 4 × 4\n   sido sigungu name           full_name     \n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;         \n1 39000   39000 제주특별자치도 제주특별자치도\n2 38000   38000 경상남도       경상남도      \n3 37000   37000 경상북도       경상북도      \n4 36000   36000 전라남도       전라남도      \n\nmoving_data %&gt;% mutate(nai = as.numeric(nai)) %&gt;% distinct(nai) %&gt;% slice_max(nai, n=5)\n\n# A tibble: 5 × 1\n    nai\n  &lt;dbl&gt;\n1    80\n2    75\n3    70\n4    65\n5    60\n\n\n\n\n\n\narrange()\n\n\nmoving_data %&gt;%\n  select(dochagsigan, pyeong_gyun_idong_sigan_bun) %&gt;%\n  arrange(dochagsigan, desc(pyeong_gyun_idong_sigan_bun ))\n\n# A tibble: 1,263,554 × 2\n   dochagsigan pyeong_gyun_idong_sigan_bun\n   &lt;chr&gt;                             &lt;dbl&gt;\n 1 09                                  670\n 2 09                                  650\n 3 09                                  650\n 4 09                                  640\n 5 09                                  640\n 6 09                                  630\n 7 09                                  630\n 8 09                                  620\n 9 09                                  620\n10 09                                  620\n# ℹ 1,263,544 more rows\n\n\n\nselect()\n\n\nreference_data %&gt;% \n  select(sido, full_name) %&gt;% \n  head()\n\n# A tibble: 6 × 2\n   sido full_name          \n  &lt;dbl&gt; &lt;chr&gt;              \n1 11000 서울특별시 종로구  \n2 11000 서울특별시 중구    \n3 11000 서울특별시 용산구  \n4 11000 서울특별시 성동구  \n5 11000 서울특별시 광진구  \n6 11000 서울특별시 동대문구\n\n\n\nmutate()\n\n\nmoving_data %&gt;% \n  mutate(year = substr(daesang_yeon_wol, 1, 4) %&gt;% as.integer()) %&gt;%\n  select(year, everything())\n\n# A tibble: 1,263,554 × 11\n    year daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu\n   &lt;int&gt;            &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;\n 1  2021           202107 일    09                          11010\n 2  2021           202107 일    09                          11010\n 3  2021           202107 일    09                          11010\n 4  2021           202107 일    09                          11010\n 5  2021           202107 일    09                          11010\n 6  2021           202107 일    09                          11010\n 7  2021           202107 일    09                          11010\n 8  2021           202107 일    09                          11010\n 9  2021           202107 일    09                          11010\n10  2021           202107 일    09                          11010\n# ℹ 1,263,544 more rows\n# ℹ 6 more variables: dochag_sigungu_kodeu &lt;dbl&gt;, seongbyeol &lt;chr&gt;, nai &lt;chr&gt;,\n#   idong_yuhyeong &lt;chr&gt;, pyeong_gyun_idong_sigan_bun &lt;dbl&gt;,\n#   idong_ingu_hab &lt;chr&gt;\n\nreference_data %&gt;% \n  mutate(sido_name = str_split_fixed(full_name, pattern = \" \", 2)[ ,1]) %&gt;% \n  select(sido_name) %&gt;% \n  distinct()\n\n# A tibble: 17 × 1\n   sido_name     \n   &lt;chr&gt;         \n 1 서울특별시    \n 2 부산광역시    \n 3 대구광역시    \n 4 인천광역시    \n 5 광주광역시    \n 6 대전광역시    \n 7 울산광역시    \n 8 세종특별자치시\n 9 경기도        \n10 강원도        \n11 충청북도      \n12 충청남도      \n13 전라북도      \n14 전라남도      \n15 경상북도      \n16 경상남도      \n17 제주특별자치도\n\n\n\nrename()\n\n\nmoving_data %&gt;% \n  rename(year = daesang_yeon_wol) %&gt;% \n  select(year, everything())\n\n# A tibble: 1,263,554 × 10\n     year yoil  dochagsigan chulbal_sigungu_kodeu dochag_sigungu_kodeu\n    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;                &lt;dbl&gt;\n 1 202107 일    09                          11010                11010\n 2 202107 일    09                          11010                11010\n 3 202107 일    09                          11010                11010\n 4 202107 일    09                          11010                11010\n 5 202107 일    09                          11010                11010\n 6 202107 일    09                          11010                11010\n 7 202107 일    09                          11010                11010\n 8 202107 일    09                          11010                11010\n 9 202107 일    09                          11010                11010\n10 202107 일    09                          11010                11010\n# ℹ 1,263,544 more rows\n# ℹ 5 more variables: seongbyeol &lt;chr&gt;, nai &lt;chr&gt;, idong_yuhyeong &lt;chr&gt;,\n#   pyeong_gyun_idong_sigan_bun &lt;dbl&gt;, idong_ingu_hab &lt;chr&gt;\n\n\n\nrelocate()\n\n\nmoving_data %&gt;% \n  relocate(idong_ingu_hab)\n\n# A tibble: 1,263,554 × 10\n   idong_ingu_hab daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu\n   &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;\n 1 55.41                    202107 일    09                          11010\n 2 5.9                      202107 일    09                          11010\n 3 41.5                     202107 일    09                          11010\n 4 11.98                    202107 일    09                          11010\n 5 5.93                     202107 일    09                          11010\n 6 6.05                     202107 일    09                          11010\n 7 4.04                     202107 일    09                          11010\n 8 20.39                    202107 일    09                          11010\n 9 76.78                    202107 일    09                          11010\n10 48.43                    202107 일    09                          11010\n# ℹ 1,263,544 more rows\n# ℹ 5 more variables: dochag_sigungu_kodeu &lt;dbl&gt;, seongbyeol &lt;chr&gt;, nai &lt;chr&gt;,\n#   idong_yuhyeong &lt;chr&gt;, pyeong_gyun_idong_sigan_bun &lt;dbl&gt;"
  },
  {
    "objectID": "dplyr.html#single-table-동사",
    "href": "dplyr.html#single-table-동사",
    "title": "dplyr",
    "section": "",
    "text": "distinct()\n\n\nreference_data %&gt;% distinct(sido) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    17\n\nreference_data %&gt;% distinct(sido, .keep_all = TRUE) %&gt;% dim()\n\n[1] 17  4\n\n# Q. moving_data에서 nai를 중복없이 추출하고, 그 개수를 구하세요.\nmoving_data %&gt;% distinct(nai) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    16\n\n\n\nfilter()\n\n\n# Q. 화요일에 30분 이상 이동한 데이터만 추출\nmoving_data %&gt;% filter(yoil == \"화\" & pyeong_gyun_idong_sigan_bun &gt;= 30) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1 91207\n\n# Q. 이동시간이 30분 이상인 데이터 중, 중랑구와 성북구에서 출발할 데이터\nmoving_data %&gt;% filter(pyeong_gyun_idong_sigan_bun &gt;= 30 & (chulbal_sigungu_kodeu  == 11070 | chulbal_sigungu_kodeu == 11080)) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1 26620\n\n# Q. 이동시간이 30분 이상인 데이터 중, 중랑구와 성북구에서 출발하고, 강남구로 도착한 데이터\n\n# Q. 이동시간이 30분 ~ 45분인 데이터만 추출분\nmoving_data %&gt;% filter(between(pyeong_gyun_idong_sigan_bun, 30, 45))\n\n# A tibble: 446,970 × 10\n   daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu dochag_sigungu_kodeu\n              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;                &lt;dbl&gt;\n 1           202107 일    09                          11010                11010\n 2           202107 일    09                          11010                11010\n 3           202107 일    09                          11010                11010\n 4           202107 일    09                          11010                11010\n 5           202107 일    09                          11010                11020\n 6           202107 일    09                          11010                11020\n 7           202107 일    09                          11010                11020\n 8           202107 일    09                          11010                11020\n 9           202107 일    09                          11010                11020\n10           202107 일    09                          11010                11030\n# ℹ 446,960 more rows\n# ℹ 5 more variables: seongbyeol &lt;chr&gt;, nai &lt;chr&gt;, idong_yuhyeong &lt;chr&gt;,\n#   pyeong_gyun_idong_sigan_bun &lt;dbl&gt;, idong_ingu_hab &lt;chr&gt;\n\n\n\nslice()\n\n\nreference_data %&gt;% slice(1:5)\n\n# A tibble: 5 × 4\n   sido sigungu name   full_name        \n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;            \n1 11000   11010 종로구 서울특별시 종로구\n2 11000   11020 중구   서울특별시 중구  \n3 11000   11030 용산구 서울특별시 용산구\n4 11000   11040 성동구 서울특별시 성동구\n5 11000   11050 광진구 서울특별시 광진구\n\nreference_data %&gt;% dim()\n\n[1] 91  4\n\nreference_data %&gt;% slice(10:n())\n\n# A tibble: 82 × 4\n    sido sigungu name     full_name          \n   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;              \n 1 11000   11100 도봉구   서울특별시 도봉구  \n 2 11000   11110 노원구   서울특별시 노원구  \n 3 11000   11120 은평구   서울특별시 은평구  \n 4 11000   11130 서대문구 서울특별시 서대문구\n 5 11000   11140 마포구   서울특별시 마포구  \n 6 11000   11150 양천구   서울특별시 양천구  \n 7 11000   11160 강서구   서울특별시 강서구  \n 8 11000   11170 구로구   서울특별시 구로구  \n 9 11000   11180 금천구   서울특별시 금천구  \n10 11000   11190 영등포구 서울특별시 영등포구\n# ℹ 72 more rows\n\nreference_data %&gt;% slice_max(sigungu, n = 4)\n\n# A tibble: 4 × 4\n   sido sigungu name           full_name     \n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;         \n1 39000   39000 제주특별자치도 제주특별자치도\n2 38000   38000 경상남도       경상남도      \n3 37000   37000 경상북도       경상북도      \n4 36000   36000 전라남도       전라남도      \n\nmoving_data %&gt;% mutate(nai = as.numeric(nai)) %&gt;% distinct(nai) %&gt;% slice_max(nai, n=5)\n\n# A tibble: 5 × 1\n    nai\n  &lt;dbl&gt;\n1    80\n2    75\n3    70\n4    65\n5    60\n\n\n\n\n\n\narrange()\n\n\nmoving_data %&gt;%\n  select(dochagsigan, pyeong_gyun_idong_sigan_bun) %&gt;%\n  arrange(dochagsigan, desc(pyeong_gyun_idong_sigan_bun ))\n\n# A tibble: 1,263,554 × 2\n   dochagsigan pyeong_gyun_idong_sigan_bun\n   &lt;chr&gt;                             &lt;dbl&gt;\n 1 09                                  670\n 2 09                                  650\n 3 09                                  650\n 4 09                                  640\n 5 09                                  640\n 6 09                                  630\n 7 09                                  630\n 8 09                                  620\n 9 09                                  620\n10 09                                  620\n# ℹ 1,263,544 more rows\n\n\n\nselect()\n\n\nreference_data %&gt;% \n  select(sido, full_name) %&gt;% \n  head()\n\n# A tibble: 6 × 2\n   sido full_name          \n  &lt;dbl&gt; &lt;chr&gt;              \n1 11000 서울특별시 종로구  \n2 11000 서울특별시 중구    \n3 11000 서울특별시 용산구  \n4 11000 서울특별시 성동구  \n5 11000 서울특별시 광진구  \n6 11000 서울특별시 동대문구\n\n\n\nmutate()\n\n\nmoving_data %&gt;% \n  mutate(year = substr(daesang_yeon_wol, 1, 4) %&gt;% as.integer()) %&gt;%\n  select(year, everything())\n\n# A tibble: 1,263,554 × 11\n    year daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu\n   &lt;int&gt;            &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;\n 1  2021           202107 일    09                          11010\n 2  2021           202107 일    09                          11010\n 3  2021           202107 일    09                          11010\n 4  2021           202107 일    09                          11010\n 5  2021           202107 일    09                          11010\n 6  2021           202107 일    09                          11010\n 7  2021           202107 일    09                          11010\n 8  2021           202107 일    09                          11010\n 9  2021           202107 일    09                          11010\n10  2021           202107 일    09                          11010\n# ℹ 1,263,544 more rows\n# ℹ 6 more variables: dochag_sigungu_kodeu &lt;dbl&gt;, seongbyeol &lt;chr&gt;, nai &lt;chr&gt;,\n#   idong_yuhyeong &lt;chr&gt;, pyeong_gyun_idong_sigan_bun &lt;dbl&gt;,\n#   idong_ingu_hab &lt;chr&gt;\n\nreference_data %&gt;% \n  mutate(sido_name = str_split_fixed(full_name, pattern = \" \", 2)[ ,1]) %&gt;% \n  select(sido_name) %&gt;% \n  distinct()\n\n# A tibble: 17 × 1\n   sido_name     \n   &lt;chr&gt;         \n 1 서울특별시    \n 2 부산광역시    \n 3 대구광역시    \n 4 인천광역시    \n 5 광주광역시    \n 6 대전광역시    \n 7 울산광역시    \n 8 세종특별자치시\n 9 경기도        \n10 강원도        \n11 충청북도      \n12 충청남도      \n13 전라북도      \n14 전라남도      \n15 경상북도      \n16 경상남도      \n17 제주특별자치도\n\n\n\nrename()\n\n\nmoving_data %&gt;% \n  rename(year = daesang_yeon_wol) %&gt;% \n  select(year, everything())\n\n# A tibble: 1,263,554 × 10\n     year yoil  dochagsigan chulbal_sigungu_kodeu dochag_sigungu_kodeu\n    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;                &lt;dbl&gt;\n 1 202107 일    09                          11010                11010\n 2 202107 일    09                          11010                11010\n 3 202107 일    09                          11010                11010\n 4 202107 일    09                          11010                11010\n 5 202107 일    09                          11010                11010\n 6 202107 일    09                          11010                11010\n 7 202107 일    09                          11010                11010\n 8 202107 일    09                          11010                11010\n 9 202107 일    09                          11010                11010\n10 202107 일    09                          11010                11010\n# ℹ 1,263,544 more rows\n# ℹ 5 more variables: seongbyeol &lt;chr&gt;, nai &lt;chr&gt;, idong_yuhyeong &lt;chr&gt;,\n#   pyeong_gyun_idong_sigan_bun &lt;dbl&gt;, idong_ingu_hab &lt;chr&gt;\n\n\n\nrelocate()\n\n\nmoving_data %&gt;% \n  relocate(idong_ingu_hab)\n\n# A tibble: 1,263,554 × 10\n   idong_ingu_hab daesang_yeon_wol yoil  dochagsigan chulbal_sigungu_kodeu\n   &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;\n 1 55.41                    202107 일    09                          11010\n 2 5.9                      202107 일    09                          11010\n 3 41.5                     202107 일    09                          11010\n 4 11.98                    202107 일    09                          11010\n 5 5.93                     202107 일    09                          11010\n 6 6.05                     202107 일    09                          11010\n 7 4.04                     202107 일    09                          11010\n 8 20.39                    202107 일    09                          11010\n 9 76.78                    202107 일    09                          11010\n10 48.43                    202107 일    09                          11010\n# ℹ 1,263,544 more rows\n# ℹ 5 more variables: dochag_sigungu_kodeu &lt;dbl&gt;, seongbyeol &lt;chr&gt;, nai &lt;chr&gt;,\n#   idong_yuhyeong &lt;chr&gt;, pyeong_gyun_idong_sigan_bun &lt;dbl&gt;"
  },
  {
    "objectID": "r4ds_2nd.html",
    "href": "r4ds_2nd.html",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(ggthemes)\n\n\n\n\nOur ultimate goal in this chapter is to recreate the following visualization displaying the relationship between flipper lengths and body masses of these penguins, taking into consideration the species of the penguin.\n\n\n용어정의(variable, value, Tabular data)\n\n변수, 값, 표 데이터에 대해서 정의합니다. 데이터 분석의 경우 교재가 통계학에서 영향을 받은 경우 ‘독립/종속’ 등과 같은 용어를 쓰기 때문에 가능하면 교재에서 제시한 용어의 의미를 명확하게 이해하는 것이 우선입니다.\n\n\n\nTo make the discussion easier, let’s define some terms: A variable is a quantity, quality, or property that you can measure. A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. An observation is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. We’ll sometimes refer to an observation as a data point. Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row.\n\n\npenguins %&gt;% glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\npenguins의 데이테는 데이터프레임이 아니라 tibble 입니다. 데이터프레임과 tibble의 차이점은 이 곳을 참고하세요.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nggplot2를 사용해서 해당 데이터를 시각화해보도록 하겠습니다.\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\npipe operator를 사용해서 코드를 작성하였습니다. pipe operator는 %&gt;% 입니다. pipe operator를 사용하면 코드의 가독성이 좋아지기 때문에 사용하는 것이 좋습니다.\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, colour = species)) +\n  geom_density()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(aes(colour = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"loess\", na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (musthaver?)의 경우 3장, 4장을 참고하세요. (forallr?)의 경우 2장, 3장을 참고하세요.\n\n\n\n\n\n\n\n실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(musthaver?)의 경우 5장, 6장을 참고하세요. (forallr?)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(musthaver?)의 경우 7장, 8장을 참고하세요. (forallr?)의 경우 4장을 참고하세요."
  },
  {
    "objectID": "r4ds_2nd.html#appendix",
    "href": "r4ds_2nd.html#appendix",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (musthaver?)의 경우 3장, 4장을 참고하세요. (forallr?)의 경우 2장, 3장을 참고하세요."
  },
  {
    "objectID": "r4ds_2nd.html#제어와-함수",
    "href": "r4ds_2nd.html#제어와-함수",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(musthaver?)의 경우 5장, 6장을 참고하세요. (forallr?)의 경우 4장을 참고하세요.\n\n\n\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(musthaver?)의 경우 7장, 8장을 참고하세요. (forallr?)의 경우 4장을 참고하세요."
  },
  {
    "objectID": "r4ds_2nd.html#whole-game",
    "href": "r4ds_2nd.html#whole-game",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "Our ultimate goal in this chapter is to recreate the following visualization displaying the relationship between flipper lengths and body masses of these penguins, taking into consideration the species of the penguin.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(ggthemes)\n\n\n용어정의(variable, value, Tabular data)\n\n변수, 값, 표 데이터에 대해서 정의합니다. 데이터 분석의 경우 교재가 통계학에서 영향을 받은 경우 ‘독립/종속’ 등과 같은 용어를 쓰기 때문에 가능하면 교재에서 제시한 용어의 의미를 명확하게 이해하는 것이 우선입니다.\n\n\n\nTo make the discussion easier, let’s define some terms: A variable is a quantity, quality, or property that you can measure. A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. An observation is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. We’ll sometimes refer to an observation as a data point. Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row.\n\n\npenguins %&gt;% glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…",
    "crumbs": [
      "Home",
      "R 기초",
      "`R4DS 2nd`에서 배운 것"
    ]
  },
  {
    "objectID": "r4ds_2nd.html#data-visualization",
    "href": "r4ds_2nd.html#data-visualization",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "Our ultimate goal in this chapter is to recreate the following visualization displaying the relationship between flipper lengths and body masses of these penguins, taking into consideration the species of the penguin.\n\n\n용어정의(variable, value, Tabular data)\n\n변수, 값, 표 데이터에 대해서 정의합니다. 데이터 분석의 경우 교재가 통계학에서 영향을 받은 경우 ‘독립/종속’ 등과 같은 용어를 쓰기 때문에 가능하면 교재에서 제시한 용어의 의미를 명확하게 이해하는 것이 우선입니다.\n\n\n\nTo make the discussion easier, let’s define some terms: A variable is a quantity, quality, or property that you can measure. A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. An observation is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. We’ll sometimes refer to an observation as a data point. Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row.\n\n\npenguins %&gt;% glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\npenguins의 데이테는 데이터프레임이 아니라 tibble 입니다. 데이터프레임과 tibble의 차이점은 이 곳을 참고하세요.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nggplot2를 사용해서 해당 데이터를 시각화해보도록 하겠습니다.\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\npipe operator를 사용해서 코드를 작성하였습니다. pipe operator는 %&gt;% 입니다. pipe operator를 사용하면 코드의 가독성이 좋아지기 때문에 사용하는 것이 좋습니다.\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, colour = species)) +\n  geom_density()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(aes(colour = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"loess\", na.rm = TRUE)"
  },
  {
    "objectID": "r4ds_2nd_01.html",
    "href": "r4ds_2nd_01.html",
    "title": "Data visualization",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(ggthemes)",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#data-visualization",
    "href": "r4ds_2nd_01.html#data-visualization",
    "title": "R4DS 2nd에서 배운 것",
    "section": "",
    "text": "Our ultimate goal in this chapter is to recreate the following visualization displaying the relationship between flipper lengths and body masses of these penguins, taking into consideration the species of the penguin.\n\n\n용어정의(variable, value, Tabular data)\n\n변수, 값, 표 데이터에 대해서 정의합니다. 데이터 분석의 경우 교재가 통계학에서 영향을 받은 경우 ‘독립/종속’ 등과 같은 용어를 쓰기 때문에 가능하면 교재에서 제시한 용어의 의미를 명확하게 이해하는 것이 우선입니다.\n\n\n\nTo make the discussion easier, let’s define some terms: A variable is a quantity, quality, or property that you can measure. A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. An observation is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. We’ll sometimes refer to an observation as a data point. Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row.\n\n\npenguins %&gt;% glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\npenguins의 데이테는 데이터프레임이 아니라 tibble 입니다. 데이터프레임과 tibble의 차이점은 이 곳을 참고하세요.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nggplot2를 사용해서 해당 데이터를 시각화해보도록 하겠습니다.\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\npipe operator를 사용해서 코드를 작성하였습니다. pipe operator는 %&gt;% 입니다. pipe operator를 사용하면 코드의 가독성이 좋아지기 때문에 사용하는 것이 좋습니다.\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, colour = species)) +\n  geom_density()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(aes(colour = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"loess\", na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% \n  ggplot(aes(y = species))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% ggplot(aes(x = species)) +\n  geom_bar(fill = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;% \n  ggplot(aes(x = carat)) +\n  geom_histogram(binwidth = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% ggplot(mapping = aes(\n  x = bill_length_mm, y = bill_depth_mm, \n  color = species, shape = species\n  )) +\n  geom_point(na.rm = TRUE) +\n  labs(color = \"Species\", shape = \"Species\")\n\n\n\n\n\n\n\n\n\n\n\n\npenguins %&gt;% ggplot(aes(x = island, fill = species)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\npenguins %&gt;% ggplot(aes(x = species, fill = island)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n#|eval : False\nmpg %&gt;% \n  ggplot() +\n  geom_point(aes(x = cty, y = hwy))\n\n\n\n\n\n\n\nggsave(\"mpg-plot.pdf\")\n\nSaving 7 x 5 in image",
    "crumbs": [
      "Home",
      "R4DS",
      "`R4DS 2nd`에서 배운 것"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#appendix",
    "href": "r4ds_2nd_01.html#appendix",
    "title": "Data visualization",
    "section": "Appendix",
    "text": "Appendix\n\n벡터\n\n벡터는 자료형이 같은 스칼라를 원소로 갖는 1차원 자료구조 입니다. R은 5가지 주요 자료구조(벡터, 행렬, 배열, 리스트, 데이터프레임)을 제공합니다. 그중에서 벡터가 기본 자료구조이며, 나머지 4개의 자료구조는 벡터를 기반으로 확장된 자료구조입니다.\n\n벡터에 관련된 내용은 이 곳을 참고하세요. 일반적으로 R 교재 등을 참고하기 보다는 R에서 제공하는 도움말을 활용하는 것이 좋습니다. R에서 제공하는 도움말은 ?를 사용하여 확인할 수 있습니다. 하지만 가독성이 좋지 않기 때문에 가능하면 홈페이지를 참고하세요.\n그리고, vector 관련 내용 중에서 범주형 자료를 다른 항목도 함께 참고하세요.\n\n\n리스트\n\n리스트는 R에서 가장 다양한 객체를 원소로 가질 수 있는 자료구조입니다. 스칼라, 벡터, 행렬은 물론 데이터프레임, 리스트 및 함수도 원소로 가질 수 있습니다. 이러한 리스트의 특성은 다양한 객체를 하나로 담는 역할을 수행합니다. 따라서 함수가 반환해야 할 객체가 서로 다른 자료구조를 가질 때 리스트를 주로 사용하기 때문에, 많은 함수들의 반환값으로 해당 자료구조가 선택됩니다.\n\n리스트에 관련된 내용은 이 곳을 참고하세요. 매뉴얼에 제시된 수준이면 R을 사용해서 문제를 해결하는데 큰 어려움은 없습니다.\n\n\n데이터프레임\n\nR을 사용해서 데이터 분석을 하다면 가장 많이 다루게 될 자료구조 입니다. 리스트가 행벡터를 원소가 가진다면, 데이터프레임은 열벡터를 원소로 가집니다. 따라서 데이터프레임은 열벡터를 가로 방향으로 붙여서 행과 열을 갖는 직사각형 모양으로 출력됩니다. 데이터프레임의 모든 열벡터는 길이가 같아야 합니다. 만약 길이가 다른 열벡터로 데이터프레임을 생성하려고 하면 에러가 발생합니다.\n\n데이터프레임에 관련된 내용은 이 곳을 참고하세요. 데이터프레임은 R에서 가장 많이 사용되는 자료구조이기 때문에, 해당 자료구조에 대해서 별도의 연습이 필요합니다. 관련하여 아래와 같은 교재를 참고하세요. (나성호, 2021)의 경우 3장, 4장을 참고하세요. (오세종, 2023)의 경우 2장, 3장을 참고하세요.\n\n\n제어와 함수\n\n제어문\n\n실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n함수\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#제어와-함수",
    "href": "r4ds_2nd_01.html#제어와-함수",
    "title": "1 Data visualization",
    "section": "제어와 함수",
    "text": "제어와 함수\n\n제어문\n\n실행 흐름을 분기하는 if, ifelse와 반복문인 for, while, repeat, break, next 등을 제공합니다. 이러한 제어문을 사용하여 프로그램의 실행 흐름을 제어할 수 있습니다.\n\n제어문에 관련된 내용은 이 곳을 참고하세요. 제어문에 대한 이해가 부족하면 프로그램을 작성하는데 어려움이 있을 수 있으니 별도로 연습이 필요합니다.\n(나성호, 2021)의 경우 5장, 6장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.\n\n\n함수\n\n사용자 정의 함수 뿐만 아니라 라이브러리에서 제공하는 함수를 이해하기 위해서 함수를 학습하게 됩니다.\n\n함수에 관련된 내용은 이 곳을 참고하세요. 다른 라이브러리를 활용하기 위해서 함수에 대한 이해가 필요합니다. 그리고 데이터프레임을 활용하기 위해서는 apply 등과 같은 함수를 사용해야 하기 때문에 관련 내용은 잘 파악해두시기 바랍니다.\n(나성호, 2021)의 경우 7장, 8장을 참고하세요. (오세종, 2023)의 경우 4장을 참고하세요.",
    "crumbs": [
      "Home",
      "R4DS",
      "1 Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#연습문제-1.2.5",
    "href": "r4ds_2nd_01.html#연습문제-1.2.5",
    "title": "Data visualization",
    "section": "연습문제 1.2.5",
    "text": "연습문제 1.2.5\n\n3\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n4\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, y = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n5\n\nggplot(data = penguins, mapping = aes(x = bill_depth_mm, colour = species)) +\n  geom_density()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\n\n\n8\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(aes(colour = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"loess\", na.rm = TRUE)",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#연습문제-1.4.3",
    "href": "r4ds_2nd_01.html#연습문제-1.4.3",
    "title": "Data visualization",
    "section": "연습문제 1.4.3",
    "text": "연습문제 1.4.3\n\n1\n\npenguins %&gt;% \n  ggplot(aes(y = species))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n2\n\npenguins %&gt;% \n  ggplot(aes(x = species)) +\n  geom_bar(fill = \"red\")\n\n\n\n\n\n\n\n\n\n\n4\n\ndiamonds %&gt;% \n  ggplot(aes(x = carat)) +\n  geom_histogram(binwidth = 0.5)",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#연습문제-1.5.5",
    "href": "r4ds_2nd_01.html#연습문제-1.5.5",
    "title": "Data visualization",
    "section": "연습문제 1.5.5",
    "text": "연습문제 1.5.5\n\n6\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = bill_length_mm, y = bill_depth_mm, \n                       color = species, shape = species)) +\n  geom_point(na.rm = TRUE) +\n  labs(color = \"Species\", shape = \"Species\")\n\n\n\n\n\n\n\n\n\n\n7\n\npenguins %&gt;% ggplot(aes(x = island, fill = species)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\npenguins %&gt;% ggplot(aes(x = species, fill = island)) +\n  geom_bar(position = \"fill\")",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_01.html#r을-활용한-시각화-기초",
    "href": "r4ds_2nd_01.html#r을-활용한-시각화-기초",
    "title": "Data visualization",
    "section": "R을 활용한 시각화 기초",
    "text": "R을 활용한 시각화 기초\n\n정리1. 용어\n\nvariable, value, Tabular data(변수, 값, 표 데이터)에 대해서 정의\n데이터 분석의 경우 교재가 통계학에서 영향을 받은 경우 ‘독립/종속’ 등과 같은 용어를 쓰기 때문에 가능하면 교재에서 제시한 용어의 의미를 명확하게 이해하는 것이 우선\n\n\nTo make the discussion easier, let’s define some terms: A variable is a quantity, quality, or property that you can measure. A value is the state of a variable when you measure it. The value of a variable may change from measurement to measurement. An observation is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. We’ll sometimes refer to an observation as a data point. Tabular data is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own “cell”, each variable in its own column, and each observation in its own row.\n\n\npenguins %&gt;% glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n정리2. 데이터 자료형\n\npenguins의 데이테는 데이터프레임이 아니라 tibble 임\n데이터프레임과 tibble의 차이점은 이 곳을 참고\n\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n정리3. 간단한 시각화\n\n‘산점도, 막대, 선’ 그리고 ‘박스플롯’\nggplot2를 사용해서 해당 데이터를 시각화\n\n\nggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n정리4. pipe operator\n\n%&gt;% / |&gt;를 사용해서 코드를 작성하고 있으며, pipe operator는 %&gt;%임\npipe operator를 사용하면 코드의 가독성이 좋아지기 때문에 사용하는 것이 좋음\n\n\npenguins %&gt;% \n  ggplot(mapping = aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +\n  geom_smooth(formula = y ~ x, method = \"lm\", na.rm = TRUE) +\n  labs(title = \"Body mass and flipper length\",\n       subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n       x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n       color = \"Species\", shape = \"Species\") +\n  scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\n정리5. 변수 유형에 따른 그래프 선택\n\n변수 유형에 따라서 적절한 그래프를 사용\n범주형 변수의 경우 막대그래프를 사용하고, 연속형 변수의 경우 산점도를 사용하는 것이 일반적\n변수의 개수에 따라 변수가 1개인 경우 히스토그램을 사용하고, 2개인 경우 산점도를 사용하는 것이 일반적(Midway (2020), Kelleher & Wagener (2011), Islam & Jin (2019) 등도 함께 참고)",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_03.html",
    "href": "r4ds_2nd_03.html",
    "title": "Data transformation",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(nycflights13)\nlibrary(ggthemes)\nflights %&gt;% \n  glimpse()\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\nflights |&gt;\n  filter(dest == \"IAH\") |&gt; \n  group_by(year, month, day) |&gt; \n  summarize(\n    arr_delay = mean(arr_delay, na.rm = TRUE)\n  ) \n\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;\n 1  2013     1     1     17.8 \n 2  2013     1     2      7   \n 3  2013     1     3     18.3 \n 4  2013     1     4     -3.2 \n 5  2013     1     5     20.2 \n 6  2013     1     6      9.28\n 7  2013     1     7     -7.74\n 8  2013     1     8      7.79\n 9  2013     1     9     18.1 \n10  2013     1    10      6.68\n# ℹ 355 more rows",
    "crumbs": [
      "Home",
      "R4DS",
      "Data transformation"
    ]
  },
  {
    "objectID": "r4ds_2nd_03.html#row",
    "href": "r4ds_2nd_03.html#row",
    "title": "Data transformation",
    "section": "Row",
    "text": "Row\n\nfilter\n\nThe most important verbs that operate on rows of a dataset are filter() […]\n\n\nflights |&gt; \n  filter(dep_delay &gt; 120)\n\n# A tibble: 9,723 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ℹ 9,713 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nflights |&gt; \n  filter(month == 1 & day == 1)\n\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  filter(month == 1 | month == 2)\n\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  filter(month %in% c(1, 2))\n\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\njan1 &lt;- flights |&gt; \n  filter(month == 1 & day == 1)\n\n\n\narrange\n\narrange() changes the order of the rows based on the value of the columns. […]\n\n\nflights |&gt; \n  arrange(year, month, day, dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\ndistinct\n\ndistinct() finds all the unique rows in a dataset, so in a technical sense…\n\n\nflights |&gt; \n  distinct()\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  distinct(origin, dest)\n\n# A tibble: 224 × 2\n   origin dest \n   &lt;chr&gt;  &lt;chr&gt;\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ℹ 214 more rows\n\n\n\nAlternatively, if you want to the keep other columns when filtering for unique rows, you can use the .keep_all = TRUE option.\n\n\nflights |&gt; \n  distinct(origin, dest, .keep_all = TRUE)\n\n# A tibble: 224 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 214 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nflights |&gt;\n  count(origin, dest, sort = TRUE)\n\n# A tibble: 224 × 3\n   origin dest      n\n   &lt;chr&gt;  &lt;chr&gt; &lt;int&gt;\n 1 JFK    LAX   11262\n 2 LGA    ATL   10263\n 3 LGA    ORD    8857\n 4 JFK    SFO    8204\n 5 LGA    CLT    6168\n 6 EWR    ORD    6100\n 7 JFK    BOS    5898\n 8 LGA    MIA    5781\n 9 JFK    MCO    5464\n10 EWR    BOS    5327\n# ℹ 214 more rows\n\n\n\n\n연습문제 3.2.5\n\n1\n\n# Had an arrival delay of two or more hours\nflights |&gt;\n  filter(arr_delay &gt;= 120) |&gt;\n  arrange(desc(arr_delay))\n\n# A tibble: 10,200 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     7    22     2257            759       898      121           1026\n 9  2013    12     5      756           1700       896     1058           2020\n10  2013     5     3     1133           2055       878     1250           2215\n# ℹ 10,190 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n# Flew to Houston (IAH or HOU)\nflights |&gt;\n  filter(dest %in% c(\"IAH\", \"HOU\"))\n\n# A tibble: 9,313 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      623            627        -4      933            932\n 4  2013     1     1      728            732        -4     1041           1038\n 5  2013     1     1      739            739         0     1104           1038\n 6  2013     1     1      908            908         0     1228           1219\n 7  2013     1     1     1028           1026         2     1350           1339\n 8  2013     1     1     1044           1045        -1     1352           1351\n 9  2013     1     1     1114            900       134     1447           1222\n10  2013     1     1     1205           1200         5     1503           1505\n# ℹ 9,303 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n# Were operated by United, American, or Delta\nflights |&gt;\n  filter(carrier %in% c(\"UA\", \"AA\", \"DL\"))\n\n# A tibble: 139,504 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      554            600        -6      812            837\n 5  2013     1     1      554            558        -4      740            728\n 6  2013     1     1      558            600        -2      753            745\n 7  2013     1     1      558            600        -2      924            917\n 8  2013     1     1      558            600        -2      923            937\n 9  2013     1     1      559            600        -1      941            910\n10  2013     1     1      559            600        -1      854            902\n# ℹ 139,494 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n# Departed in summer (July, August, and September)\nflights |&gt;\n  filter(month %in% c(7, 8, 9))\n\n# A tibble: 86,326 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     7     1        1           2029       212      236           2359\n 2  2013     7     1        2           2359         3      344            344\n 3  2013     7     1       29           2245       104      151              1\n 4  2013     7     1       43           2130       193      322             14\n 5  2013     7     1       44           2150       174      300            100\n 6  2013     7     1       46           2051       235      304           2358\n 7  2013     7     1       48           2001       287      308           2305\n 8  2013     7     1       58           2155       183      335             43\n 9  2013     7     1      100           2146       194      327             30\n10  2013     7     1      100           2245       135      337            135\n# ℹ 86,316 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n# Arrived more than two hours late, but didn’t leave late\nflights |&gt; \n  filter(arr_delay &gt;= 120 & dep_delay &lt;= 0) |&gt; view()\n\n# Were delayed by at least an hour, but made up over 30 minutes in flight\nflights |&gt; \n  filter(dep_delay &gt;= 60 & dep_delay - arr_delay &gt; 30)\n\n# A tibble: 1,844 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1     2205           1720       285       46           2040\n 2  2013     1     1     2326           2130       116      131             18\n 3  2013     1     3     1503           1221       162     1803           1555\n 4  2013     1     3     1839           1700        99     2056           1950\n 5  2013     1     3     1850           1745        65     2148           2120\n 6  2013     1     3     1941           1759       102     2246           2139\n 7  2013     1     3     1950           1845        65     2228           2227\n 8  2013     1     3     2015           1915        60     2135           2111\n 9  2013     1     3     2257           2000       177       45           2224\n10  2013     1     4     1917           1700       137     2135           1950\n# ℹ 1,834 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n2\n\nflights |&gt; \n  arrange(desc(dep_delay)) |&gt; \n  arrange(sched_dep_time) |&gt;\n  relocate(dep_delay, sched_dep_time)\n\n# A tibble: 336,776 × 19\n   dep_delay sched_dep_time  year month   day dep_time arr_time sched_arr_time\n       &lt;dbl&gt;          &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1        NA            106  2013     7    27       NA       NA            245\n 2       188            500  2013     4    24      808     1008            640\n 3        61            500  2013     9    13      601      732            648\n 4        47            500  2013     3     9      547      733            648\n 5        44            500  2013     6     8      544      727            640\n 6        29            500  2013     4    17      529      704            640\n 7        25            500  2013     6    30      525      703            640\n 8        22            500  2013    11    28      522      658            651\n 9        20            500  2013     4    21      520      705            640\n10        18            500  2013     6     3      518      654            640\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n3\n\nflights |&gt; \n  mutate(speed = distance / (air_time / 60)) |&gt;\n  arrange(desc(speed)) |&gt;\n  relocate(speed)\n\n# A tibble: 336,776 × 20\n   speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1  703.  2013     5    25     1709           1700         9     1923\n 2  650.  2013     7     2     1558           1513        45     1745\n 3  648   2013     5    13     2040           2025        15     2225\n 4  641.  2013     3    23     1914           1910         4     2045\n 5  591.  2013     1    12     1559           1600        -1     1849\n 6  564   2013    11    17      650            655        -5     1059\n 7  557.  2013     2    21     2355           2358        -3      412\n 8  556.  2013    11    17      759            800        -1     1212\n 9  554.  2013    11    16     2003           1925        38       17\n10  554.  2013    11    16     2349           2359       -10      402\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n4\n\nflights |&gt; \n  distinct(year, month, day) |&gt;\n  nrow()\n\n[1] 365\n\n\n\n\n5\n\nflights |&gt; \n  arrange(desc(distance)) |&gt;\n  relocate(distance)\n\n# A tibble: 336,776 × 19\n   distance  year month   day dep_time sched_dep_time dep_delay arr_time\n      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1     4983  2013     1     1      857            900        -3     1516\n 2     4983  2013     1     2      909            900         9     1525\n 3     4983  2013     1     3      914            900        14     1504\n 4     4983  2013     1     4      900            900         0     1516\n 5     4983  2013     1     5      858            900        -2     1519\n 6     4983  2013     1     6     1019            900        79     1558\n 7     4983  2013     1     7     1042            900       102     1620\n 8     4983  2013     1     8      901            900         1     1504\n 9     4983  2013     1     9      641            900      1301     1242\n10     4983  2013     1    10      859            900        -1     1449\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Home",
      "R4DS",
      "Data transformation"
    ]
  },
  {
    "objectID": "r4ds_2nd_03.html#columns",
    "href": "r4ds_2nd_03.html#columns",
    "title": "Data transformation",
    "section": "Columns",
    "text": "Columns\n\nmutate\n\nThe job of mutate() is to add new columns that are calculated from the existing columns.\n\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60\n  )\n\n# A tibble: 336,776 × 21\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 13 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, gain &lt;dbl&gt;, speed &lt;dbl&gt;\n\n\n\n[…] We can use the .before argument to instead add the variables to the left hand side.\n\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .before = 1\n  )\n\n# A tibble: 336,776 × 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .after = day\n  )\n\n# A tibble: 336,776 × 21\n    year month   day  gain speed dep_time sched_dep_time dep_delay arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1  2013     1     1    -9  370.      517            515         2      830\n 2  2013     1     1   -16  374.      533            529         4      850\n 3  2013     1     1   -31  408.      542            540         2      923\n 4  2013     1     1    17  517.      544            545        -1     1004\n 5  2013     1     1    19  394.      554            600        -6      812\n 6  2013     1     1   -16  288.      554            558        -4      740\n 7  2013     1     1   -24  404.      555            600        -5      913\n 8  2013     1     1    11  259.      557            600        -3      709\n 9  2013     1     1     5  405.      557            600        -3      838\n10  2013     1     1   -10  319.      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    hours = air_time / 60,\n    gain_per_hour = gain / hours,\n    .keep = \"used\"\n  )\n\n# A tibble: 336,776 × 6\n   dep_delay arr_delay air_time  gain hours gain_per_hour\n       &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1         2        11      227    -9 3.78          -2.38\n 2         4        20      227   -16 3.78          -4.23\n 3         2        33      160   -31 2.67         -11.6 \n 4        -1       -18      183    17 3.05           5.57\n 5        -6       -25      116    19 1.93           9.83\n 6        -4        12      150   -16 2.5           -6.4 \n 7        -5        19      158   -24 2.63          -9.11\n 8        -3       -14       53    11 0.883         12.5 \n 9        -3        -8      140     5 2.33           2.14\n10        -2         8      138   -10 2.3           -4.35\n# ℹ 336,766 more rows\n\n\n\n\nselect\n\n[…] select() allows you to rapidly zoom in on a useful subset using operations based on the names of the variables:\n\n\nflights |&gt; \n  select(year, month, day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\nflights |&gt; \n  select(year:day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\nflights |&gt; \n  select(!year:day)\n\n# A tibble: 336,776 × 16\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1      517            515         2      830            819        11 UA     \n 2      533            529         4      850            830        20 UA     \n 3      542            540         2      923            850        33 AA     \n 4      544            545        -1     1004           1022       -18 B6     \n 5      554            600        -6      812            837       -25 DL     \n 6      554            558        -4      740            728        12 UA     \n 7      555            600        -5      913            854        19 B6     \n 8      557            600        -3      709            723       -14 EV     \n 9      557            600        -3      838            846        -8 B6     \n10      558            600        -2      753            745         8 AA     \n# ℹ 336,766 more rows\n# ℹ 9 more variables: flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;,\n#   air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  select(where(is.character))\n\n# A tibble: 336,776 × 4\n   carrier tailnum origin dest \n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;\n 1 UA      N14228  EWR    IAH  \n 2 UA      N24211  LGA    IAH  \n 3 AA      N619AA  JFK    MIA  \n 4 B6      N804JB  JFK    BQN  \n 5 DL      N668DN  LGA    ATL  \n 6 UA      N39463  EWR    ORD  \n 7 B6      N516JB  EWR    FLL  \n 8 EV      N829AS  LGA    IAD  \n 9 B6      N593JB  JFK    MCO  \n10 AA      N3ALAA  LGA    ORD  \n# ℹ 336,766 more rows\n\nflights |&gt; \n  select(tail_num = tailnum)\n\n# A tibble: 336,776 × 1\n   tail_num\n   &lt;chr&gt;   \n 1 N14228  \n 2 N24211  \n 3 N619AA  \n 4 N804JB  \n 5 N668DN  \n 6 N39463  \n 7 N516JB  \n 8 N829AS  \n 9 N593JB  \n10 N3ALAA  \n# ℹ 336,766 more rows\n\n\n\n\nrename\n\nIf you have a bunch of inconsistently named columns and it would be painful to fix them all by hand, check out janitor::clean_names() which provides some useful automated cleaning.\n\n\nflights |&gt; \n  rename(tail_num = tailnum)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tail_num &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nrelocate\n\nflights |&gt; \n  relocate(time_hour, air_time)\n\n# A tibble: 336,776 × 19\n   time_hour           air_time  year month   day dep_time sched_dep_time\n   &lt;dttm&gt;                 &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1 2013-01-01 05:00:00      227  2013     1     1      517            515\n 2 2013-01-01 05:00:00      227  2013     1     1      533            529\n 3 2013-01-01 05:00:00      160  2013     1     1      542            540\n 4 2013-01-01 05:00:00      183  2013     1     1      544            545\n 5 2013-01-01 06:00:00      116  2013     1     1      554            600\n 6 2013-01-01 05:00:00      150  2013     1     1      554            558\n 7 2013-01-01 06:00:00      158  2013     1     1      555            600\n 8 2013-01-01 06:00:00       53  2013     1     1      557            600\n 9 2013-01-01 06:00:00      140  2013     1     1      557            600\n10 2013-01-01 06:00:00      138  2013     1     1      558            600\n# ℹ 336,766 more rows\n# ℹ 12 more variables: dep_delay &lt;dbl&gt;, arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;,\n#   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;,\n#   dest &lt;chr&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;\n\nflights |&gt; \n  relocate(year:dep_time, .after = time_hour)\n\n# A tibble: 336,776 × 19\n   sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight\n            &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;    &lt;int&gt;\n 1            515         2      830            819        11 UA        1545\n 2            529         4      850            830        20 UA        1714\n 3            540         2      923            850        33 AA        1141\n 4            545        -1     1004           1022       -18 B6         725\n 5            600        -6      812            837       -25 DL         461\n 6            558        -4      740            728        12 UA        1696\n 7            600        -5      913            854        19 B6         507\n 8            600        -3      709            723       -14 EV        5708\n 9            600        -3      838            846        -8 B6          79\n10            600        -2      753            745         8 AA         301\n# ℹ 336,766 more rows\n# ℹ 12 more variables: tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, year &lt;int&gt;,\n#   month &lt;int&gt;, day &lt;int&gt;, dep_time &lt;int&gt;\n\nflights |&gt; \n  relocate(starts_with(\"arr\"), .before = dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day arr_time arr_delay dep_time sched_dep_time dep_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;\n 1  2013     1     1      830        11      517            515         2\n 2  2013     1     1      850        20      533            529         4\n 3  2013     1     1      923        33      542            540         2\n 4  2013     1     1     1004       -18      544            545        -1\n 5  2013     1     1      812       -25      554            600        -6\n 6  2013     1     1      740        12      554            558        -4\n 7  2013     1     1      913        19      555            600        -5\n 8  2013     1     1      709       -14      557            600        -3\n 9  2013     1     1      838        -8      557            600        -3\n10  2013     1     1      753         8      558            600        -2\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n연습문제 3.3.5\n\n1\n\nflights |&gt; \n  relocate(dep_time, sched_dep_time, dep_delay)\n\n# A tibble: 336,776 × 19\n   dep_time sched_dep_time dep_delay  year month   day arr_time sched_arr_time\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1      517            515         2  2013     1     1      830            819\n 2      533            529         4  2013     1     1      850            830\n 3      542            540         2  2013     1     1      923            850\n 4      544            545        -1  2013     1     1     1004           1022\n 5      554            600        -6  2013     1     1      812            837\n 6      554            558        -4  2013     1     1      740            728\n 7      555            600        -5  2013     1     1      913            854\n 8      557            600        -3  2013     1     1      709            723\n 9      557            600        -3  2013     1     1      838            846\n10      558            600        -2  2013     1     1      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n2\n\nflights |&gt; \n  select(dep_time, dep_delay, arr_time, arr_delay)\n\n# A tibble: 336,776 × 4\n   dep_time dep_delay arr_time arr_delay\n      &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1      517         2      830        11\n 2      533         4      850        20\n 3      542         2      923        33\n 4      544        -1     1004       -18\n 5      554        -6      812       -25\n 6      554        -4      740        12\n 7      555        -5      913        19\n 8      557        -3      709       -14\n 9      557        -3      838        -8\n10      558        -2      753         8\n# ℹ 336,766 more rows\n\nflights |&gt; \n  select(starts_with(\"dep\"), starts_with(\"arr\"))\n\n# A tibble: 336,776 × 4\n   dep_time dep_delay arr_time arr_delay\n      &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1      517         2      830        11\n 2      533         4      850        20\n 3      542         2      923        33\n 4      544        -1     1004       -18\n 5      554        -6      812       -25\n 6      554        -4      740        12\n 7      555        -5      913        19\n 8      557        -3      709       -14\n 9      557        -3      838        -8\n10      558        -2      753         8\n# ℹ 336,766 more rows\n\nflights |&gt;\n  select(dep_time:arr_delay, -contains(\"sched\"))\n\n# A tibble: 336,776 × 4\n   dep_time dep_delay arr_time arr_delay\n      &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1      517         2      830        11\n 2      533         4      850        20\n 3      542         2      923        33\n 4      544        -1     1004       -18\n 5      554        -6      812       -25\n 6      554        -4      740        12\n 7      555        -5      913        19\n 8      557        -3      709       -14\n 9      557        -3      838        -8\n10      558        -2      753         8\n# ℹ 336,766 more rows\n\n\n\n\n3\n\nflights |&gt; \n  select(dep_time, dep_time)\n\n# A tibble: 336,776 × 1\n   dep_time\n      &lt;int&gt;\n 1      517\n 2      533\n 3      542\n 4      544\n 5      554\n 6      554\n 7      555\n 8      557\n 9      557\n10      558\n# ℹ 336,766 more rows\n\n\n\n\n4\n\nvariables &lt;- c(\"year\", \"month\", \"day\", \"dep_delay\", \"arr_delay\")\n\nflights |&gt; \n  select(any_of(variables))\n\n# A tibble: 336,776 × 5\n    year month   day dep_delay arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1  2013     1     1         2        11\n 2  2013     1     1         4        20\n 3  2013     1     1         2        33\n 4  2013     1     1        -1       -18\n 5  2013     1     1        -6       -25\n 6  2013     1     1        -4        12\n 7  2013     1     1        -5        19\n 8  2013     1     1        -3       -14\n 9  2013     1     1        -3        -8\n10  2013     1     1        -2         8\n# ℹ 336,766 more rows\n\n\n\n\n5\n\nflights |&gt; \n  select(contains(\"TIME\"))\n\n# A tibble: 336,776 × 6\n   dep_time sched_dep_time arr_time sched_arr_time air_time time_hour          \n      &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;dbl&gt; &lt;dttm&gt;             \n 1      517            515      830            819      227 2013-01-01 05:00:00\n 2      533            529      850            830      227 2013-01-01 05:00:00\n 3      542            540      923            850      160 2013-01-01 05:00:00\n 4      544            545     1004           1022      183 2013-01-01 05:00:00\n 5      554            600      812            837      116 2013-01-01 06:00:00\n 6      554            558      740            728      150 2013-01-01 05:00:00\n 7      555            600      913            854      158 2013-01-01 06:00:00\n 8      557            600      709            723       53 2013-01-01 06:00:00\n 9      557            600      838            846      140 2013-01-01 06:00:00\n10      558            600      753            745      138 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n\nflights |&gt; \n  select(contains(\"TIME\", ignore.case = FALSE))\n\n# A tibble: 336,776 × 0\n\n\n\n\n6\n\nflights |&gt;\n  rename(air_time_min = air_time) |&gt;\n  relocate(air_time_min)\n\n# A tibble: 336,776 × 19\n   air_time_min  year month   day dep_time sched_dep_time dep_delay arr_time\n          &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1          227  2013     1     1      517            515         2      830\n 2          227  2013     1     1      533            529         4      850\n 3          160  2013     1     1      542            540         2      923\n 4          183  2013     1     1      544            545        -1     1004\n 5          116  2013     1     1      554            600        -6      812\n 6          150  2013     1     1      554            558        -4      740\n 7          158  2013     1     1      555            600        -5      913\n 8           53  2013     1     1      557            600        -3      709\n 9          140  2013     1     1      557            600        -3      838\n10          138  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Home",
      "R4DS",
      "Data transformation"
    ]
  },
  {
    "objectID": "r4ds_2nd_02.html",
    "href": "r4ds_2nd_02.html",
    "title": "Workflow - basics",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(ggthemes)\n\n\n[…] But while you should expect to be a little frustrated, take comfort in that this experience is typical and temporary: it happens to everyone, and the only way to get over it is to keep trying.\n\n\n\n\n\nReferences\n\nHadley Wickham, G. G. (2023). R for data science 2nd. O’Reilly Media."
  },
  {
    "objectID": "r4ds_2nd_01.html#연습문제-1.6.1",
    "href": "r4ds_2nd_01.html#연습문제-1.6.1",
    "title": "Data visualization",
    "section": "연습문제 1.6.1",
    "text": "연습문제 1.6.1\n\nmpg %&gt;% \n  ggplot() +\n  geom_point(aes(x = cty, y = hwy))\n\n\n\n\n\n\n\n# ggsave(\"mpg-plot.pdf\")",
    "crumbs": [
      "Home",
      "R4DS",
      "Data visualization"
    ]
  },
  {
    "objectID": "r4ds_2nd_03.html#the-pipe",
    "href": "r4ds_2nd_03.html#the-pipe",
    "title": "Data transformation",
    "section": "The Pipe",
    "text": "The Pipe\n\nWhile both forms have their time and place, the pipe generally produces data analysis code that is easier to write and read.\n\n\nflights |&gt; \n  filter(dest == \"IAH\") |&gt; \n  mutate(speed = distance / air_time * 60) |&gt; \n  select(year:day, dep_time, carrier, flight, speed) |&gt; \n  arrange(desc(speed))\n\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows",
    "crumbs": [
      "Home",
      "R4DS",
      "Data transformation"
    ]
  },
  {
    "objectID": "r4ds_2nd_03.html#groups",
    "href": "r4ds_2nd_03.html#groups",
    "title": "Data transformation",
    "section": "Groups",
    "text": "Groups\n\nSo far you’ve learned about functions that work with rows and columns. dplyr gets even more powerful when you add in the ability to work with groups.\n\n\ngroup_by\n\nUse group_by() to divide your dataset into groups meaningful for your analysis\n\n\nflights |&gt; \n  group_by(month)\n\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nsummarize\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay)\n  )\n\n# A tibble: 12 × 2\n   month avg_delay\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1        NA\n 2     2        NA\n 3     3        NA\n 4     4        NA\n 5     5        NA\n 6     6        NA\n 7     7        NA\n 8     8        NA\n 9     9        NA\n10    10        NA\n11    11        NA\n12    12        NA\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE)\n  )\n\n# A tibble: 12 × 2\n   month avg_delay\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1     10.0 \n 2     2     10.8 \n 3     3     13.2 \n 4     4     13.9 \n 5     5     13.0 \n 6     6     20.8 \n 7     7     21.7 \n 8     8     12.6 \n 9     9      6.72\n10    10      6.24\n11    11      5.44\n12    12     16.6 \n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    n = n()\n  )\n\n# A tibble: 12 × 3\n   month avg_delay     n\n   &lt;int&gt;     &lt;dbl&gt; &lt;int&gt;\n 1     1     10.0  27004\n 2     2     10.8  24951\n 3     3     13.2  28834\n 4     4     13.9  28330\n 5     5     13.0  28796\n 6     6     20.8  28243\n 7     7     21.7  29425\n 8     8     12.6  29327\n 9     9      6.72 27574\n10    10      6.24 28889\n11    11      5.44 27268\n12    12     16.6  28135\n\n\n\n\nslice_\n\nflights |&gt; \n  group_by(dest) |&gt; \n  slice_max(arr_delay, n = 1) |&gt;\n  relocate(dest)\n\n# A tibble: 108 × 19\n# Groups:   dest [105]\n   dest   year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 ABQ    2013     7    22     2145           2007        98      132\n 2 ACK    2013     7    23     1139            800       219     1250\n 3 ALB    2013     1    25      123           2000       323      229\n 4 ANC    2013     8    17     1740           1625        75     2042\n 5 ATL    2013     7    22     2257            759       898      121\n 6 AUS    2013     7    10     2056           1505       351     2347\n 7 AVL    2013     8    13     1156            832       204     1417\n 8 BDL    2013     2    21     1728           1316       252     1839\n 9 BGR    2013    12     1     1504           1056       248     1628\n10 BHM    2013     4    10       25           1900       325      136\n# ℹ 98 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nGrouping by multiple variables\n\ndaily &lt;- flights |&gt;  \n  group_by(year, month, day)\n\n\ndaily_flights &lt;- daily |&gt; \n  summarize(n = n())\n\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n\ndaily_flights &lt;- daily |&gt; \n  summarize(\n    n = n(), \n    .groups = \"drop_last\"\n  )\n\n\n\nUngrouping\n\ndaily |&gt; \n  ungroup()\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\ndaily |&gt; \n  ungroup() |&gt;\n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE), \n    flights = n()\n  )\n\n# A tibble: 1 × 2\n  avg_delay flights\n      &lt;dbl&gt;   &lt;int&gt;\n1      12.6  336776\n\n\n\n\n.by\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = month\n  )\n\n# A tibble: 12 × 3\n   month delay     n\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1 10.0  27004\n 2    10  6.24 28889\n 3    11  5.44 27268\n 4    12 16.6  28135\n 5     2 10.8  24951\n 6     3 13.2  28834\n 7     4 13.9  28330\n 8     5 13.0  28796\n 9     6 20.8  28243\n10     7 21.7  29425\n11     8 12.6  29327\n12     9  6.72 27574\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = c(origin, dest)\n  )\n\n# A tibble: 224 × 4\n   origin dest  delay     n\n   &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;int&gt;\n 1 EWR    IAH   11.8   3973\n 2 LGA    IAH    9.06  2951\n 3 JFK    MIA    9.34  3314\n 4 JFK    BQN    6.67   599\n 5 LGA    ATL   11.4  10263\n 6 EWR    ORD   14.6   6100\n 7 EWR    FLL   13.5   3793\n 8 LGA    IAD   16.7   1803\n 9 JFK    MCO   10.6   5464\n10 LGA    ORD   10.7   8857\n# ℹ 214 more rows\n\n\n\n\n연습문제 3.5.7\n\n1\n\nflights |&gt;\n  group_by(carrier) |&gt;\n  summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |&gt;\n  arrange(desc(avg_dep_delay))\n\n# A tibble: 16 × 2\n   carrier avg_dep_delay\n   &lt;chr&gt;           &lt;dbl&gt;\n 1 F9              20.2 \n 2 EV              20.0 \n 3 YV              19.0 \n 4 FL              18.7 \n 5 WN              17.7 \n 6 9E              16.7 \n 7 B6              13.0 \n 8 VX              12.9 \n 9 OO              12.6 \n10 UA              12.1 \n11 MQ              10.6 \n12 DL               9.26\n13 AA               8.59\n14 AS               5.80\n15 HA               4.90\n16 US               3.78\n\n\n\n\n2\n\nflights |&gt; \n  group_by(dest) |&gt; \n  arrange(dest, desc(dep_delay)) |&gt;\n  slice_head(n = 5) |&gt;\n  relocate(dest, dep_delay)\n\n# A tibble: 517 × 19\n# Groups:   dest [105]\n   dest  dep_delay  year month   day dep_time sched_dep_time arr_time\n   &lt;chr&gt;     &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;\n 1 ABQ         142  2013    12    14     2223           2001      133\n 2 ABQ         139  2013    12    17     2220           2001      120\n 3 ABQ         125  2013     7    30     2212           2007       57\n 4 ABQ         125  2013     9     2     2212           2007       48\n 5 ABQ         119  2013     7    23     2206           2007      116\n 6 ACK         219  2013     7    23     1139            800     1250\n 7 ACK         138  2013     7     2     1018            800     1119\n 8 ACK         117  2013     7     4      957            800     1106\n 9 ACK         101  2013     5    30     1321           1140     1419\n10 ACK         100  2013     6    24      940            800     1111\n# ℹ 507 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n3\n\nflights |&gt;\n  group_by(hour) |&gt;\n  summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |&gt;\n  ggplot(aes(x = hour, y = avg_dep_delay)) + \n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n\n4\n\nflights |&gt; \n  slice_min(dep_delay, n = -5) |&gt;\n  relocate(dep_delay)\n\n# A tibble: 336,776 × 19\n   dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n       &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1       -43  2013    12     7     2040           2123       40           2352\n 2       -33  2013     2     3     2022           2055     2240           2338\n 3       -32  2013    11    10     1408           1440     1549           1559\n 4       -30  2013     1    11     1900           1930     2233           2243\n 5       -27  2013     1    29     1703           1730     1947           1957\n 6       -26  2013     8     9      729            755     1002            955\n 7       -25  2013    10    23     1907           1932     2143           2143\n 8       -25  2013     3    30     2030           2055     2213           2250\n 9       -24  2013     3     2     1431           1455     1601           1631\n10       -24  2013     5     5      934            958     1225           1309\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  slice_min(dep_delay, n = 5) |&gt;\n  relocate(dep_delay)\n\n# A tibble: 5 × 19\n  dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n1       -43  2013    12     7     2040           2123       40           2352\n2       -33  2013     2     3     2022           2055     2240           2338\n3       -32  2013    11    10     1408           1440     1549           1559\n4       -30  2013     1    11     1900           1930     2233           2243\n5       -27  2013     1    29     1703           1730     1947           1957\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  slice_max(dep_delay, n = -5) |&gt;\n  relocate(dep_delay)\n\n# A tibble: 336,776 × 19\n   dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n       &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1      1301  2013     1     9      641            900     1242           1530\n 2      1137  2013     6    15     1432           1935     1607           2120\n 3      1126  2013     1    10     1121           1635     1239           1810\n 4      1014  2013     9    20     1139           1845     1457           2210\n 5      1005  2013     7    22      845           1600     1044           1815\n 6       960  2013     4    10     1100           1900     1342           2211\n 7       911  2013     3    17     2321            810      135           1020\n 8       899  2013     6    27      959           1900     1236           2226\n 9       898  2013     7    22     2257            759      121           1026\n10       896  2013    12     5      756           1700     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; \n  slice_max(dep_delay, n = 5) |&gt;\n  relocate(dep_delay)\n\n# A tibble: 5 × 19\n  dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n1      1301  2013     1     9      641            900     1242           1530\n2      1137  2013     6    15     1432           1935     1607           2120\n3      1126  2013     1    10     1121           1635     1239           1810\n4      1014  2013     9    20     1139           1845     1457           2210\n5      1005  2013     7    22      845           1600     1044           1815\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n6\n\ndf &lt;- tibble(\n  x = 1:5,\n  y = c(\"a\", \"b\", \"a\", \"a\", \"b\"),\n  z = c(\"K\", \"K\", \"L\", \"L\", \"K\")\n)\ndf |&gt;\n  group_by(y)\n\n# A tibble: 5 × 3\n# Groups:   y [2]\n      x y     z    \n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 a     K    \n2     2 b     K    \n3     3 a     L    \n4     4 a     L    \n5     5 b     K    \n\ndf |&gt;\n  arrange(y)\n\n# A tibble: 5 × 3\n      x y     z    \n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 a     K    \n2     3 a     L    \n3     4 a     L    \n4     2 b     K    \n5     5 b     K    \n\ndf |&gt;\n  group_by(y) |&gt;\n  summarize(mean_x = mean(x))\n\n# A tibble: 2 × 2\n  y     mean_x\n  &lt;chr&gt;  &lt;dbl&gt;\n1 a       2.67\n2 b       3.5 \n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x))\n\n`summarise()` has grouped output by 'y'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 3 × 3\n# Groups:   y [2]\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x), .groups = \"drop\")\n\n# A tibble: 3 × 3\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  summarize(mean_x = mean(x))\n\n`summarise()` has grouped output by 'y'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 3 × 3\n# Groups:   y [2]\n  y     z     mean_x\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\ndf |&gt;\n  group_by(y, z) |&gt;\n  mutate(mean_x = mean(x))\n\n# A tibble: 5 × 4\n# Groups:   y, z [3]\n      x y     z     mean_x\n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n1     1 a     K        1  \n2     2 b     K        3.5\n3     3 a     L        3.5\n4     4 a     L        3.5\n5     5 b     K        3.5",
    "crumbs": [
      "Home",
      "R4DS",
      "Data transformation"
    ]
  },
  {
    "objectID": "r4ds_2nd_04.html",
    "href": "r4ds_2nd_04.html",
    "title": "Workflow - code style",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.\nlibrary(tidyverse)\nlibrary(nycflights13)\nlibrary(ggthemes)",
    "crumbs": [
      "Home",
      "R4DS",
      "Workflow - code style"
    ]
  },
  {
    "objectID": "r4ds_2nd_04.html#naems",
    "href": "r4ds_2nd_04.html#naems",
    "title": "Workflow - code style",
    "section": "Naems",
    "text": "Naems\n\n# Strive for:\nshort_flights &lt;- flights |&gt; filter(air_time &lt; 60)\n\n# Avoid:\nSHORTFLIGHTS &lt;- flights |&gt; filter(air_time &lt; 60)",
    "crumbs": [
      "Home",
      "R4DS",
      "Workflow - code style"
    ]
  },
  {
    "objectID": "r4ds_2nd_04.html#spaces",
    "href": "r4ds_2nd_04.html#spaces",
    "title": "Workflow - code style",
    "section": "Spaces",
    "text": "Spaces\n\n# Strive for\nz &lt;- (a + b)^2 / d\n\n# Avoid\nz&lt;-( a + b ) ^ 2/d\n\n\n# Strive for\nmean(x, na.rm = TRUE)\n\n# Avoid\nmean (x ,na.rm=TRUE)",
    "crumbs": [
      "Home",
      "R4DS",
      "Workflow - code style"
    ]
  },
  {
    "objectID": "r4ds_2nd_04.html#pipes",
    "href": "r4ds_2nd_04.html#pipes",
    "title": "Workflow - code style",
    "section": "Pipes",
    "text": "Pipes\n\n# Strive for \nflights |&gt;  \n  filter(!is.na(arr_delay), !is.na(tailnum)) |&gt; \n  count(dest)\n\n# Avoid\nflights|&gt;filter(!is.na(arr_delay), !is.na(tailnum))|&gt;count(dest)\n\n# Strive for\nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\n# Avoid\nflights |&gt;\n  group_by(\n    tailnum\n  ) |&gt; \n  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())\n\n# Strive for \nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\n# Avoid\nflights|&gt;\n  group_by(tailnum) |&gt; \n  summarize(\n             delay = mean(arr_delay, na.rm = TRUE), \n             n = n()\n           )\n\n# Avoid\nflights|&gt;\n  group_by(tailnum) |&gt; \n  summarize(\n  delay = mean(arr_delay, na.rm = TRUE), \n  n = n()\n  )\n\n# This fits compactly on one line\ndf |&gt; mutate(y = x + 1)\n\n# While this takes up 4x as many lines, it's easily extended to \n# more variables and more steps in the future\ndf |&gt; \n  mutate(\n    y = x + 1\n  )",
    "crumbs": [
      "Home",
      "R4DS",
      "Workflow - code style"
    ]
  },
  {
    "objectID": "r4ds_2nd_04.html#ggplot2",
    "href": "r4ds_2nd_04.html#ggplot2",
    "title": "Workflow - code style",
    "section": "ggplot2",
    "text": "ggplot2\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE)\n  ) |&gt; \n  ggplot(aes(x = month, y = delay)) +\n  geom_point() + \n  geom_line()\n\nflights |&gt; \n  group_by(dest) |&gt; \n  summarize(\n    distance = mean(distance),\n    speed = mean(distance / air_time, na.rm = TRUE)\n  ) |&gt; \n  ggplot(aes(x = distance, y = speed)) +\n  geom_smooth(\n    method = \"loess\",\n    span = 0.5,\n    se = FALSE, \n    color = \"white\", \n    linewidth = 4\n  ) +\n  geom_point()",
    "crumbs": [
      "Home",
      "R4DS",
      "Workflow - code style"
    ]
  },
  {
    "objectID": "r4ds_2nd_04.html#section",
    "href": "r4ds_2nd_04.html#section",
    "title": "Workflow - code style",
    "section": "Section",
    "text": "Section\n\n# Load data --------------------------------------\n\n# Plot data --------------------------------------",
    "crumbs": [
      "Home",
      "R4DS",
      "Workflow - code style"
    ]
  },
  {
    "objectID": "r4ds_2nd_04.html#연습문제-4.7",
    "href": "r4ds_2nd_04.html#연습문제-4.7",
    "title": "Workflow - code style",
    "section": "연습문제 4.7",
    "text": "연습문제 4.7\n\nflights |&gt;\n  filter(dest == \"IAH\") |&gt;\n  group_by(year, month, day) |&gt;\n  summarize(\n    n = n(),\n    delay = mean(arr_delay, na.rm = TRUE)\n  ) |&gt;\n  filter(n &gt; 10)\n\nflights |&gt;\n  filter(\n    carrier == \"UA\", \n    dest %in% c(\"IAH\", \"HOU\"), \n    sched_dep_time &gt; 0900, \n    sched_arr_time &lt; 2000\n  ) |&gt;\n  group_by(flight) |&gt;\n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE), \n    cancelled = sum(is.na(arr_delay)), n = n()\n  ) |&gt;\n  filter(n &gt; 10)",
    "crumbs": [
      "Home",
      "R4DS",
      "Workflow - code style"
    ]
  },
  {
    "objectID": "r4ds_2nd_07.html",
    "href": "r4ds_2nd_07.html",
    "title": "Data import",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "Home",
      "R4DS",
      "Data import"
    ]
  },
  {
    "objectID": "r4ds_2nd_07.html#reading-data-from-a-file",
    "href": "r4ds_2nd_07.html#reading-data-from-a-file",
    "title": "Data import",
    "section": "Reading data from a file",
    "text": "Reading data from a file\n\nstudents &lt;- read_csv(\"data/students.csv\")\n\nRows: 6 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstudents &lt;- read_csv(\"data/students.csv\", na = c(\"N/A\", \"\"))\n\nRows: 6 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nstudents |&gt; \n  rename(\n    student_id = `Student ID`,\n    full_name = `Full Name`\n  )\n\n# A tibble: 6 × 5\n  student_id full_name        favourite.food     mealPlan            AGE  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents |&gt; janitor::clean_names()\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents |&gt;\n  janitor::clean_names() |&gt;\n  mutate(meal_plan = factor(meal_plan))\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents &lt;- students |&gt;\n  janitor::clean_names() |&gt;\n  mutate(\n    meal_plan = factor(meal_plan),\n    age = parse_number(if_else(age == \"five\", \"5\", age))\n  )\n\n\n연습문제 7.2.4\n\nannoying &lt;- tibble(\n  `1` = 1:10,\n  `2` = `1` * 2 + rnorm(length(`1`))\n)\n\nannoying |&gt;\n  select(`1`)\n\n# A tibble: 10 × 1\n     `1`\n   &lt;int&gt;\n 1     1\n 2     2\n 3     3\n 4     4\n 5     5\n 6     6\n 7     7\n 8     8\n 9     9\n10    10\n\nggplot(annoying, aes(x = `2`, y = `1`)) +\n  geom_point()\n\n\n\n\n\n\n\nannoying |&gt;\n  mutate(`3` = `2` / `1`)\n\n# A tibble: 10 × 3\n     `1`   `2`   `3`\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  2.12  2.12\n 2     2  4.14  2.07\n 3     3  4.92  1.64\n 4     4  9.28  2.32\n 5     5  9.43  1.89\n 6     6 12.3   2.05\n 7     7 12.8   1.83\n 8     8 16.8   2.10\n 9     9 18.3   2.04\n10    10 21.1   2.11\n\nannoying |&gt;\n  mutate(`3` = `2` / `1`) |&gt;\n  rename(\n    \"one\" = `1`,\n    \"two\" = `2`,\n    \"three\" = `3`\n  )\n\n# A tibble: 10 × 3\n     one   two three\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  2.12  2.12\n 2     2  4.14  2.07\n 3     3  4.92  1.64\n 4     4  9.28  2.32\n 5     5  9.43  1.89\n 6     6 12.3   2.05\n 7     7 12.8   1.83\n 8     8 16.8   2.10\n 9     9 18.3   2.04\n10    10 21.1   2.11",
    "crumbs": [
      "Home",
      "R4DS",
      "Data import"
    ]
  },
  {
    "objectID": "r4ds_2nd_07.html#data-entry",
    "href": "r4ds_2nd_07.html#data-entry",
    "title": "Data import",
    "section": "Data entry",
    "text": "Data entry\n\ntribble(\n  ~x, ~y, ~z,\n  1, \"h\", 0.08,\n  2, \"m\", 0.83,\n  5, \"g\", 0.60\n)\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6",
    "crumbs": [
      "Home",
      "R4DS",
      "Data import"
    ]
  },
  {
    "objectID": "r4ds_2nd_05.html",
    "href": "r4ds_2nd_05.html",
    "title": "Data tidying",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.",
    "crumbs": [
      "Home",
      "R4DS",
      "Data tidying"
    ]
  },
  {
    "objectID": "r4ds_2nd_05.html#tidy-data",
    "href": "r4ds_2nd_05.html#tidy-data",
    "title": "Data tidying",
    "section": "Tidy data",
    "text": "Tidy data\n\n“Happy families are all alike; every unhappy family is unhappy in its own way.” — Leo Tolstoy, “Tidy datasets are all alike, but every messy dataset is messy in its own way.” — Hadley Wickham\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggthemes)\n\n\nOne of them, table1, will be much easier to work with inside the tidyverse because it’s tidy.\n\n\ntable1 # tidy!\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\nThere are three interrelated rules that make a dataset tidy: - Each variable is a column; each column is a variable. - Each observation is a row; each row is an observation. - Each value is a cell; each cell is a single value.\nWhy ensure that your data is tidy? There are two main advantages: - If you have a consistent data structure, it’s easier to learn the tools that work with it because they have an underlying uniformity. - There’s a specific advantage to placing variables in columns because it allows R’s vectorized nature to shine.\n\n# Compute rate per 10,000\ntable1 |&gt;\n  mutate(rate = cases / population * 10000)\n\n# A tibble: 6 × 5\n  country      year  cases population  rate\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071 0.373\n2 Afghanistan  2000   2666   20595360 1.29 \n3 Brazil       1999  37737  172006362 2.19 \n4 Brazil       2000  80488  174504898 4.61 \n5 China        1999 212258 1272915272 1.67 \n6 China        2000 213766 1280428583 1.67 \n\ntable1 |&gt; \n  group_by(year) |&gt; \n  summarize(total_cases = sum(cases))\n\n# A tibble: 2 × 2\n   year total_cases\n  &lt;dbl&gt;       &lt;dbl&gt;\n1  1999      250740\n2  2000      296920\n\nggplot(table1, aes(x = year, y = cases)) +\n  geom_line(aes(group = country), color = \"grey50\") +\n  geom_point(aes(color = country, shape = country)) +\n  scale_x_continuous(breaks = c(1999, 2000)) # x-axis breaks at 1999 and 2000",
    "crumbs": [
      "Home",
      "R4DS",
      "Data tidying"
    ]
  },
  {
    "objectID": "r4ds_2nd_05.html#연습문제-5.2.1",
    "href": "r4ds_2nd_05.html#연습문제-5.2.1",
    "title": "Data tidying",
    "section": "연습문제 5.2.1",
    "text": "연습문제 5.2.1\n\n2\n\ntable2 |&gt;\n  pivot_wider(\n    names_from = type,\n    values_from = count\n  ) |&gt; \n  mutate(rate = cases / population * 10000)\n\n# A tibble: 6 × 5\n  country      year  cases population  rate\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071 0.373\n2 Afghanistan  2000   2666   20595360 1.29 \n3 Brazil       1999  37737  172006362 2.19 \n4 Brazil       2000  80488  174504898 4.61 \n5 China        1999 212258 1272915272 1.67 \n6 China        2000 213766 1280428583 1.67 \n\n\n\ntable3 |&gt;\n  separate_wider_delim(\n    cols = rate, \n    delim = \"/\", \n    names = c(\"cases\", \"population\"),\n  ) |&gt;\n  mutate(\n    cases = as.numeric(cases),\n    population = as.numeric(population),\n    rate = cases / population * 10000\n  )\n\n# A tibble: 6 × 5\n  country      year  cases population  rate\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071 0.373\n2 Afghanistan  2000   2666   20595360 1.29 \n3 Brazil       1999  37737  172006362 2.19 \n4 Brazil       2000  80488  174504898 4.61 \n5 China        1999 212258 1272915272 1.67 \n6 China        2000 213766 1280428583 1.67",
    "crumbs": [
      "Home",
      "R4DS",
      "Data tidying"
    ]
  },
  {
    "objectID": "r4ds_2nd_05.html#lengthening-data",
    "href": "r4ds_2nd_05.html#lengthening-data",
    "title": "Data tidying",
    "section": "Lengthening data",
    "text": "Lengthening data\nThe principles of tidy data might seem so obvious that you wonder if you’ll ever encounter a dataset that isn’t tidy. Unfortunately, however, most real data is untidy. There are two main reasons: - Data is often organized to facilitate some goal other than analysis. For example, it’s common for data to be structured to make data entry, not analysis, easy. - Most people aren’t familiar with the principles of tidy data, and it’s hard to derive them yourself unless you spend a lot of time working with data.\nThis means that most real analyses will require at least a little tidying. You’ll begin by figuring out what the underlying variables and observations are. Sometimes this is easy; other times you’ll need to consult with the people who originally generated the data. Next, you’ll pivot your data into a tidy form, with variables in the columns and observations in the rows.\n\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\"\n  )\n\n# A tibble: 24,092 × 5\n   artist track                   date.entered week   rank\n   &lt;chr&gt;  &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk8      NA\n 9 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk9      NA\n10 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk10     NA\n# ℹ 24,082 more rows\n\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# ℹ 5,297 more rows\n\nbillboard_longer &lt;- billboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  ) |&gt; \n  mutate(\n    week = parse_number(week)\n  )\n\nbillboard_longer |&gt; \n  ggplot(aes(x = week, y = rank, group = track)) + \n  geom_line(alpha = 0.25) + \n  scale_y_reverse()\n\n\n\n\n\n\n\n\n\nHow does pivoting work?\n\ndf &lt;- tribble(\n  ~id,  ~bp1, ~bp2,\n   \"A\",  100,  120,\n   \"B\",  140,  115,\n   \"C\",  120,  125\n)\n\ndf |&gt; \n  pivot_longer(\n    cols = bp1:bp2,\n    names_to = \"measurement\",\n    values_to = \"value\"\n  )\n\n# A tibble: 6 × 3\n  id    measurement value\n  &lt;chr&gt; &lt;chr&gt;       &lt;dbl&gt;\n1 A     bp1           100\n2 A     bp2           120\n3 B     bp1           140\n4 B     bp2           115\n5 C     bp1           120\n6 C     bp2           125\n\n\n\n\nMany variables in column names\n\n[…] To organize these six pieces of information in six separate columns, we use pivot_longer() with a vector of column names for names_to and instructors for splitting the original variable names into pieces for names_sep as well as a column name for values_to\n\n\nwho2 |&gt; \n  pivot_longer(\n    cols = !(country:year),\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n    names_sep = \"_\",\n    values_to = \"count\"\n  )\n\n# A tibble: 405,440 × 6\n   country      year diagnosis gender age   count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 Afghanistan  1980 sp        m      014      NA\n 2 Afghanistan  1980 sp        m      1524     NA\n 3 Afghanistan  1980 sp        m      2534     NA\n 4 Afghanistan  1980 sp        m      3544     NA\n 5 Afghanistan  1980 sp        m      4554     NA\n 6 Afghanistan  1980 sp        m      5564     NA\n 7 Afghanistan  1980 sp        m      65       NA\n 8 Afghanistan  1980 sp        f      014      NA\n 9 Afghanistan  1980 sp        f      1524     NA\n10 Afghanistan  1980 sp        f      2534     NA\n# ℹ 405,430 more rows\n\n\n\n\nData and variable names in the column headers\n\nTo solve this problem we again need to supply a vector to names_to but this time we use the special “.value” sentinel; this isn’t the name of a variable but a unique value that tells pivot_longer() to do something different. This overrides the usual values_to argument to use the first component of the pivoted column name as a variable name in the output.\n\n\nhousehold |&gt; \n  pivot_longer(\n    cols = !family, \n    names_to = c(\".value\", \"child\"), \n    names_sep = \"_\", \n    values_drop_na = TRUE\n  )\n\n# A tibble: 9 × 4\n  family child  dob        name  \n   &lt;int&gt; &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt; \n1      1 child1 1998-11-26 Susan \n2      1 child2 2000-01-29 Jose  \n3      2 child1 1996-06-22 Mark  \n4      3 child1 2002-07-11 Sam   \n5      3 child2 2004-04-05 Seth  \n6      4 child1 2004-10-10 Craig \n7      4 child2 2009-08-27 Khai  \n8      5 child1 2000-12-05 Parker\n9      5 child2 2005-02-28 Gracie",
    "crumbs": [
      "Home",
      "R4DS",
      "Data tidying"
    ]
  },
  {
    "objectID": "r4ds_2nd_05.html#widening-data",
    "href": "r4ds_2nd_05.html#widening-data",
    "title": "Data tidying",
    "section": "Widening data",
    "text": "Widening data\n\ncms_patient_experience |&gt; \n  pivot_wider(\n    id_cols = starts_with(\"org\"),\n    names_from = measure_cd,\n    values_from = prf_rate\n  )\n\n# A tibble: 95 × 8\n   org_pac_id org_nm CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3 CAHPS_GRP_5 CAHPS_GRP_8\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 0446157747 USC C…          63          87          86          57          85\n 2 0446162697 ASSOC…          59          85          83          63          88\n 3 0547164295 BEAVE…          49          NA          75          44          73\n 4 0749333730 CAPE …          67          84          85          65          82\n 5 0840104360 ALLIA…          66          87          87          64          87\n 6 0840109864 REX H…          73          87          84          67          91\n 7 0840513552 SCL H…          58          83          76          58          78\n 8 0941545784 GRITM…          46          86          81          54          NA\n 9 1052612785 COMMU…          65          84          80          58          87\n10 1254237779 OUR L…          61          NA          NA          65          NA\n# ℹ 85 more rows\n# ℹ 1 more variable: CAHPS_GRP_12 &lt;dbl&gt;\n\n\n\ndf &lt;- tribble(\n  ~id, ~measurement, ~value,\n  \"A\",        \"bp1\",    100,\n  \"B\",        \"bp1\",    140,\n  \"B\",        \"bp2\",    115, \n  \"A\",        \"bp2\",    120,\n  \"A\",        \"bp3\",    105\n)\n\ndf |&gt; \n  pivot_wider(\n    names_from = measurement,\n    values_from = value\n  )\n\n# A tibble: 2 × 4\n  id      bp1   bp2   bp3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A       100   120   105\n2 B       140   115    NA\n\ndf |&gt; \n  distinct(measurement) |&gt; \n  pull()\n\n[1] \"bp1\" \"bp2\" \"bp3\"\n\ndf |&gt; \n  select(-measurement, -value) |&gt; \n  distinct()\n\n# A tibble: 2 × 1\n  id   \n  &lt;chr&gt;\n1 A    \n2 B    \n\ndf |&gt; \n  select(-measurement, -value) |&gt; \n  distinct() |&gt; \n  mutate(x = NA, y = NA, z = NA)\n\n# A tibble: 2 × 4\n  id    x     y     z    \n  &lt;chr&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;\n1 A     NA    NA    NA   \n2 B     NA    NA    NA   \n\n\n\ndf &lt;- tribble(\n  ~id, ~measurement, ~value,\n  \"A\",        \"bp1\",    100,\n  \"A\",        \"bp1\",    102,\n  \"A\",        \"bp2\",    120,\n  \"B\",        \"bp1\",    140, \n  \"B\",        \"bp2\",    115\n)\n\ndf |&gt;\n  pivot_wider(\n    names_from = measurement,\n    values_from = value\n  )\n\nWarning: Values from `value` are not uniquely identified; output will contain list-cols.\n• Use `values_fn = list` to suppress this warning.\n• Use `values_fn = {summary_fun}` to summarise duplicates.\n• Use the following dplyr code to identify duplicates.\n  {data} |&gt;\n  dplyr::summarise(n = dplyr::n(), .by = c(id, measurement)) |&gt;\n  dplyr::filter(n &gt; 1L)\n\n\n# A tibble: 2 × 3\n  id    bp1       bp2      \n  &lt;chr&gt; &lt;list&gt;    &lt;list&gt;   \n1 A     &lt;dbl [2]&gt; &lt;dbl [1]&gt;\n2 B     &lt;dbl [1]&gt; &lt;dbl [1]&gt;\n\ndf |&gt; \n  group_by(id, measurement) |&gt; \n  summarize(n = n(), .groups = \"drop\") |&gt; \n  filter(n &gt; 1)\n\n# A tibble: 1 × 3\n  id    measurement     n\n  &lt;chr&gt; &lt;chr&gt;       &lt;int&gt;\n1 A     bp1             2",
    "crumbs": [
      "Home",
      "R4DS",
      "Data tidying"
    ]
  },
  {
    "objectID": "r4ds_2nd_06.html",
    "href": "r4ds_2nd_06.html",
    "title": "Workflow - scripts and projects",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.\n\n\nscripts and projects give you a solid workflow that will serve you well in the future:\n\nCreate one RStudio project for each data analysis project.\nSave your scripts (with informative names) in the project, edit them, run them in bits or as a whole.\nRestart R frequently to make sure you’ve captured everything in your scripts.\nOnly ever use relative paths, not absolute paths.\nThen everything you need is in one place and cleanly separated from all the other projects that you are working on.\n\n\n\n\n\n\nReferences\n\nHadley Wickham, G. G. (2023). R for data science 2nd. O’Reilly Media.",
    "crumbs": [
      "Home",
      "R4DS",
      "Workflow - scripts and projects"
    ]
  },
  {
    "objectID": "r4ds_2nd_09.html",
    "href": "r4ds_2nd_09.html",
    "title": "Layers",
    "section": "",
    "text": "해당 교재는 https://r4ds.hadley.nz/ 에서 확인하실 수 있습니다. 이 문서에 존재하는 모든 인용은 Hadley Wickham (2023) 입니다.\n이 장에서는 그래픽의 레이어 문법(grammar of graphics)을 학습합니다. ggplot2에서 제공하는 가장 중요하고 일반적으로 사용되는 기능을 연습하고 ggplot2를 확장하는 패키지를 소개합니다.\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "r4ds_2nd_09.html#aesthetic-mappings",
    "href": "r4ds_2nd_09.html#aesthetic-mappings",
    "title": "Layers",
    "section": "Aesthetic mappings",
    "text": "Aesthetic mappings\n\n# Light\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point()\n\n\n\n\n\n\n\n# Right\nggplot(mpg, aes(x = displ, y = hwy, shape = class)) + geom_point()\n\nWarning: The shape palette can deal with a maximum of 6 discrete values because more\nthan 6 becomes difficult to discriminate\nℹ you have requested 7 values. Consider specifying shapes manually if you need\n  that many have them.\n\n\nWarning: Removed 62 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n클래스(class)가 shape에 매핑되면 두 가지 경고가 표시됩니다: - 도형 팔레트는 최대 6개의 불연속형 값을 처리할 수 있습니다. 6개를 초과하면 구분이 어려워집니다. 도형이 꼭 필요한 경우 수동으로 도형을 지정하는 것이 좋습니다. - 누락된 값이 포함된 62개 행을 제거했습니다(geom_point()). 데이터 집합에 62개의 SUV가 있지만 플롯되지 않은 것과 관련이 있습니다.\n마찬가지로 클래스를 크기에 매핑하여 각각 포인트의 크기와 alpha 값에 매핑하여 투명도를 제어할 수 있습니다.\n\n# Left\nggplot(mpg, aes(x = displ, y = hwy, size = class)) +\n  geom_point()\n\nWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n\n\n\n# Right\nggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +\n  geom_point()\n\nWarning: Using alpha for a discrete variable is not advised.\n\n\n\n\n\n\n\n\n\n\nstudents &lt;- read_csv(\"data/students.csv\")\n\nRows: 6 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstudents |&gt; janitor::clean_names()\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents |&gt;\n  janitor::clean_names() |&gt;\n  mutate(meal_plan = factor(meal_plan))\n\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\nstudents &lt;- students |&gt;\n  janitor::clean_names() |&gt;\n  mutate(\n    meal_plan = factor(meal_plan),\n    age = parse_number(if_else(age == \"five\", \"5\", age))\n  )\n\n\n연습문제 7.2.4\n\nannoying &lt;- tibble(\n  `1` = 1:10,\n  `2` = `1` * 2 + rnorm(length(`1`))\n)\n\nannoying |&gt;\n  select(`1`)\n\n# A tibble: 10 × 1\n     `1`\n   &lt;int&gt;\n 1     1\n 2     2\n 3     3\n 4     4\n 5     5\n 6     6\n 7     7\n 8     8\n 9     9\n10    10\n\nggplot(annoying, aes(x = `2`, y = `1`)) +\n  geom_point()\n\n\n\n\n\n\n\nannoying |&gt;\n  mutate(`3` = `2` / `1`)\n\n# A tibble: 10 × 3\n     `1`   `2`   `3`\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  3.59  3.59\n 2     2  5.16  2.58\n 3     3  5.22  1.74\n 4     4  9.07  2.27\n 5     5  8.40  1.68\n 6     6 12.5   2.08\n 7     7 11.7   1.67\n 8     8 16.3   2.04\n 9     9 18.5   2.06\n10    10 20.1   2.01\n\nannoying |&gt;\n  mutate(`3` = `2` / `1`) |&gt;\n  rename(\n    \"one\" = `1`,\n    \"two\" = `2`,\n    \"three\" = `3`\n  )\n\n# A tibble: 10 × 3\n     one   two three\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  3.59  3.59\n 2     2  5.16  2.58\n 3     3  5.22  1.74\n 4     4  9.07  2.27\n 5     5  8.40  1.68\n 6     6 12.5   2.08\n 7     7 11.7   1.67\n 8     8 16.3   2.04\n 9     9 18.5   2.06\n10    10 20.1   2.01"
  },
  {
    "objectID": "r4ds_2nd_09.html#data-entry",
    "href": "r4ds_2nd_09.html#data-entry",
    "title": "Layers",
    "section": "Data entry",
    "text": "Data entry\n\ntribble(\n  ~x, ~y, ~z,\n  1, \"h\", 0.08,\n  2, \"m\", 0.83,\n  5, \"g\", 0.60\n)\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6"
  }
]